<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_hornetsting</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-999</depth>
  <persistent>0</persistent>
  <parentName>obj_projectile</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>604</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_inherited</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Go = false;
HitBox = true;
if y = 91 {PT = "Bottom";}
if y = 115 {PT = "Middle";}
if y = 139 {PT = "Top";}
Death = false;
X = 0;
Y = 1;
point = 1;
is = .2;

switch(PT){
    case "Bottom":
        Point[1,X] = xstart+40;
        Point[1,Y] = ystart+24;
        Point[2,X] = xstart+80;
        Point[2,Y] = ystart+48;
    break;
    
    case "Middle":
        Point[1,X] = xstart+40;
        Point[1,Y] = ystart;
        Point[2,X] = xstart+80;
        Point[2,Y] = ystart;
    break;
    
    case "Top":
        Point[1,X] = xstart+40;
        Point[1,Y] = ystart-24;
        Point[2,X] = xstart+80;
        Point[2,Y] = ystart-48;
    break;        
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>with(obj_hitbox){
    if Owner = other.id {instance_destroy();}
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>depth = (y*-1)-10
if HitBox{
    HitBox = false;
    scr_HitBoxCreation(x,y,"Player",Power,CElement.Elec,"",1,0,"Medium",noone);
}
if bc.Field = FieldS.N{
    spd = 4;
    image_speed = is;
    if Go{
        switch(point){
            case 1:
            if point_distance(x,y,Point[1,X],Point[1,Y]) &gt; spd{
                move_towards_point(Point[1,X],Point[1,Y],spd);
                with(obj_hitbox){
                    if Owner = other.id{
                        x = other.Point[1,other.X];
                        y = other.Point[1,other.Y];
                    }
                }
            }else{
                point = 2;
                exit;
            }
            break;
            
            case 2:
            if point_distance(x,y,Point[2,X],Point[2,Y]) &gt; spd{
                move_towards_point(Point[2,X],Point[2,Y],spd);
                with(obj_hitbox){
                    if Owner = other.id{
                        x = other.Point[2,other.X];
                        y = other.Point[2,other.Y];
                    }
                }
            }else{
                point = 3;
                exit;
            }
            break;
            
            case 3:
            Death = true;
            point = 4;
            speed = 0;
            x = Point[2,X];
            y = Point[2,Y];
            break;            
        }
        if Death{
            Death = false;
            is = .5;
            image_index = 0;
            sprite_index = spr_object_death;
        }
    }
}
else{
    image_speed = 0;
    speed = 0;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="7">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if sprite_index = spr_hornetsting{
    image_index = 5;
    Go = true;
}
if sprite_index = spr_object_death{
    instance_destroy();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
