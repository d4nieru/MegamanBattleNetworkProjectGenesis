<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>bc = obj_battlecontroller;
pc = obj_playercontroller;

image_speed = 0;
Target[0] = noone;
timer = 0;
PanelID_Save = noone;
psid_timer = 0;
Touched = false;
if y = 91 {Placement = "Top";}
if y = 115 {Placement = "Middle";}
if y = 139 {Placement = "Bottom";}

//AreaGrab
panel_flash = false;

//Panel Change
Null = false;
Crack = false;
Broke = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Sprite Enum
enum panelimage{
    t_normal = 0,
    m_normal = 1,
    b_normal = 2,
    t_cracked = 3,
    m_cracked = 4,
    b_cracked = 5,
    t_broke = 6,
    m_broke = 7,
    b_broke = 8,
    t_clear = 9,
    m_clear = 10,
    b_clear = 11,
    t_ice = 12,
    m_ice = 13,
    b_ice = 14,
    t_lava = 15,
    m_lava = 21,
    b_lava = 27,
    t_grass = 33,
    m_grass = 34,
    b_grass = 35,
    t_metal = 36,
    m_metal = 37,
    b_metal = 38,
    t_poison = 39,
    m_poison = 40,
    b_poison = 41,
    t_holy = 42,
    m_holy = 43,
    b_holy = 44,
    t_water = 45,
    m_water = 50,
    b_water = 55,
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Panel Type
if image_index = panelimage.t_normal || image_index = panelimage.m_normal || image_index = panelimage.b_normal{
    PanelType = "Normal"
}
if image_index = panelimage.t_cracked || image_index = panelimage.m_cracked || image_index = panelimage.b_cracked{
    PanelType = "Cracked"
}
if image_index = panelimage.t_broke || image_index = panelimage.m_broke || image_index = panelimage.b_broke{
    PanelType = "Broke"
}
if image_index = panelimage.t_clear || image_index = panelimage.m_clear || image_index = panelimage.b_clear{
    PanelType = "Clear"
}
if image_index = panelimage.t_ice || image_index = panelimage.m_ice || image_index = panelimage.b_ice{
    PanelType = "Ice"
}
if image_index = panelimage.t_grass || image_index = panelimage.m_grass || image_index = panelimage.b_grass{
    PanelType = "Grass"
}
if image_index = panelimage.t_poison || image_index = panelimage.m_poison || image_index = panelimage.b_poison{
    PanelType = "Poison"
}
if image_index = panelimage.t_metal || image_index = panelimage.m_metal || image_index = panelimage.b_metal{
    PanelType = "Metal"
}
if image_index = panelimage.t_holy || image_index = panelimage.m_holy || image_index = panelimage.b_holy{
    PanelType = "Holy"
}
if image_index &gt;= panelimage.t_lava &amp;&amp; image_index &lt;= 20 || image_index &gt;= panelimage.m_lava &amp;&amp; image_index &lt;= 26 || image_index &gt;= panelimage.b_lava &amp;&amp; image_index &lt;= 32{
    PanelType = "Lava"
}
if image_index &gt;= panelimage.t_water &amp;&amp; image_index &lt;= 49 || image_index &gt;= panelimage.m_water &amp;&amp; image_index &lt;= 54 || image_index &gt;= panelimage.b_water &amp;&amp; image_index &lt;= 59{
    PanelType = "Water"
}

if PanelType = "Broke" || PanelType = "Clear"{
    Broken = true;
} else{
    Broken = false;
}
if bc.Field = FieldS.N{
    if PanelType = "Broke"{
        timer++;
        if timer = room_speed*15{
            timer = 0;
            Null = true;
        }
    }else{
        timer = 0;
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Panel Storage
if place_meeting(x,y,obj_player) || place_meeting(x,y,obj_virus) || place_meeting(x,y,obj_fieldobject) || place_meeting(x,y,obj_virus_ally){
    PanelStorage = other.id;
}
if !place_meeting(x,y,obj_player) &amp;&amp; !place_meeting(x,y,obj_virus) &amp;&amp; !place_meeting(x,y,obj_fieldobject) &amp;&amp; !place_meeting(x,y,obj_virus_ally){
    if PanelID_Save = noone {PanelStorage = noone;}
}

if bc.Field = FieldS.N{
    if PanelID_Save != noone{
        if !place_meeting(x,y,obj_player) &amp;&amp; !place_meeting(x,y,obj_virus) &amp;&amp; !place_meeting(x,y,obj_virus_ally){
            psid_timer++;
            if psid_timer &gt;= 15{
                psid_timer = 0;
                PanelID_Save = noone;
            }
        }
    }
}

//Breaking Cracked Panels
if PanelType != "Cracked"{
    Touched = false;
}

if PanelStorage != noone &amp;&amp; PanelType = "Cracked"{
    Touched = true;
}
if Touched &amp;&amp; PanelStorage = noone{
    Broke = true;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Panel Change
if Null{
    Null = false;
    switch(Placement){
        case "Top":
        image_index = panelimage.t_normal;
        break;
        
        case "Middle":
        image_index = panelimage.m_normal;
        break;
        
        case "Bottom":
        image_index = panelimage.b_normal;
        break;
    }
}

if Crack{
    Crack = false;
    switch(Placement){
        case "Top":
        image_index = panelimage.t_cracked;
        break;
        
        case "Middle":
        image_index = panelimage.m_cracked;
        break;
        
        case "Bottom":
        image_index = panelimage.b_cracked;
        break;
    }
}

if Broke{
    Broke = false;
    switch(Placement){
        case "Top":
        image_index = panelimage.t_broke;
        break;
        
        case "Middle":
        image_index = panelimage.m_broke;
        break;
        
        case "Bottom":
        image_index = panelimage.b_broke;
        break;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_self();

if Target[0] != noone{
    draw_sprite(spr_panel_target,0,x,y);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
