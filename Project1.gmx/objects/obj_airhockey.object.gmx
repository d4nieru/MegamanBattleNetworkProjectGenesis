<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_airhockey</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-999</depth>
  <persistent>0</persistent>
  <parentName>obj_projectile</parentName>
  <maskName>spr_airhockey</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>604</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_inherited</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Time = 0;
HitBox = true;
spd = 6;
X = 1;
Y = 2;
point = 1
if y = 91{
    Point[1,X] = xstart;
    Point[1,Y] = ystart;
    Point[2,X] = xstart+40;
    Point[2,Y] = ystart+24;
    Point[3,X] = xstart+80;
    Point[3,Y] = ystart+48;
    Point[4,X] = noone;
    Start = "Top";
}
if y = 115{
    Point[1,X] = xstart;
    Point[1,Y] = ystart;
    Point[2,X] = xstart+40;
    Point[2,Y] = ystart+24;
    Point[3,X] = xstart+80;
    Point[3,Y] = ystart;
    Point[4,X] = xstart+40;
    Point[4,Y] = ystart-24
    Start = "Middle";    
} 
if y = 139{
    Point[1,X] = xstart;
    Point[1,Y] = ystart;
    Point[2,X] = xstart+40;
    Point[2,Y] = ystart-24;
    Point[3,X] = xstart+80;
    Point[3,Y] = ystart-48;
    Point[4,X] = noone;
    Start = "Bottom";    
} 

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>with(obj_hitbox){
    if Owner = other.id{
        instance_destroy();
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/*with(obj_hitbox){
    if Owner = other.id{
        x = other.x;
        y = other.y;
    }
    mask_index = spr_airhockey;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if place_meeting(x,y,obj_panel){
    IP = instance_nearest(x,y,obj_panel);
    depth = (IP.y * -1) + (IP.x/40 * -1)-10;

}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Movement
if Time = 3{
    instance_destroy();
}

if bc.Field = FieldS.N{
    spd = 8;
    switch(point){
        case 1:
        if point_distance(x,y,Point[1,X],Point[1,Y]) &gt; spd{
            move_towards_point(Point[1,X],Point[1,Y],spd)
        }else{
            with(obj_hitbox){
                if Owner = other.id{
                    x = other.IP.x;
                    y = other.IP.y;
                    //mask_index = spr_airhockey;
                }
            }
            point = 2;
            exit;
        }
        break;
        
        case 2:
        if point_distance(x,y,Point[2,X],Point[2,Y]) &gt; spd{
            move_towards_point(Point[2,X],Point[2,Y],spd)
        }else{
            with(obj_hitbox){
                if Owner = other.id{
                    x = other.IP.x;
                    y = other.IP.y;
                    //mask_index = spr_airhockey;
                }
            }            
            point = 3;
            exit;
        }
        break; 
        
        case 3:
        if point_distance(x,y,Point[3,X],Point[3,Y]) &gt; spd{
            move_towards_point(Point[3,X],Point[3,Y],spd)
        }else{
            with(obj_hitbox){
                if Owner = other.id{
                    x = other.IP.x;
                    y = other.IP.y;
                    //mask_index = spr_airhockey;
                }
            }           
            if Point[4,X] = noone {point = 1; Time += 1;}
            if Point[4,X] != noone {point = 4;}
            exit;
        }
        break;
        
        case 4:
        if point_distance(x,y,Point[4,X],Point[4,Y]) &gt; spd{
            move_towards_point(Point[4,X],Point[4,Y],spd)
        }else{
            with(obj_hitbox){
                if Owner = other.id{
                    x = other.IP.x;
                    y = other.IP.y;
                    //mask_index = spr_airhockey;
                }
            }            
            point = 1;
            Time += 1;
            exit;
        }
        break;                         
    }
}

if bc.Field != FieldS.N{
    spd = 0;
    speed = 0;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///HitBox
if HitBox{
    HitBox = false;
    scr_HitBoxCreation(x,y,target,Owner.TrueChipPower,pc.ChipSlot[1,pc.Element],"",1,0,"Medium",noone);
}



</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
