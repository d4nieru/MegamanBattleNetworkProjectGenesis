<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-9999</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>bc = obj_battlecontroller;

StreamButton = "";

MaxHP = Demo_HP; //200;
HP = MaxHP;

FullSynchro = 1;

ChipPower = 0;
ChipBoost[1] = 0;
ChipBoost[2] = 0;
ChipBoost[3] = 0;
ChipBoost[4] = 0;
ChipBoost[5] = 0;

AtkBoost_Check = false;

Atk = 1;
ChrgAtk = 10;
Def = 0;
Spd = 0;
ChrgSpd = 0;

AtkBoost = 0;
ChrgAtkBoost = 0;
DefBoost = 0;
SpdBoost = 0;
ChrgSpdBoost = 0;

ScreenDim = false;
NC = "";

///Chip Deck
Deck[0] = obj_fireburn1_f;
Deck[1] = obj_fireburn1_f;
Deck[2] = obj_fireburn1_f;
Deck[3] = obj_cannon_a;
Deck[4] = obj_cannon_a;
Deck[5] = obj_cannon_a;
Deck[6] = obj_machgun1_k;
Deck[7] = obj_machgun1_k;
Deck[8] = obj_machgun1_k;
Deck[9] = obj_atk10_star;

Deck[10] = obj_atk10_star;
Deck[11] = obj_atk10_star;
Deck[12] = obj_atk10_star;
Deck[13] = obj_atk10_star;
Deck[14] = obj_longsword_l;
Deck[15] = obj_sword_s;
Deck[16] = obj_widesword_s;
Deck[17] = obj_widesword_s;
Deck[18] = obj_minibomb_star;
Deck[19] = obj_minibomb_star;

Deck[20] = obj_minibomb_star;
Deck[21] = obj_longsword_l;
Deck[22] = obj_airhockey_g;
Deck[23] = obj_tornadowhip_j;
Deck[24] = obj_hp10_star;
Deck[25] = obj_tornadowhip_j;
Deck[26] = obj_invis_star;
Deck[27] = obj_invis_star;
Deck[28] = obj_hp10_star;
Deck[29] = obj_hp30_l;

MaxChipLimit = 5;
ChipLimit = MaxChipLimit;

scr_ChipDeck_pt1();
scr_ChipDeck_pt2();
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Chip Slot
Name = 0;
Code = 1;
Power = 2;
Element = 3;
Icon = 4;
Dim = 5;
ID = 6;
CBoost = 7;

ChipSlot[1,Name] = "";
ChipSlot[1,Code] = "";
ChipSlot[1,Power] = -1;
ChipSlot[1,Element] = -1;
ChipSlot[1,Icon] = -1;
ChipSlot[1,Dim] = -1;
ChipSlot[1,ID] = -1;
ChipSlot[1,CBoost] = 0;

ChipSlot[2,Name] = "";
ChipSlot[2,Code] = "";
ChipSlot[2,Power] = -1;
ChipSlot[2,Element] = -1;
ChipSlot[2,Icon] = -1;
ChipSlot[2,Dim] = -1;
ChipSlot[2,ID] = -1;
ChipSlot[2,CBoost] = 0;

ChipSlot[3,Name] = "";
ChipSlot[3,Code] = "";
ChipSlot[3,Power] = -1;
ChipSlot[3,Element] = -1;
ChipSlot[3,Icon] = -1;
ChipSlot[3,Dim] = -1;
ChipSlot[3,ID] = -1;
ChipSlot[3,CBoost] = 0;

ChipSlot[4,Name] = "";
ChipSlot[4,Code] = "";
ChipSlot[4,Power] = -1;
ChipSlot[4,Element] = -1;
ChipSlot[4,Icon] = -1;
ChipSlot[4,Dim] = -1;
ChipSlot[4,ID] = -1;
ChipSlot[4,CBoost] = 0;

ChipSlot[5,Name] = "";
ChipSlot[5,Code] = "";
ChipSlot[5,Power] = -1;
ChipSlot[5,Element] = -1;
ChipSlot[5,Icon] = -1;
ChipSlot[5,Dim] = -1;
ChipSlot[5,ID] = -1;
ChipSlot[5,CBoost] = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Controlling the player's stats
player = obj_player;

TrueAtk = Atk+AtkBoost;
TrueChrgAtk = ChrgAtk+ChrgAtkBoost;
TrueDef = Def+DefBoost;
TrueSpd = Spd+SpdBoost;
TrueChrgSpd = ChrgSpd+ChrgSpdBoost;

//Chip Stats
TrueChipPower = (ChipSlot[1,Power]+ChipSlot[1,CBoost])*FullSynchro;


</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Replacing The Chip
if ChipSlot[1,Name] = "" &amp;&amp; ChipSlot[2,Name] != ""{
    for(i=1;i&lt;6;i++;){
        if i != 5{
            ChipSlot[i,Name] = ChipSlot[i+1,Name];
            ChipSlot[i,Code] = ChipSlot[i+1,Code];
            ChipSlot[i,Power] = ChipSlot[i+1,Power];
            ChipSlot[i,Element] = ChipSlot[i+1,Element];
            ChipSlot[i,Icon] = ChipSlot[i+1,Icon];
            ChipSlot[i,Dim] = ChipSlot[i+1,Dim];
            ChipSlot[i,ID] = ChipSlot[i+1,ID];
            ChipSlot[i,CBoost] = ChipSlot[i+1,CBoost];
        }
        if i = 5{
            ChipSlot[i,Name] = "";
            ChipSlot[i,Code] = "";
            ChipSlot[i,Power] = -1;
            ChipSlot[i,Element] = -1;
            ChipSlot[i,Icon] = -1;
            ChipSlot[i,Dim] = -1;
            ChipSlot[i,ID] = -1;
            ChipSlot[i,CBoost] = 0;
            exit;            
        }
    }
}

if ChipSlot[2,Name] = "" &amp;&amp; ChipSlot[3,Name] != ""{
    for(i=2;i&lt;6;i++;){
        if i != 5{
            ChipSlot[i,Name] = ChipSlot[i+1,Name];
            ChipSlot[i,Code] = ChipSlot[i+1,Code];
            ChipSlot[i,Power] = ChipSlot[i+1,Power];
            ChipSlot[i,Element] = ChipSlot[i+1,Element];
            ChipSlot[i,Icon] = ChipSlot[i+1,Icon];
            ChipSlot[i,Dim] = ChipSlot[i+1,Dim];
            ChipSlot[i,ID] = ChipSlot[i+1,ID];
            ChipSlot[i,CBoost] = ChipSlot[i+1,CBoost];
        }
        if i = 5{
            ChipSlot[i,Name] = "";
            ChipSlot[i,Code] = "";
            ChipSlot[i,Power] = -1;
            ChipSlot[i,Element] = -1;
            ChipSlot[i,Icon] = -1;
            ChipSlot[i,Dim] = -1;
            ChipSlot[i,ID] = -1;
            ChipSlot[i,CBoost] = 0;
            exit;            
        }
    }
}

if ChipSlot[3,Name] = "" &amp;&amp; ChipSlot[4,Name] != ""{
    for(i=3;i&lt;6;i++;){
        if i != 5{
            ChipSlot[i,Name] = ChipSlot[i+1,Name];
            ChipSlot[i,Code] = ChipSlot[i+1,Code];
            ChipSlot[i,Power] = ChipSlot[i+1,Power];
            ChipSlot[i,Element] = ChipSlot[i+1,Element];
            ChipSlot[i,Icon] = ChipSlot[i+1,Icon];
            ChipSlot[i,Dim] = ChipSlot[i+1,Dim];
            ChipSlot[i,ID] = ChipSlot[i+1,ID];
            ChipSlot[i,CBoost] = ChipSlot[i+1,CBoost];
        }
        if i = 5{
            ChipSlot[i,Name] = "";
            ChipSlot[i,Code] = "";
            ChipSlot[i,Power] = -1;
            ChipSlot[i,Element] = -1;
            ChipSlot[i,Icon] = -1;
            ChipSlot[i,Dim] = -1;
            ChipSlot[i,ID] = -1;
            ChipSlot[i,CBoost] = 0;
            exit;            
        }
    }
}

if ChipSlot[4,Name] = "" &amp;&amp; ChipSlot[5,Name] != ""{
    for(i=4;i&lt;6;i++;){
        if i != 5{
            ChipSlot[i,Name] = ChipSlot[i+1,Name];
            ChipSlot[i,Code] = ChipSlot[i+1,Code];
            ChipSlot[i,Power] = ChipSlot[i+1,Power];
            ChipSlot[i,Element] = ChipSlot[i+1,Element];
            ChipSlot[i,Icon] = ChipSlot[i+1,Icon];
            ChipSlot[i,Dim] = ChipSlot[i+1,Dim];
            ChipSlot[i,ID] = ChipSlot[i+1,ID];
            ChipSlot[i,CBoost] = ChipSlot[i+1,CBoost];
        }
        if i = 5{
            ChipSlot[i,Name] = "";
            ChipSlot[i,Code] = "";
            ChipSlot[i,Power] = -1;
            ChipSlot[i,Element] = -1;
            ChipSlot[i,Icon] = -1;
            ChipSlot[i,Dim] = -1;
            ChipSlot[i,ID] = -1;
            ChipSlot[i,CBoost] = 0;
            exit;            
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Getting the String width

n_w = string_width(ChipSlot[1,Name]+" ");
p_w = string_width(string(ChipSlot[1,Power]));
b_w = string_width("+");
b2_w = string_width(string(ChipSlot[1,CBoost]));
fs_w = string_width("_");
np_w = string_width(ChipSlot[1,Name]+" "+string(ChipSlot[1,Power]));
npb_w = string_width(ChipSlot[1,Name]+" "+string(ChipSlot[1,Power])+"+"+string(ChipSlot[1,CBoost]));
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Dimming
if ScreenDim &amp;&amp; bc.Field = FieldS.N{
    ScreenDim = false;
    bc.Field = FieldS.D;
    with(instance_create(0,0,obj_dim)){
        Name = other.NC;
        Placement = "Player";
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///AtkBoostCheck
if AtkBoost_Check{
    AtkBoost_Check = false;
    for(i=2;i&lt;5;i++;){
        if ChipSlot[i,Name] = "Attack+10" &amp;&amp; ChipSlot[i-1,Power] &gt; 0{
            ChipSlot[i,Name] = "";
            ChipSlot[i-1,CBoost] += 10;
            AtkBoost_Check = true;
        }
    }
    for(i=2;i&lt;5;i++;){
        if ChipSlot[i,Name] = "Attack+30" &amp;&amp; ChipSlot[i-1,Power] &gt; 0{
            ChipSlot[i,Name] = "";
            ChipSlot[i-1,CBoost] += 30;
            AtkBoost_Check = true;
        }
    }    
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if bc.Field != FieldS.D{

if !instance_exists(obj_chip_menu) &amp;&amp; HP &gt; 0 &amp;&amp; !instance_exists(obj_programadvance_screen){
    //Drawing the Chip Name at the bottom of the screen
    if ChipSlot[1,Name] != ""{
        draw_set_font(bc.Chip_Font);
        draw_set_color(c_white);
        draw_text(-164,149,ChipSlot[1,Name]);
        
        if ChipSlot[1,Power] &gt; 0{
            draw_set_color(c_orange);
            draw_text(-164+n_w,149,string(ChipSlot[1,Power]));
        
        if ChipSlot[1,CBoost] &gt; 0{
            draw_set_color(c_white);
            draw_text(-164+n_w+p_w,149,"+");
            
            draw_set_color(c_orange);
            draw_text(-164+n_w+p_w+b_w,149,string(ChipSlot[1,CBoost]));
        }
        
        if FullSynchro = 2{
            draw_set_color(c_white);
            if ChipSlot[1,CBoost] = 0 {draw_text(-164+n_w+p_w,149,"_");}
            if ChipSlot[1,CBoost] &gt; 0 {draw_text(-164+n_w+p_w+b_w+b2_w,149,"_");}
            
            draw_set_color(c_orange);
            if ChipSlot[1,CBoost] = 0 {draw_text(-164+n_w+p_w+fs_w,149,"2");}
            if ChipSlot[1,CBoost] &gt; 0 {draw_text(-164+n_w+p_w+b_w+b2_w+fs_w,149,"2");}
            
        }
        
      }
    }    
    
    if ChipSlot[5,Name] != ""{
        draw_sprite(spr_chip_icon_border,0,player.x+106,player.y-173);
        draw_sprite(spr_chip_icon,ChipSlot[5,Icon],player.x+106,player.y-173);        
        
        draw_sprite(spr_chip_icon_border,0,player.x+108,player.y-171);
        draw_sprite(spr_chip_icon,ChipSlot[4,Icon],player.x+108,player.y-171);        
        
        draw_sprite(spr_chip_icon_border,0,player.x+110,player.y-169);
        draw_sprite(spr_chip_icon,ChipSlot[3,Icon],player.x+110,player.y-169);        
        
        draw_sprite(spr_chip_icon_border,0,player.x+112,player.y-167);
        draw_sprite(spr_chip_icon,ChipSlot[2,Icon],player.x+112,player.y-167);        
        
        draw_sprite(spr_chip_icon_border,0,player.x+114,player.y-165);
        draw_sprite(spr_chip_icon,ChipSlot[1,Icon],player.x+114,player.y-165);
        exit;
    }
    if ChipSlot[4,Name] != "" &amp;&amp; ChipSlot[5,Name] = ""{
        draw_sprite(spr_chip_icon_border,0,player.x+108,player.y-171);
        draw_sprite(spr_chip_icon,ChipSlot[4,Icon],player.x+108,player.y-171);        
        
        draw_sprite(spr_chip_icon_border,0,player.x+110,player.y-169);
        draw_sprite(spr_chip_icon,ChipSlot[3,Icon],player.x+110,player.y-169);        
        
        draw_sprite(spr_chip_icon_border,0,player.x+112,player.y-167);
        draw_sprite(spr_chip_icon,ChipSlot[2,Icon],player.x+112,player.y-167);        
        
        draw_sprite(spr_chip_icon_border,0,player.x+114,player.y-165);
        draw_sprite(spr_chip_icon,ChipSlot[1,Icon],player.x+114,player.y-165);
        exit;
    }
    if ChipSlot[3,Name] != "" &amp;&amp; ChipSlot[4,Name] = ""{
        draw_sprite(spr_chip_icon_border,0,player.x+110,player.y-169);
        draw_sprite(spr_chip_icon,ChipSlot[3,Icon],player.x+110,player.y-169);        
        
        draw_sprite(spr_chip_icon_border,0,player.x+112,player.y-167);
        draw_sprite(spr_chip_icon,ChipSlot[2,Icon],player.x+112,player.y-167);        
        
        draw_sprite(spr_chip_icon_border,0,player.x+114,player.y-165);
        draw_sprite(spr_chip_icon,ChipSlot[1,Icon],player.x+114,player.y-165);
        exit;
    }
    if ChipSlot[2,Name] != "" &amp;&amp; ChipSlot[3,Name] = ""{
        draw_sprite(spr_chip_icon_border,0,player.x+112,player.y-167);
        draw_sprite(spr_chip_icon,ChipSlot[2,Icon],player.x+112,player.y-167);        
        
        draw_sprite(spr_chip_icon_border,0,player.x+114,player.y-165);
        draw_sprite(spr_chip_icon,ChipSlot[1,Icon],player.x+114,player.y-165);
        exit;
    }
    if ChipSlot[1,Name] != "" &amp;&amp; ChipSlot[2,Name] = ""{
        draw_sprite(spr_chip_icon_border,0,player.x+114,player.y-165);
        draw_sprite(spr_chip_icon,ChipSlot[1,Icon],player.x+114,player.y-165);
        exit;
    }                                
}

}

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
