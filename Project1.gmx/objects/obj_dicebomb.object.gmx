<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_dicebomb</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-999</depth>
  <persistent>0</persistent>
  <parentName>obj_projectile</parentName>
  <maskName>spr_dicebomb</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>604</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_inherited</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Time = 0;
HitBox = false;
spd = 6;
X = 1;
Y = 2;
point = 1
image_speed = 0;
Status = "In Hand";
StartingX = xstart+13;
StartingY = ystart-27
Point[1,X] = StartingX+30;
Point[1,Y] = StartingY-29;
Point[2,X] = StartingX+72;
Point[2,Y] = StartingY-23;
Point[3,X] = StartingX+131;
Point[3,Y] = StartingY+42;
Point[4,X] = StartingX+131;
Point[4,Y] = StartingY+22;
Point[5,X] = StartingX+131
Point[5,Y] = StartingY+42;

Roll = choose(3,4,5,6,7,8);




</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if place_meeting(x,y,obj_panel){
    IP = instance_place(x,y,obj_panel);
    depth = (IP.y * -1)

}

if obj_player.image_round = 2 &amp;&amp; obj_player.sprite_index = spr_megaman_number_dicethrow &amp;&amp; Status = "In Hand"{
    x = StartingX;
    y = StartingY;
}
if obj_player.image_round = 3 &amp;&amp; obj_player.sprite_index = spr_megaman_number_dicethrow &amp;&amp; Status = "In Hand"{
    Status = "Thrown";
}
if Status = "In Hand" &amp;&amp; obj_player.sprite_index != spr_megaman_number_dicethrow{
    instance_destroy();
}

if Status = "Stand"{
    image_speed = 0;
    image_index = Roll;
    instance_destroy();
    if IP.PanelStorage = noone{
        with(instance_create(IP.x,IP.y,obj_dicebomb_fo)){
            image_index = other.image_index;
            IP = other.IP;
        }
        exit;
    }
    if IP.PanelStorage != noone{
        with(instance_create(IP.x,IP.y,obj_explosion)){
            Number = -1;
        }
        scr_HitBoxCreation(IP.x,IP.y,"Enemy",pc.TrueChrgAtk,CElement.Null,"",0,0,"Heavy",noone);
    }
}

if Status = "Explode"{
    if place_meeting(x,y,obj_panel){
        ipanel = instance_place(x,y,obj_panel);
        if ipanel.Broken = false{
            with(instance_create(ipanel.x,ipanel.y,obj_explosion1)){
                Number = -1;
            }
            scr_HitBoxCreation(ipanel.x,ipanel.y,"Enemy",Owner.TrueChipPower,CElement.Null,"",0,0,"Heavy",noone);
        }
    }
    instance_destroy();    
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Movement
if bc.Field = FieldS.N &amp;&amp; Status = "Thrown"{
    if Status = "Thrown"{
        image_speed = .2;
        if image_index &gt;= 3{image_index = 0;}
    }
    switch(point){
        case 1:
        spd = 4;
        if point_distance(x,y,Point[1,X],Point[1,Y]) &gt; spd{
            var new_dir = point_direction(x, y, Point[1,X], Point[1,Y]);
            var diff = angle_difference(direction, new_dir);
            direction -= min(10 * sign(diff),abs(diff));
            move_towards_point(Point[1,X],Point[1,Y],spd);
        }else{
            point = 2;
            exit;
        }
        break;
        
        case 2:
        spd = 4;
        if point_distance(x,y,Point[2,X],Point[2,Y]) &gt; spd{
            var new_dir = point_direction(x, y, Point[2,X], Point[2,Y]);
            var diff = angle_difference(direction, new_dir);
            direction -= min(10 * sign(diff),abs(diff));            
            move_towards_point(Point[2,X],Point[2,Y],spd);
        }else{            
            point = 3;
            exit;
        }
        break; 
        
        case 3:
        spd = 4;
        if point_distance(x,y,Point[3,X],Point[3,Y]) &gt; spd{
            var new_dir = point_direction(x, y, Point[3,X], Point[3,Y]);
            var diff = angle_difference(direction, new_dir);
            direction -= min(10 * sign(diff),abs(diff));            
            move_towards_point(Point[3,X],Point[3,Y],spd);
        }else{            
            point = 4;
            exit;
        }
        break;
        
        case 4:
        spd = 2;
        if point_distance(x,y,Point[4,X],Point[4,Y]) &gt; spd{
            var new_dir = point_direction(x, y, Point[4,X], Point[4,Y]);
            var diff = angle_difference(direction, new_dir);
            direction -= min(10 * sign(diff),abs(diff));            
            move_towards_point(Point[4,X],Point[4,Y],spd);
        }else{            
            point = 5;
            exit;
        }
        break;
        
        case 5:
        spd = 2;
        if point_distance(x,y,Point[5,X],Point[5,Y]) &gt; spd{
            var new_dir = point_direction(x, y, Point[5,X], Point[5,Y]);
            var diff = angle_difference(direction, new_dir);
            direction -= min(10 * sign(diff),abs(diff));            
            move_towards_point(Point[5,X],Point[5,Y],spd);
        }else{            
            point = 6;
            Status = "Stand";
            spd = 0;
            speed = 0;
            exit;
        }
        break;                                         
    }
}

if bc.Field != FieldS.N{
    spd = 0;
    speed = 0;
    image_speed = 0;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
