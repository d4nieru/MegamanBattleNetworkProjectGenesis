<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Top = 0;
Middle = 0;
Bottom = 0;

Panel_Timer = 0;
Panel_Status = 0
Cracked = 0
Normal = 0
Broke = 0; Broken_Touch = 0; Broke_Timer = 0;
Mask_Create = true;
AreaGrab_Change = false;
AGC_Timer = 0;
Virus_Found = false
DS = 1;

//Element Panels
Ice = 0;
Lava = 0;
Grass = 0;
Metal = 0;
Poison = 0;
Holy = 0;
Water = 0;


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/*Top_Normal = 0;
Middle_Normal = 1;
Bottom_Normal = 2;
Top_Cracked = 3;
Middle_Cracked = 4;
Bottom_Cracked = 5;
Top_Broke = 6;
Middle_Broke = 7;
Bottom_Broke = 8;
Top_Clear = 9;
Middle_Clear = 10;
Bottom_Clear = 11;
*/
if image_index = Top_Normal || image_index = Top_Cracked || image_index = Top_Broke || image_index = Top_Clear || image_index = Top_Ice || image_index = Top_Lava || image_index = Top_Grass || image_index = Top_Metal || image_index = Top_Poison || image_index = Top_Holy || image_index = Top_Water{
  Top = 1
}

if image_index = Middle_Normal || image_index = Middle_Cracked || image_index = Middle_Broke || image_index = Middle_Clear || image_index = Middle_Ice || image_index = Middle_Lava || image_index = Middle_Grass || image_index = Middle_Metal || image_index = Middle_Poison || image_index = Middle_Holy || image_index = Middle_Water{
  Middle = 1
}

if image_index = Bottom_Normal || image_index = Bottom_Cracked || image_index = Bottom_Broke || image_index = Bottom_Clear || image_index = Bottom_Ice || image_index = Bottom_Lava || image_index = Bottom_Grass || image_index = Bottom_Metal || image_index = Bottom_Poison || image_index = Bottom_Holy || image_index = Bottom_Water{
  Bottom = 1
}

PS_Normal = 1;
PS_Cracked = 2;
PS_Broke = 3;
PS_Clear = 4;
PS_Ice = 5;
PS_Lava = 6;
PS_Grass = 7;
PS_Metal = 8;
PS_Poison = 9;
PS_Holy = 10;
PS_Water = 11;
//Panel Status
if image_index = Top_Normal || image_index = Middle_Normal || image_index = Bottom_Normal{
  Panel_Status = PS_Normal
}
if image_index = Top_Cracked || image_index = Middle_Cracked || image_index = Bottom_Cracked{
  Panel_Status = PS_Cracked
}
if image_index = Top_Broke || image_index = Middle_Broke || image_index = Bottom_Broke{
  Panel_Status = PS_Broke
}
if image_index = Top_Clear || image_index = Middle_Clear || image_index = Bottom_Clear{
  Panel_Status = PS_Clear
}
if image_index = Top_Ice || image_index = Middle_Ice || image_index = Bottom_Ice{
  Panel_Status = PS_Ice
}
if image_index = Top_Lava || image_index = Middle_Lava || image_index = Bottom_Lava{
  Panel_Status = PS_Lava
}
if image_index = Top_Grass || image_index = Middle_Grass || image_index = Bottom_Grass{
  Panel_Status = PS_Grass
}
if image_index = Top_Metal || image_index = Middle_Metal || image_index = Bottom_Metal{
  Panel_Status = PS_Metal
}
if image_index = Top_Poison || image_index = Middle_Poison || image_index = Bottom_Poison{
  Panel_Status = PS_Poison
}
if image_index = Top_Holy || image_index = Middle_Holy || image_index = Bottom_Holy{
  Panel_Status = PS_Holy
}
if image_index = Top_Water || image_index = Middle_Water || image_index = Bottom_Water{
  Panel_Status = PS_Water
}

//Mask//
if sprite_index = spr_panel_red{
  if Panel_Status != PS_Broke &amp;&amp; Panel_Status != PS_Clear{
     if Mask_Create{
        instance_create(x,y-1,obj_panel_red_mask);
        Mask_Create = false
     }
  }
  if Panel_Status = PS_Broke || Panel_Status = PS_Clear{
     with(instance_position(x,y-1,obj_panel_red_mask)){
       instance_destroy();
     }
     Mask_Create = true
  }
}
if sprite_index = spr_panel_blue{
  if Panel_Status != PS_Broke &amp;&amp; Panel_Status != PS_Clear{
     if Mask_Create{
        instance_create(x,y-1,obj_panel_blue_mask);
        Mask_Create = false
     }
  }
   if Panel_Status = PS_Broke || Panel_Status = PS_Clear{
     with(instance_position(x,y-1,obj_panel_blue_mask)){
       instance_destroy();
     }
     Mask_Create = true
  }
}

//Status Change
//Normal//
if Normal{
  if Panel_Status != PS_Normal{
    if Top{
        image_index = Top_Normal;
        Normal = false
        exit;
    }
    if Middle{
        image_index = Middle_Normal;
        Normal = false
        exit;
    }
    if Bottom{
        image_index = Bottom_Normal;
        Normal = false
        exit;
    }
}
else {Normal = false}
}
//Cracked//
if Cracked{
  if Panel_Status != PS_Cracked{
    if Top{
        image_index = Top_Cracked;
        Cracked = false
        exit;
    }
     if Middle{
        image_index = Middle_Cracked;
        Cracked = false
        exit;
    }
     if Bottom{
        image_index = Bottom_Cracked;
        Cracked = false
        exit;
    }
}
else {Cracked = false}
}
//Broke//
if Panel_Status = PS_Cracked{
  if position_meeting(x,y,obj_megaman) || position_meeting(x,y,obj_virus){
     Broken_Touch = true
  }
  if !position_meeting(x,y,obj_megaman) &amp;&amp; !position_meeting(x,y,obj_virus){
      if Broken_Touch{
          Broke = true
          Broken_Touch = false
      }
  }
  if Broke{
     if image_index = Top_Cracked{
        image_index = Top_Broke
        Broke = false
     }
     if image_index = Middle_Cracked{
        image_index = Middle_Broke
        Broke = false
     }
     if image_index = Bottom_Cracked{
        image_index = Bottom_Broke
        Broke = false
     }
  }
}
else {Broke = false}
//Broke Timer//
if Panel_Status = PS_Broke{
   if obj_megaman.State = S_Normal {Broke_Timer += 1}
   if Broke_Timer &gt;= 600{
     Broke_Timer = 0;
     Normal = true;
   }
}

//Elemental Panel Change
//Ice
if Ice{
  if Panel_Status != PS_Ice{
    if Top{
        image_index = Top_Ice;
        Ice = false
        exit;
    }
    if Middle{
        image_index = Middle_Ice;
        Ice = false
        exit;
    }
    if Bottom{
        image_index = Bottom_Ice;
        Ice = false
        exit;
    }
}
else {Ice = false}
}

//Lava
if Lava{
  if Panel_Status != PS_Lava{
    if Top{
        image_index = Top_Lava;
        Lava = false
        exit;
    }
    if Middle{
        image_index = Middle_Lava;
        Lava = false
        exit;
    }
    if Bottom{
        image_index = Bottom_Lava;
        Lava = false
        exit;
    }
}
else {Lava = false}
}

//Grass
if Grass{
  if Panel_Status != PS_Grass{
    if Top{
        image_index = Top_Grass;
        Grass = false
        exit;
    }
    if Middle{
        image_index = Middle_Grass;
        Grass = false
        exit;
    }
    if Bottom{
        image_index = Bottom_Grass;
        Grass = false
        exit;
    }
}
else {Grass = false}
}

//Metal
if Metal{
  if Panel_Status != PS_Metal{
    if Top{
        image_index = Top_Metal;
        Metal = false
        exit;
    }
    if Middle{
        image_index = Middle_Metal;
        Metal = false
        exit;
    }
    if Bottom{
        image_index = Bottom_Metal;
        Metal = false
        exit;
    }
}
else {Metal = false}
}

//Poison
if Poison{
  if Panel_Status != PS_Poison{
    if Top{
        image_index = Top_Poison;
        Poison = false
        exit;
    }
    if Middle{
        image_index = Middle_Poison;
        Poison = false
        exit;
    }
    if Bottom{
        image_index = Bottom_Poison;
        Poison = false
        exit;
    }
}
else {Poison = false}
}

//Holy
if Holy{
  if Panel_Status != PS_Holy{
    if Top{
        image_index = Top_Holy;
        Holy = false
        exit;
    }
    if Middle{
        image_index = Middle_Holy;
        Holy = false
        exit;
    }
    if Bottom{
        image_index = Bottom_Holy;
        Holy = false
        exit;
    }
}
else {Holy = false}
}

//Water
if Water{
  if Panel_Status != PS_Water{
    if Top{
        image_index = Top_Water;
        Water = false
        exit;
    }
    if Middle{
        image_index = Middle_Water;
        Water = false
        exit;
    }
    if Bottom{
        image_index = Bottom_Water;
        Water = false
        exit;
    }
}
else {Water = false}
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Panel Animation
State = obj_megaman.State

//Lava
Lava_T_Start = 15;
Lava_T_End = 20;
Lava_M_Start = 21;
Lava_M_End = 26;
Lava_B_Start = 27;
Lava_B_End = 32;

//Water
Water_T_Start = 45;
Water_T_End = 49;
Water_M_Start = 50;
Water_M_End = 54;
Water_B_Start = 55;
Water_B_End = 59;

if Panel_Status = PS_Lava{
   AS = .1*DS //AS = Animation Speed, DS = Direction Speed
   image_index += AS;
   if Top{
      if image_index &gt;= Lava_T_End+.8 {DS = -1;}
      if image_index &lt;= Lava_T_Start {DS = 1;}
   }
   if Middle{
      if image_index &gt;= Lava_M_End+.8 {DS = -1;}
      if image_index &lt;= Lava_M_Start {DS = 1;}
   }
   if Bottom{
      if image_index &gt;= Lava_B_End+.8 {DS = -1;}
      if image_index &lt;= Lava_B_Start {DS = 1;}
   }      
}

if Panel_Status = PS_Water{
   AS = .1*DS //AS = Animation Speed, DS = Direction Speed
   image_index += AS;
   if Top{
      if image_index &gt;= Water_T_End+.8 {DS = -1;}
      if image_index &lt;= Water_T_Start {DS = 1;}
   }
   if Middle{
      if image_index &gt;= Water_M_End+.8 {DS = -1;}
      if image_index &lt;= Water_M_Start {DS = 1;}
   }
   if Bottom{
      if image_index &gt;= Water_B_End+.8 {DS = -1;}
      if image_index &lt;= Water_B_Start {DS = 1;}
   }      
}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Panel Timers
if State = S_Normal{

if Panel_Status != PS_Water{
  Panel_Timer = 0;
}
//Water
if Panel_Status = PS_Water{
    Panel_Timer += 1;
    if Panel_Timer = room_speed*30{
      Normal = true
      Panel_Timer = 0;
    }
}

}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
