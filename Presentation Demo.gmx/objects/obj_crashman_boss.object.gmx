<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_crashman_base</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>obj_virus</parentName>
  <maskName>spr_crashman_base</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>VChild = noone;
Mask = spr_crashman_base;
Hitbox_Touch = false;
HitBox = true;
Damage = 0;
Ex_Count = 0;
Ex_true = true;
Semi_Hurt = false;
Hurt = false;
Hurt_Timer = 0;
Damage_Flash = false;
DF_Direction = 0;
AT = 0;
Shuffle = true;
SaveX = 0;
SaveY = 0;

//Fade In Start
image_speed = 0;
image_index = 0;

//Stats
scr_virus_stats("CrashMan",E_Crack);
MaxHp = 800;
Hp = MaxHp;
spd = .5;


//Moving Variables
MMT = 35;
Move_Timer = MMT;
Move_Count = 0;
Direction = 0;
NoMove = -1;
Up = 1;
Down = 2;
Left = 3;
Right = 4;
Return = 5;
DrillStab = 6;
DrillShot = 7;
DrillRain = 8;
CrashCannon = 9;
BigDrillStab = 10;

//Attacking Variables
DrillStab_A = false;
DrillShot_A = false;
DrillRain_A = false;
BigDrillStab_A = false;
CrashCannon_A = false;

Drill_Count = 2;

PT_X[0] = -21;
PT_Y[0] = -21;
PT_X[1] = -22;
PT_Y[1] = -22;
PT_X[2] = -23;
PT_Y[2] = -23;

//Power
Power[0] = 15; //60;
Power[1] = 20; //80;
Power[2] = 20;//40;
Power[3] = 30;//50;
Power[4] = 50; //80;

//States
State = 0;
Normal = 1;
Paused = 1;
Frozen = 1;
Dead = 5;

//Misc Script
scr_panel_lock("Create");

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>604</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_inherited</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>with(VChild){
 instance_destroy();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Damage
if Hp &lt;= 0 {State = Dead}

if (Damage * -1) &gt;= Hp{
   Hp = 0;
} 
if State != Frozen &amp;&amp; State != Paused {
   if Hp = 0 {State = Dead;}
} 

if Hp &gt; MaxHp {Hp = MaxHp}
if Hp &lt; 0 {Hp = 0}
 
if Damage &gt; 0{
   Hp += 1;
   Damage -= 1;
}
if Damage &lt; 0{
   Hp -= 1;
   Damage += 1;
}


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Animation Variables
if Hp &gt; 0 {State = obj_megaman.State;}
scr_weakness_system();
scr_battle_damage_crashman();
if place_meeting(x,y,obj_panel){
  depth = instance_place(x,y,obj_panel).y*-1-1;
}
Base_S = spr_crashman_base;
Fade_In = spr_crashman_fadein;
DrillStab_S = spr_crashman_drillstab;
DrillShot_S = spr_crashman_drilllanch;
DrillRain_S = spr_crashman_drillrain;
BigDrillStab_S = spr_crashman_bigdrillstab;
CrashCannon_S = spr_crashman_drillcannon;
Hurt_S = spr_crashman_hurt;
Hurt_Flash_S = spr_crashman_hurt_flash;


if State = S_Normal{
//Animation Speeds
if sprite_index = Base_S &amp;&amp; image_index = 0 {image_speed = 0;}
if sprite_index = Base_S &amp;&amp; image_index &gt; 0 {image_speed = spd;}
if sprite_index = DrillStab_S &amp;&amp; image_index &gt;= 3 {image_speed = .4;}
if sprite_index = DrillStab_S &amp;&amp; image_index &lt; 3 {image_speed = .2;}
if sprite_index = DrillShot_S {image_speed = .3;}
if sprite_index = DrillRain_S {image_speed = .2;}
if sprite_index = BigDrillStab_S &amp;&amp; image_index &gt;= 4 {image_speed = .4;}
if sprite_index = BigDrillStab_S &amp;&amp; image_index &lt; 4 {image_speed = .2;}
if sprite_index = CrashCannon_S {image_speed = .3;}
if sprite_index = Hurt_S || sprite_index = Hurt_Flash_S {image_speed = 0;}
}

if State != S_Normal{
   if sprite_index != Fade_In {image_speed = 0;}
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Movement
scr_panel_lock("Step");
IP = instance_place(x,y,obj_panel);
RM = choose(Up,Down,Left,Right,) // RM = Random Movement

if State = S_Normal{

if sprite_index = Base_S &amp;&amp; image_index = 0{
     Move_Timer -= 1;
     if Move_Timer = 0{
         switch(RM){
              case NoMove:
              Move_Count += 1;
              Move_Timer = MMT;
              break;
              
              case Up:
              if place_meeting(x,y-24,obj_panel_blue_mask) &amp;&amp; !place_meeting(x,y-24,obj_object) &amp;&amp; !place_meeting(x,y-24,obj_virus){
                with(instance_create(IP.x,IP.y-24,obj_virus_placeholder)){
                    Owner = other.id;
                    other.VChild = id;
                  }                  
                  Direction = Up;
                  image_index = 0.1;
                  Move_Timer = MMT;
              } else {Move_Timer = 1;}
              break;
              
              case Down:
              if place_meeting(x,y+24,obj_panel_blue_mask) &amp;&amp; !place_meeting(x,y+24,obj_object) &amp;&amp; !place_meeting(x,y+24,obj_virus){
                with(instance_create(IP.x,IP.y+24,obj_virus_placeholder)){
                    Owner = other.id;
                    other.VChild = id;
                  }                   
                  Direction = Down;
                  image_index = 0.1;
                  Move_Timer = MMT;
              } else {Move_Timer = 1;}
              break;  
              
              case Left:
              if place_meeting(x-40,y,obj_panel_blue_mask) &amp;&amp; !place_meeting(x-40,y,obj_object) &amp;&amp; !place_meeting(x-40,y,obj_virus){
                with(instance_create(IP.x-40,IP.y,obj_virus_placeholder)){
                    Owner = other.id;
                    other.VChild = id;
                  }                   
                  Direction = Left;
                  image_index = 0.1;
                  Move_Timer = MMT;
              } else {Move_Timer = 1;}
              break; 
              
              case Right:
              if place_meeting(x+40,y,obj_panel_blue_mask) &amp;&amp; !place_meeting(x+40,y,obj_object) &amp;&amp; !place_meeting(x+40,y,obj_virus){
                with(instance_create(IP.x+40,IP.y,obj_virus_placeholder)){
                    Owner = other.id;
                    other.VChild = id;
                  }                   
                  Direction = Right;
                  image_index = 0.1;
                  Move_Timer = MMT;
              } else {Move_Timer = 1;}
              break;                                       
         }
     }
}

}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Attacking
MM = obj_megaman;
MMP = instance_place(MM.x,MM.y,obj_panel)
MMPY = instance_place(MM.x,MM.y,obj_panel).y

if Shuffle{
   RA1 = choose(DrillStab,DrillShot)
   RA2 = choose(DrillShot,DrillRain)
   RA3 = choose(DrillRain,DrillStab,DrillShot)
   RA4 = choose(DrillShot,DrillStab,DrillRain)

}
/*/Attack Timer
if sprite_index != Sword_S{
   Sword_Timer = 0;
   Sword_Effect = true;
}
if sprite_index != Block_S{
  Block_Timer = 0;
  Shield = false;
  Shield_Gain = true;
}
if sprite_index != Buster_S{
  Buster_Count = MBC;
  Buster_Shot = true;
}
if sprite_index != Flame_S{
  Flame_Timer = 0;
  Flame_Summon = true;
}
if sprite_index != Throw_S{
  Throw_SFX = true;
}*/

if State = S_Normal{

/*if sprite_index = Sword_S &amp;&amp; image_index = 0{
  Sword_Timer += 1;
  if Sword_Timer = (room_speed/2)-15{
     Sword_Timer = 0;
     image_index = 0.1;
  }
}
if sprite_index = Block_S &amp;&amp; image_index = 1{
  Block_Timer += 1;
  if Block_Timer = (room_speed/2)+(10){
     Block_Timer = 0;
     image_index = 1.1;
  }
}
if sprite_index = Flame_S{
   Flame_Timer += 1;
   if Flame_Timer = room_speed{
      Flame_Timer = 0;
      image_speed = 0;
      image_index = 0;
      sprite_index = Base_S;
      Move_Count += 1;
   }
}*/

//Attack State

if Move_Count = 3 &amp;&amp; sprite_index = Base_S &amp;&amp; image_index = 0{
   Shuffle = false;
   switch(RA1){
        case DrillStab:
        image_index = .1;
        if Hp &gt;= 500 {Direction = DrillStab;}
        if Hp &lt;= 499 {Direction = BigDrillStab;}
        break;
        
        case DrillShot:
        DrillShot_A = true;
        break;
        
       case DrillRain:
       DrillRain_A = true;
       break; 
       
       case CrashCannon:
       image_index = .1; 
       Direction = CrashCannon;
       //if Hp &gt;= 500 {DrillRain_A = true;}
       break;              
        
        
   }
}

if Move_Count = 7 &amp;&amp; sprite_index = Base_S &amp;&amp; image_index = 0{
   Shuffle = false;
   switch(RA2){
        case DrillStab:
        image_index = .1;
        if Hp &gt;= 500 {Direction = DrillStab;}
        if Hp &lt;= 499 {Direction = BigDrillStab;}
        break;
        
        case DrillShot:
        DrillShot_A = true;
        break;
        
       case DrillRain:
       DrillRain_A = true;
       break; 
       
       case CrashCannon:
       image_index = .1;
       Direction = CrashCannon
       break;              
        
        
   }
}

if Move_Count = 11 &amp;&amp; sprite_index = Base_S &amp;&amp; image_index = 0{
   DrillRain_A = true;
}

if Move_Count = 15 &amp;&amp; sprite_index = Base_S &amp;&amp; image_index = 0{
   Shuffle = false;
   switch(RA3){
        case DrillStab:
        image_index = .1;
        if Hp &gt;= 500 {Direction = DrillStab;}
        if Hp &lt;= 499 {Direction = BigDrillStab;}
        break;
        
        case DrillShot:
        DrillShot_A = true;
        break;
        
       case DrillRain:
       DrillRain_A = true;
       break; 
       
       case CrashCannon:
       image_index = .1;
       Direction = CrashCannon
       break;              
        
        
   }
}

if Move_Count = 19 &amp;&amp; sprite_index = Base_S &amp;&amp; image_index = 0{
   Shuffle = false;
   switch(RA4){
        case DrillStab:
        image_index = .1;
        if Hp &gt;= 500 {Direction = DrillStab;}
        if Hp &lt;= 499 {Direction = BigDrillStab;}
        break;
        
        case DrillShot:
        DrillShot_A = true;
        break;
        
       case DrillRain:
       DrillRain_A = true;
       break; 
       
       case CrashCannon:
       image_index = .1;
       Direction = CrashCannon
       break;              
        
        
   }
}

if Move_Count = 23 &amp;&amp; sprite_index = Base_S &amp;&amp; image_index = 0{
   if Hp &gt;= 500 {Move_Count = 28;}
   if Hp &lt;= 499{
       image_index = .1;
       Direction = CrashCannon;   
   }
}

if Move_Count = 27 &amp;&amp; sprite_index = Base_S &amp;&amp; image_index = 0{
   image_index = .1;
   Direction = BigDrillStab;   

}

}
//Move_Count Reset
if Move_Count &gt; 27 {Move_Count = 0}


</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Coding the Attack

//DrillStab
if DrillStab_A{
   DrillStab_A = false;
   image_index = 0;
   sprite_index = DrillStab_S;    
}

if BigDrillStab_A{
   BigDrillStab_A = false;
   image_index = 0;
   sprite_index = BigDrillStab_S;    
}

if DrillShot_A{
   DrillShot_A = false;
   image_index = 0;
   sprite_index = DrillShot_S;
}

if DrillRain_A{
    DrillRain_A = false;
    image_index = 0;
    sprite_index = DrillRain_S;
}

if CrashCannon_A{
   CrashCannon_A = false;
   image_index = 0;
   sprite_index = CrashCannon_S;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Attack HitBox &amp; Sprites
image_round = round(image_index);

//Drill Stab
if sprite_index = DrillStab_S{
        switch(image_round){
           case 3:
          if HitBox{
             with(instance_create(IP.x-40,IP.y-3,obj_crashman_hitbox)){
                 Semi = true;
                 Element = E_Crack;
                 Timer = 1;
                 Power = other.Power[0];
                 Travel = false;
             };
          }
           HitBox = false
           break;

           case 5:
           HitBox = true
           break;           
                      
           case 6:
          if HitBox{
             with(instance_create(IP.x-40,IP.y-3,obj_crashman_hitbox)){
                 Semi = true;
                 Element = E_Crack;
                 Timer = 1;
                 Power = other.Power[0];
                 Travel = false;
             };
          }
           HitBox = false
           break;
        }
}

//Big Drill Stab
if sprite_index = BigDrillStab_S{
        switch(image_round){
           case 4:
          if HitBox{
             with(instance_create(IP.x-40,IP.y-3,obj_crashman_hitbox)){
                 Semi = true;
                 Element = E_Crack;
                 Timer = 1;
                 Power = other.Power[1];
                 Travel = false;
             };
             with(instance_create(IP.x-80,IP.y-3,obj_crashman_hitbox)){
                 Semi = true;
                 Element = E_Crack;
                 Timer = 1;
                 Power = other.Power[1];
                 Travel = false;
             };         
          }
           HitBox = false
           break;

           case 6:
           HitBox = true
           break;           
                      
           case 8:
          if HitBox{
             with(instance_create(IP.x-40,IP.y-3,obj_crashman_hitbox)){
                 Semi = true;
                 Element = E_Crack;
                 Timer = 1;
                 Power = other.Power[1];
                 Travel = false;
             };
             with(instance_create(IP.x-80,IP.y-3,obj_crashman_hitbox)){
                 Semi = true;
                 Element = E_Crack;
                 Timer = 1;
                 Power = other.Power[1];
                 Travel = false;
             };             
          }
           HitBox = false
           break;
           
           case 10:
           HitBox = true
           break; 
           
           case 12:
          if HitBox{
             with(instance_create(IP.x-40,IP.y-3,obj_crashman_hitbox)){
                 Semi = true;
                 Element = E_Crack;
                 Timer = 1;
                 Power = other.Power[1];
                 Travel = false;
             };
          }
           HitBox = false
           break;                      
        }
}

//Drill Shot
if sprite_index = DrillShot_S{
    if image_round = 8 &amp;&amp; HitBox{
         instance_create(x-23,y-9,obj_drill_straight);
         instance_create(x+7,y-9,obj_drill_straight);
         instance_create(x+37,y-9,obj_drill_straight);
         HitBox = false;
    }
}

//Drill Rain
if PT_X[0] = PT_X[1] &amp;&amp; PT_Y[0] = PT_Y[1]{
     PT_X[1] = choose(20,60,100);
     PT_Y[1] = choose(91,115,139);
}
if PT_X[1] = PT_X[2] &amp;&amp; PT_Y[1] = PT_Y[2]{
     PT_X[2] = choose(20,60,100);
     PT_Y[2] = choose(91,115,139);
}
if PT_X[0] = PT_X[2] &amp;&amp; PT_Y[0] = PT_Y[2]{
     PT_X[2] = choose(20,60,100);
     PT_Y[2] = choose(91,115,139); 
}

if sprite_index = DrillRain_S{
    if image_round = 1{
        PT_X[0] = choose(20,60,100);
        PT_Y[0] = choose(91,115,139);
        PT_X[1] = choose(20,60,100);
        PT_Y[1] = choose(91,115,139);
        PT_X[2] = choose(20,60,100);
        PT_Y[2] = choose(91,115,139);        
        
    }    

    if image_round = 7 &amp;&amp; HitBox{
         instance_create(x+16,y-36,obj_drill_up);
         HitBox = false;
    }
}

//Crash Cannon
if sprite_index = CrashCannon_S{
    if image_round = 9{
          if HitBox{
             HitBox = false;
             with(instance_create(IP.x-40,IP.y-3,obj_crashman_hitbox)){
                   Hurt = true;
                   Element = E_None;
                   Power = other.Power[4];
                   Travel = true;
                   Tank_Cannon = true;
             }             
          }
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Death
if State = Dead &amp;&amp; obj_megaman.State = S_Normal{
  image_speed = 0;
  sprite_index = Hurt_Flash_S;
  image_alpha = 1;

  
  
  if Ex_Count = 0 &amp;&amp; Ex_true{
     Ex_true = false;
     with(instance_create(x-11,y+6,obj_expolsion_effect)){
        Owner = other.id;
        Ex_Count = true;
     }    
  }
   if Ex_Count = 1 &amp;&amp; Ex_true{
     Ex_true = false;
     with(instance_create(x+13,y-12,obj_expolsion_effect)){
        Owner = other.id;
        Ex_Count = true;
     }    
  }
   if Ex_Count = 2 &amp;&amp; Ex_true{
     instance_destroy();
     Ex_true = false;
     with(instance_create(x+5,y+9,obj_expolsion_effect)){
        Owner = other.id;
        Ex_Count = true;
     }    
  }

  }
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>604</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_inherited</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
    </event>
    <event eventtype="7" enumb="7">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Direction
Shuffle = true;
HitBox = true;

if sprite_index = Base_S{
     switch(Direction){
         case Up:
         y-=24;
         image_index = 0;
         Direction = 0;
         Move_Count += 1;
         break;
         
         case Down:
         y+=24;
         image_index = 0;
         Direction = 0;
         Move_Count += 1;
         break;
         
         case Left:
         x-=40;
         image_index = 0;
         Direction = 0;
         Move_Count += 1;
         break;    
         
         case Right:
         x+=40;
         image_index = 0;
         Direction = 0;
         Move_Count += 1;
         break; 
         
         case Return:
         x = SaveX;
         y = SaveY;
         Move_Count += 1;
         Shuffle = true;
         image_index = 0;
         image_speed = 0;
         sprite_index = Base_S;   
         break;    
         
         case BigDrillStab:   
      if place_meeting(140-5,MMP.y-25,obj_panel_blue_mask) &amp;&amp; !place_meeting(140-5,MMP.y-25,obj_object) &amp;&amp; !place_meeting(140-5,MMP.y-25,obj_virus){
        x = 140-5;
        y = MMP.y-25;
        BigDrillStab_A = true;
      }
      else{
       if place_meeting(180-5,MMP.y-25,obj_panel_blue_mask) &amp;&amp; !place_meeting(180-5,MMP.y-25,obj_object) &amp;&amp; !place_meeting(180-5,MMP.y-25,obj_virus){
           x = 180-5;
           y = MMP.y-25;
           BigDrillStab_A = true;       
       }
       else{
       if place_meeting(220-5,MMP.y-25,obj_panel_blue_mask) &amp;&amp; !place_meeting(220-5,MMP.y-25,obj_object) &amp;&amp; !place_meeting(220-5,MMP.y-25,obj_virus){
           x = 220-5;
           y = MMP.y-25;
           BigDrillStab_A = true;       
       }
         else{
             DrillShot_A = true;
         }       
       }
      }
         exit;
         break;  
         
         case CrashCannon:
         if place_meeting(x,115-25,obj_panel_blue_mask) &amp;&amp; !place_meeting(x,115-25,obj_object) &amp;&amp; !place_meeting(x,115-25,obj_virus){
            y = 115-25;
            CrashCannon_A = true;
         }
         else{
             if place_meeting(x+40-5,115-25,obj_panel_blue_mask) &amp;&amp; !place_meeting(x+40-5,115-25,obj_object) &amp;&amp; !place_meeting(x+40-5,115-25,obj_virus){
                x += 40-5;
                y = 115-25;
                CrashCannon_A = true;
             }
             else{
               if place_meeting(x-40-5,115-25,obj_panel_blue_mask) &amp;&amp; !place_meeting(x-40-5,115-25,obj_object) &amp;&amp; !place_meeting(x-40-5,115-25,obj_virus){
                   x -= 40-5;
                   y = 115-25;
                   CrashCannon_A = true;
               }
               else{
                  CrashCannon_A = true;
               }
             }
         }
         exit; 
         
         case DrillStab:
         if place_meeting(MMP.x+40-5,MMP.y-25,obj_panel) &amp;&amp; !place_meeting(MMP.x+40-5,MMP.y-25,obj_object) &amp;&amp; !place_meeting(MMP.x+40-5,MMP.y-25,obj_virus){
           if instance_place(MMP.x+40-5,MMP.y-25,obj_panel).Panel_Status != 3 &amp;&amp; instance_place(MMP.x+40-5,MMP.y-25,obj_panel).Panel_Status != 4{    
              SaveX = x;
              SaveY = y;
              x = MMP.x+40-5;
              y = MMP.y-25;
              DrillStab_A = true;
           }
           else{
              DrillShot_A = true;
           }   
         }
         else{
            DrillShot_A = true;
         }
         exit;                                       
     }
}

//Attacking
if sprite_index = DrillStab_S || sprite_index = BigDrillStab_S{
     if sprite_index = DrillStab_S{
         image_index = .1;
         sprite_index = Base_S;
         Direction = Return;
         exit;
     }     
     image_index = 0;
     sprite_index = Base_S;
     Move_Count += 1;  
}

if sprite_index = DrillShot_S{
   image_index = 0;
   sprite_index = Base_S;
   Move_Count += 1
}

if sprite_index = DrillRain_S{
   image_index = 0;
   sprite_index = Base_S;
   Move_Count += 1
}

if sprite_index = CrashCannon_S{
   image_index = 0;
   sprite_index = Base_S;
   Move_Count += 1
}

/*if sprite_index = Throw_S{
  image_index = 0;
  sprite_index = Base_S;
  Move_Count += 1;
}

if sprite_index = Sword_S{
   image_index = 0.1;
   sprite_index = Base_S;
   Direction = Return;
} 

if sprite_index = Flame_S{
   image_index = 3;
}*/

with(VChild){
    instance_destroy();
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>604</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_inherited</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_self();

if Hp &gt; 0 &amp;&amp; sprite_index != Fade_In &amp;&amp; image_alpha != 0{
draw_set_font(obj_field.EnemyHp_Font);
draw_text(x-3,y+27,round(Hp));
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
