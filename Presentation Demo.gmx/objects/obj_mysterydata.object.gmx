<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_mysterydata</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>text_parent</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>image_speed = .2;
//Item Types
Chip = 1;
SubChip = 2;
KeyItem = 3;
Virus = 4;
NaviCust = 5;

//Data Type
Green = 1; //Generates a random set item, refreshes with each jack-in.
Blue = 2; //Generates a set item, after use it's gone for good.
Purple = 3; //Generates a set item, after use it's gone for good. Can only be use with the Unlocker SubChip
//mugshot = blank_mugshot;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Animation Control
Green_Start = 0;
Green_End = 7;
Blue_Start = 8;
Blue_End = 15;
Purple_Start = 16;
Purple_End = 23;

switch(Data_Type){
   case Green:
   if image_index &gt;= Green_End{
      image_index = Green_Start;
   }
   break;
   case Blue:
   if image_index &gt;= Blue_End{
      image_index = Blue_Start;
   }
   break;
   case Purple:
   if image_index &gt;= Purple_End{
      image_index = Purple_Start;
   }
   break;      
}

//Setting the Inventory
if place_meeting(x,y,objPlayerParent){
   if keyboard_check_pressed(ord("Z")){
   if Item_Type = Chip{    
        audio_play_sound(sou_item_get,0,0);
        with(instance_create(-10,0,text_parent)){
            scr_text_system(1,spr_blank_mugshot,"   You got"+" "+string(other.Amount)+"#   "+other.Name,noone,-1,"",noone);
            alarm[0] = room_speed/5;
        }
        add_chip_to_pack(Object);
        instance_destroy();
     } 
   if Item_Type = SubChip{
       switch(Name){
          case "MiniEnrg":
          if SCI[MiniEnrg] != 4{
             SCI[MiniEnrg] += 1;           
          } else {text = ("You can only have 4 of this subchip at a time")}
          break;
          case "FullEnrg":
          if SCI[FullEnrg] != 4{
             SCI[FullEnrg] += 1;          
          } else {text = ("You can only have 4 of this subchip at a time")}
          break;  
          case "SneakRun":
          if SCI[SneakRun] != 4{
             SCI[SneakRun] += 1;         
          } else {text = ("You can only have 4 of this subchip at a time")}
          break;
          case "Untrap":
          if SCI[Untrap] != 4{
             SCI[Untrap] += 1;
          } else {text = ("You can only have 4 of this subchip at a time")}
          break;
          case "LocEnemy":
          if SCI[LocEnemy] != 4{
             SCI[LocEnemy] += 1;
          } else {text = ("You can only have 4 of this subchip at a time")}
          break;
          case "Unlocker":
          if SCI[Unlocker] != 4{
             SCI[Unlocker] += 1;           
          } else {text = ("You can only have 4 of this subchip at a time")}
          break;                                                
       }
   }    
   }
}

if keyboard_check(ord("Q")){
 global.Last_Room = room;
 room_goto(rm_chip_inventory_test);
}
if keyboard_check(ord("E")){
 global.Last_Room = room;
 room_goto(rm_deck_show_test);
}
if keyboard_check(ord("T")){
 global.Last_Room = room;
 room_goto(rm_trunk_show_test);
}

depth = -y;
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
