<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_cannon</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>obj_ingamechip_player</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Cannon_Start = 0;
Cannon_End = 8;
HiCannon_Start = 9;
HiCannon_End = 17;
MCannon_Start = 18;
MCannon_End = 26;
Cannon_Type = 0;
Cannon_Set = true;
HitBox = 1;
Sound_Play = true; 
Used = "Used";
Name = global.Slot_Name[1];
global.Slot_Name[1] = Used;


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///State Manage
depth = Owner.depth-1;
State = obj_megaman.State;
if Cannon_Set{
if Cannon_Type = 1{
   image_index = Cannon_Start;
}
if Cannon_Type = 2{
   image_index = HiCannon_Start;
}
if Cannon_Type = 3{
   image_index = MCannon_Start;
}
Cannon_Set = false;
}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Sprite Animation Control
Cannon_Start = 0;
Cannon_End = 8;
Cannon_Hitbox = 4;
HiCannon_Start = 9;
HiCannon_End = 17;
HiCannon_Hitbox = 13;
MCannon_Start = 18;
MCannon_End = 26;
MCannon_Hitbox = 22;

/*
      Cannon_Type
      1 = Cannon
      2 = HiCannon
      3 = MCannon
*/

if State = S_Normal{

if Cannon_Type = 1 &amp;&amp; image_index &gt;= Cannon_End{
  //Set Player to idle and clear the first chip slot
  instance_destroy();
  with(Owner){
     image_index = 0;
     image_speed = 0;
     sprite_index = Base_S;
     if global.Slot_Name[1] = other.Used{
           global.Slot_Name[1] = "";
           global.Slot_Code[1] = -1;
           global.Slot_Power[1] = -1;
           global.Slot_Element[1] = -1;
           global.Slot_Icon[1] = -1; 
        }    
  }
}
if Cannon_Type = 2 &amp;&amp; image_index &gt;= HiCannon_End{
  //Set Player to idle and clear the first chip slot
  instance_destroy();
  with(Owner){
     image_index = 0;
     image_speed = 0;
     sprite_index = Base_S;
     if global.Slot_Name[1] = other.Used{
           global.Slot_Name[1] = "";
           global.Slot_Code[1] = -1;
           global.Slot_Power[1] = -1;
           global.Slot_Element[1] = -1;
           global.Slot_Icon[1] = -1; 
        }      
  }  
}
if Cannon_Type = 3 &amp;&amp; image_index &gt;= MCannon_End{
  //Set Player to idle and clear the first chip slot
  instance_destroy();
  with(Owner){
     image_index = 0;
     image_speed = 0;
     sprite_index = Base_S;
     if global.Slot_Name[1] = other.Used{
           global.Slot_Name[1] = "";
           global.Slot_Code[1] = -1;
           global.Slot_Power[1] = -1;
           global.Slot_Element[1] = -1;
           global.Slot_Icon[1] = -1; 
        }      
  }  
}

//Controlling the Player
if image_index = Cannon_Start || image_index = HiCannon_Start || image_index = MCannon_Start{
   Owner.image_index = 1
}
if image_index &gt;= Cannon_Start+2 &amp;&amp; image_index &lt; Cannon_Start+4 || image_index &gt;= HiCannon_Start+2 &amp;&amp; image_index &lt; HiCannon_Start+4 || image_index &gt;= MCannon_Start+2 &amp;&amp; image_index &lt; MCannon_Start+4{
   Owner.image_index = 2
}
if image_index &gt;= Cannon_Start+4 &amp;&amp; image_index &lt; Cannon_End || image_index &gt;= HiCannon_Start+4 &amp;&amp; image_index &lt; HiCannon_End || image_index &gt;= MCannon_Start+4 &amp;&amp; image_index &lt; MCannon_End{
   Owner.image_index = 5
}

//Speeds
if Cannon_Type &gt; 0 {image_speed = .5;}
if Cannon_Type = 0 {image_speed = 0;}
}

if State != S_Normal{
  image_speed = 0;
}

//HitBox
if Cannon_Type = 1 &amp;&amp; image_index &gt;= Cannon_Hitbox{
    if HitBox{
         HitBox = 0;
         audio_play_sound(sou_cannon,0,0);
         with(instance_create(Owner.StandPX,Owner.StandPY-3,obj_buster_hitbox)){
         Travel = true;
         Owner = other.id;
         Power = global.Slot_Power[1];
         Hurt = true;
         Buster_Sound = MegaBuster;
        }         
    }
}
if Cannon_Type = 2 &amp;&amp; image_index &gt;= HiCannon_Hitbox{
    if HitBox{
         HitBox = 0;
         audio_play_sound(sou_cannon,0,0);
         with(instance_create(Owner.StandPX,Owner.StandPY-3,obj_buster_hitbox)){
         Travel = true;
         Owner = other.id;
         Power = global.Slot_Power[1];
         Hurt = true;
         Buster_Sound = MegaBuster;
        }         
    }
}
if Cannon_Type = 3 &amp;&amp; image_index &gt;= MCannon_Hitbox{
    if HitBox{
         HitBox = 0;
         audio_play_sound(sou_cannon,0,0);
         with(instance_create(Owner.StandPX,Owner.StandPY-3,obj_buster_hitbox)){
         Travel = true;
         Owner = other.id;
         Power = global.Slot_Power[1];
         Hurt = true;
         Buster_Sound = MegaBuster;
        }         
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
