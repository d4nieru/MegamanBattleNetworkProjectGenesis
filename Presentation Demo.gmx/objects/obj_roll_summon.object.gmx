<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_roll_fade_in</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-100</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>spr_mett_line_sight</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>image_speed = .2;
Target = 0;
Attack = false;
Scan = true;
Animation_Change = false;
Return = false;
Heal = (global.Slot_Power[1]*3)
HitBox = true;

//Virus Targeting ST = Starting_Target
ST_X = 60
ST_Y = 91

//Row 1
if Scan{

if position_meeting(ST_X,ST_Y,obj_virus) &amp;&amp; !position_meeting(ST_X-39,ST_Y,obj_virus){
  Move_To_X = ST_X-39;
  Move_To_Y = ST_Y;
  Attack = true;
  Scan = false;
  Animation_Change = true;
  exit;
}
if position_meeting(ST_X,ST_Y+24,obj_virus) &amp;&amp; !position_meeting(ST_X-39,ST_Y+24,obj_virus){
  Move_To_X = ST_X-39;
  Move_To_Y = ST_Y+24;
  Attack = true;
  Scan = false;
  Animation_Change = true;
  exit;
}
if position_meeting(ST_X,ST_Y+48,obj_virus) &amp;&amp; !position_meeting(ST_X-39,ST_Y+48,obj_virus){
  Move_To_X = ST_X-39;
  Move_To_Y = ST_Y+48;
  Attack = true;
  Scan = false;
  Animation_Change = true;
  exit;  
}
//Row2
if position_meeting(ST_X+39,ST_Y,obj_virus) &amp;&amp; !position_meeting(ST_X,ST_Y,obj_virus){
  Move_To_X = ST_X;
  Move_To_Y = ST_Y;
  Attack = true;
  Scan = false;
  Animation_Change = true;
  exit;  
}
if position_meeting(ST_X+39,ST_Y+24,obj_virus) &amp;&amp; !position_meeting(ST_X,ST_Y+24,obj_virus){
  Move_To_X = ST_X;
  Move_To_Y = ST_Y+24;
  Attack = true;
  Scan = false;
  Animation_Change = true;
  exit;  
}
if position_meeting(ST_X+39,ST_Y+48,obj_virus) &amp;&amp; !position_meeting(ST_X,ST_Y+48,obj_virus){
  Move_To_X = ST_X;
  Move_To_Y = ST_Y+48;
  Attack = true;
  Scan = false;
  Animation_Change = true;
  exit;  
}
//Row3
if position_meeting(ST_X+(39*2),ST_Y,obj_virus) &amp;&amp; !position_meeting(ST_X+39,ST_Y,obj_virus){
 if instance_place(ST_X+(39*2),ST_Y,obj_virus).sprite_index != spr_panel_indacator{
     Move_To_X = ST_X+39;
     Move_To_Y = ST_Y;
     Attack = true;
     Scan = false;
     Animation_Change = true;
     exit;
  }
}
if position_meeting(ST_X+(39*2),ST_Y+24,obj_virus) &amp;&amp; !position_meeting(ST_X+39,ST_Y+24,obj_virus){
 if instance_place(ST_X+(39*2),ST_Y+24,obj_virus).sprite_index != spr_panel_indacator{
     Move_To_X = ST_X+39;
     Move_To_Y = ST_Y+24;
     Attack = true;
     Scan = false;
     Animation_Change = true;
     exit;
  }  
}
if position_meeting(ST_X+(39*2),ST_Y+48,obj_virus) &amp;&amp; !position_meeting(ST_X+39,ST_Y+48,obj_virus){
 if instance_place(ST_X+(39*2),ST_Y+48,obj_virus).sprite_index != spr_panel_indacator{
     Move_To_X = ST_X+39;
     Move_To_Y = ST_Y+48;
     Attack = true;
     Scan = false;
     Animation_Change = true;
     exit;
  }  
}
//Row4
if position_meeting(ST_X+(39*3),ST_Y,obj_virus) &amp;&amp; !position_meeting(ST_X+(39*2),ST_Y,obj_virus){
 if instance_place(ST_X+(39*3),ST_Y,obj_virus).sprite_index != spr_panel_indacator{
     Move_To_X = ST_X+(39*2);
     Move_To_Y = ST_Y;
     Attack = true;
     Scan = false;
     Animation_Change = true;
     exit;
  }
}
if position_meeting(ST_X+(39*3),ST_Y+24,obj_virus) &amp;&amp; !position_meeting(ST_X+(39*2),ST_Y+24,obj_virus){
 if instance_place(ST_X+(39*3),ST_Y+24,obj_virus).sprite_index != spr_panel_indacator{
     Move_To_X = ST_X+(39*2);
     Move_To_Y = ST_Y+24;
     Attack = true;
     Scan = false;
     Animation_Change = true;
     exit;
  }
}
if position_meeting(ST_X+(39*3),ST_Y+48,obj_virus) &amp;&amp; !position_meeting(ST_X+(39*2),ST_Y+48,obj_virus){
 if instance_place(ST_X+(39*3),ST_Y+48,obj_virus).sprite_index != spr_panel_indacator{
     Move_To_X = ST_X+(39*2);
     Move_To_Y = ST_Y+48;
     Attack = true;
     Scan = false;
     Animation_Change = true;
     exit;
  }
}
//Row5
if position_meeting(ST_X+(39*4),ST_Y,obj_virus) &amp;&amp; !position_meeting(ST_X+(39*3),ST_Y,obj_virus){
 if instance_place(ST_X+(39*4),ST_Y,obj_virus).sprite_index != spr_panel_indacator{
     Move_To_X = ST_X+(39*3);
     Move_To_Y = ST_Y;
     Attack = true;
     Scan = false;
     Animation_Change = true;
     exit;
  }
}
if position_meeting(ST_X+(39*4),ST_Y+24,obj_virus) &amp;&amp; !position_meeting(ST_X+(39*3),ST_Y+24,obj_virus){
 if instance_place(ST_X+(39*4),ST_Y+24,obj_virus).sprite_index != spr_panel_indacator{
     Move_To_X = ST_X+(39*3);
     Move_To_Y = ST_Y+24;
     Attack = true;
     Scan = false;
     Animation_Change = true;
     exit;
  }
}
if position_meeting(ST_X+(39*4),ST_Y+48,obj_virus) &amp;&amp; !position_meeting(ST_X+(39*3),ST_Y+48,obj_virus){
 if instance_place(ST_X+(39*4),ST_Y+48,obj_virus).sprite_index != spr_panel_indacator{
     Move_To_X = ST_X+(39*3);
     Move_To_Y = ST_Y+48;
     Attack = true;
     Scan = false;
     Animation_Change = true;
     exit;
  }
}
}

if Scan{
  sprite_index = spr_roll_move2;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>image_round = round(image_index);
//Move To
if Animation_Change{
   image_index = 0;
   image_speed = .15;
   sprite_index = spr_roll_move;
   Animation_Change = false
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/*if sprite_index = spr_roll_attack{
  Return = true;  7, 10, 13
  Attack = false;
}*/

//HitBoxes
if sprite_index = spr_roll_attack{
   if image_round = 7 &amp;&amp; HitBox{
     with(instance_create(x+36,y+29,obj_roll_summon_hitbox)){
       Power = global.Slot_Power[1];
       Travel = false;
     }
     HitBox = false;
   }
   if image_round = 8{
     with(obj_roll_summon_hitbox){
      instance_destroy();
     }
     HitBox = true;
   }
       if image_round = 10 &amp;&amp; HitBox{
     with(instance_create(x+36,y+29,obj_roll_summon_hitbox)){
       Power = global.Slot_Power[1];
       Travel = false;
     }
     HitBox = false;
   }
  if image_round = 11{
     with(obj_roll_summon_hitbox){
      instance_destroy();
     }
     HitBox = true;
   } 
    if image_round = 13 &amp;&amp; HitBox{
     with(instance_create(x+36,y+29,obj_roll_summon_hitbox)){
       Power = global.Slot_Power[1];
       Travel = false;
       Hurt = true;
     }
     HitBox = false;
   }
     if image_round = 14{
     with(obj_roll_summon_hitbox){
      instance_destroy();
     }
   } 
}



if sprite_index = spr_roll_attack {image_speed = .3}
if sprite_index = spr_roll_attack &amp;&amp; image_index &gt;= 14{
   Return = true
}
if Return &gt; 0{
    Return += 1;
    if Return &gt;= 10{
      image_index = 0;
      image_speed = .15
      sprite_index = spr_roll_move2;
      Return = 0;
    }
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="7">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if sprite_index = spr_roll_fade_in{
  image_speed = 0;
  image_index = 7;
}

if sprite_index = spr_roll_move{
  if Attack &amp;&amp; !Return{
     instance_create(x,y,obj_roll_sparkle);
     instance_create(x+5,y,obj_roll_sparkle);
     instance_create(x+2.5,y-5,obj_roll_sparkle);
     x = Move_To_X-1;
     y = Move_To_Y-31;
     image_index = 0;
     sprite_index = spr_roll_attack;
  } 
}

if sprite_index = spr_roll_move2{
     instance_create(x,y,obj_roll_sparkle);
     instance_create(x+5,y,obj_roll_sparkle);
     instance_create(x+2.5,y-5,obj_roll_sparkle);
     /*global.Slot_Name[1] = "";
     global.Slot_Code[1] = -1;
     global.Slot_Power[1] = -1;
     global.Slot_Element[1] = -1;
     global.Slot_Icon[1] = -1;*/
     //with(obj_field) {Fade = false}
     with(obj_megaman) {/*State = S_Normal;*/ image_alpha = 1; image_index = 0; image_speed = 0}
     //with(obj_virus) {State = Normal;}
     with(instance_create(obj_megaman.x+2,-50,obj_big_heart)){
       Heal = other.Heal;
       image_index = 1;
     }
     instance_destroy();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
