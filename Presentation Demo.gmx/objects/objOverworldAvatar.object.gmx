<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>-1</solid>
  <visible>-1</visible>
  <depth>-9999</depth>
  <persistent>0</persistent>
  <parentName>objPlayerParent</parentName>
  <maskName>Hitbox</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>pause = 0;
//=====&gt;&gt; Camera Creation    &lt;&lt;================
    camera = instance_create(x,y,objCamera);
    
walking = 0;
voice = "";
text_string = "";
walkwait = 0;
networld = 0;
set_sprite = true;
Move = true;
Cutscene = 0;
//Timeline = noone;

//Virus Encounter Step set-up
randomize();
Virus_Timer = 0;
VE_Step = choose(35,30,30,20,20,25,10,30,30,20,40,40,50);



</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Room Change &lt;======= Spooky's Code
if global.WarpX &gt; 0 &amp;&amp; global.WarpY &gt; 0{
     x = global.WarpX
     y = global.WarpY
     global.WarpX = -1;
     global.WarpY = -1;
} 
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///EveryChip Code
if CTO[0] = noone{
repeat(1){
   add_chip_to_pack(obj_cannon_a);
   add_chip_to_pack(obj_cannon_b);
   /*add_chip_to_pack(obj_cannon_c);*/
   add_chip_to_pack(obj_hicannon_h);
   add_chip_to_pack(obj_mcannon_q);
   add_chip_to_pack(obj_airshot_star); 
   add_chip_to_pack(obj_sword_s);
   add_chip_to_pack(obj_widesword_s);
   add_chip_to_pack(obj_longsword_s);
   add_chip_to_pack(obj_longsword_l);
   add_chip_to_pack(obj_minibomb_a);
   add_chip_to_pack(obj_minibomb_b);

   /*add_chip_to_pack(obj_areagrab_s);
   add_chip_to_pack(obj_areagrab_star);
   add_chip_to_pack(obj_areagrab_l);*/
   add_chip_to_pack(obj_hp10_a);
   add_chip_to_pack(obj_hp10_l);
   add_chip_to_pack(obj_hp10_star); 
   add_chip_to_pack(obj_roll_r);
   add_chip_to_pack(obj_gutsman_g);
   add_chip_to_pack(obj_blastshot_c);
   add_chip_to_pack(obj_blastshot_x);
   add_chip_to_pack(obj_vulcan_n);
   add_chip_to_pack(obj_vulcan2_n);
   
   add_chip_to_pack(obj_vulcan3_n);
   add_chip_to_pack(obj_busterup_star);
   add_chip_to_pack(obj_reprogram_n);
   add_chip_to_pack(obj_shotgun_k);
   add_chip_to_pack(obj_vgun_j);
   add_chip_to_pack(obj_linegun_u); 
   add_chip_to_pack(obj_spreader_r);
   add_chip_to_pack(obj_attack10_star);
   add_chip_to_pack(obj_wonderwand_m);
   add_chip_to_pack(obj_timemachine_star);
   add_chip_to_pack(obj_stonebody_k);
   add_chip_to_pack(obj_airsword_star); 
   
   add_chip_to_pack(obj_firesword_w);
   add_chip_to_pack(obj_aquasword_w);
   add_chip_to_pack(obj_elecsword_w);
   add_chip_to_pack(obj_bamboosword_w);
   add_chip_to_pack(obj_swordmode_star);
   add_chip_to_pack(obj_stepsword_star); 
   add_chip_to_pack(obj_stepcross_star);
   add_chip_to_pack(obj_invis_star);
   add_chip_to_pack(obj_yoyo_e);
   add_chip_to_pack(obj_gutpunch_g);
   add_chip_to_pack(obj_crashman_c);
   add_chip_to_pack(obj_hp30_star); 
   
   add_chip_to_pack(obj_hp50_j);
   add_chip_to_pack(obj_folderback_z);
   add_chip_to_pack(obj_barrier10_r);
   /*add_chip_to_pack(obj_bamboosword_w);
   add_chip_to_pack(obj_swordmode_star);
   add_chip_to_pack(obj_stepsword_star); 
   add_chip_to_pack(obj_stepcross_star);
   add_chip_to_pack(obj_invis_star);
   add_chip_to_pack(obj_yoyo_e);
   add_chip_to_pack(obj_gutpunch_g);
   add_chip_to_pack(obj_crashman_c);
   add_chip_to_pack(obj_hp30_star); */                   
}

repeat(1){
   add_chip_to_pack(obj_cannon_a);
   add_chip_to_pack(obj_cannon_b);
   /*add_chip_to_pack(obj_cannon_c);*/
   add_chip_to_pack(obj_hicannon_h);
   add_chip_to_pack(obj_mcannon_q);
   add_chip_to_pack(obj_airshot_star); 
   add_chip_to_pack(obj_sword_s);
   add_chip_to_pack(obj_widesword_s);
   add_chip_to_pack(obj_longsword_s);
   add_chip_to_pack(obj_longsword_l);
   add_chip_to_pack(obj_minibomb_a);
   add_chip_to_pack(obj_minibomb_b);

   /*add_chip_to_pack(obj_areagrab_s);
   add_chip_to_pack(obj_areagrab_star);
   add_chip_to_pack(obj_areagrab_l);*/
   add_chip_to_pack(obj_hp10_a);
   add_chip_to_pack(obj_hp10_l);
   add_chip_to_pack(obj_hp10_star); 
   /*add_chip_to_pack(obj_roll_r);
   add_chip_to_pack(obj_gutsman_g);
   add_chip_to_pack(obj_blastshot_c);
   add_chip_to_pack(obj_blastshot_x);*/
   add_chip_to_pack(obj_vulcan_n);
   add_chip_to_pack(obj_vulcan2_n);
   
   add_chip_to_pack(obj_vulcan3_n);
   add_chip_to_pack(obj_busterup_star);
   add_chip_to_pack(obj_reprogram_n);
   add_chip_to_pack(obj_shotgun_k);
   add_chip_to_pack(obj_vgun_j);
   add_chip_to_pack(obj_linegun_u); 
   add_chip_to_pack(obj_spreader_r);
   add_chip_to_pack(obj_attack10_star);
   /*add_chip_to_pack(obj_wonderwand_m);
   add_chip_to_pack(obj_timemachine_star);*/
   add_chip_to_pack(obj_stonebody_k);
   add_chip_to_pack(obj_airsword_star); 
   
   add_chip_to_pack(obj_firesword_w);
   add_chip_to_pack(obj_aquasword_w);
   add_chip_to_pack(obj_elecsword_w);
   add_chip_to_pack(obj_bamboosword_w);
   /*add_chip_to_pack(obj_swordmode_star);
   add_chip_to_pack(obj_stepsword_star); 
   add_chip_to_pack(obj_stepcross_star);*/
   add_chip_to_pack(obj_invis_star);
   add_chip_to_pack(obj_yoyo_e);
   add_chip_to_pack(obj_gutpunch_g);
   /*add_chip_to_pack(obj_crashman_c);*/
   add_chip_to_pack(obj_hp30_star); 
   
   add_chip_to_pack(obj_hp50_j);
   /*add_chip_to_pack(obj_folderback_z);*/
   add_chip_to_pack(obj_barrier10_r);
   /*add_chip_to_pack(obj_bamboosword_w);
   add_chip_to_pack(obj_swordmode_star);
   add_chip_to_pack(obj_stepsword_star); 
   add_chip_to_pack(obj_stepcross_star);
   add_chip_to_pack(obj_invis_star);
   add_chip_to_pack(obj_yoyo_e);
   add_chip_to_pack(obj_gutpunch_g);
   add_chip_to_pack(obj_crashman_c);
   add_chip_to_pack(obj_hp30_star); */ 
   }

}


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if Cutscene = 1{
    Alpha += .025;
    if Alpha &gt;= 1{
        Cutscene = -1;
        timeline_index = Timeline;
        timeline_position = 0;
        timeline_running = true;
    }
}
if Cutscene = -1 {Alpha -= .05;}

if set_sprite{
    if global.Player_Type = "MegaMan"{
        sprite_index = sprite23;
        set_sprite = false;
        exit;
    }

    if global.Player_Type = "Lan"{
        sprite_index = lan_still_upright;
        set_sprite = false;
        exit;
    }
}
TESTX = view_xview[0];
TESTY = view_yview[0];

if (pause == 1){
  {
  y = floor(y);
  if global.Player_Type = "MegaMan" /*networld == 1*/{
    if (sprite_index=Overworld_MoveLeft) sprite_index=sprite26;
    if (sprite_index=Overworld_MoveRight) sprite_index=sprite25;
    if (sprite_index=Overworld_MoveUp) sprite_index=Overworld_Stand;
    if (sprite_index=Overworld_MoveDown) sprite_index=sprite29;
    if (sprite_index=Overworld_MoveLeftUp) sprite_index=sprite24;
    if (sprite_index=Overworld_MoveLeftDown) sprite_index=sprite28;
    if (sprite_index=Overworld_MoveRightUp) sprite_index=sprite23;
    if (sprite_index=Overworld_MoveRightDown) sprite_index=sprite27;
  }
  
  if global.Player_Type = "Lan" /*networld == 0*/{
    if sprite_index=mov_lan_upleft{sprite_index=lan_still_upleft}
    if sprite_index=mov_lan_upright{sprite_index=lan_still_upright}
    if sprite_index=mov_lan_downright{sprite_index=lan_still_downright}
    if sprite_index=mov_lan_downleft{sprite_index=lan_still_downleft}
    if sprite_index=mov_lan_left{sprite_index=lan_still_left}
    if sprite_index=mov_lan_right{sprite_index=lan_still_right}
    if sprite_index=mov_lan_up{sprite_index=lan_still_up}
    if sprite_index=mov_lan_down{sprite_index=lan_still_down}
  }
  }
  //Above Checks if arrow Keys have been released and sets still sprite accordingly.
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>612</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>-1</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_if_variable</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>0</kind>
            <string>pause</string>
          </argument>
          <argument>
            <kind>0</kind>
            <string>0</string>
          </argument>
          <argument>
            <kind>4</kind>
            <string>0</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>422</id>
        <kind>1</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Movement + Sprites</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var ukey = (keyboard_check(vk_up));
var dkey = (keyboard_check(vk_down));
var lkey = (keyboard_check(vk_left));
var rkey = (keyboard_check(vk_right));


if (!rkey &amp;&amp; !dkey &amp;&amp; !lkey &amp;&amp; !ukey) &amp;&amp; Move{
  //Above Checks if arrow Keys have been released and sets still sprite accordingly.


depth = -y;

    if networld == 0{
    if sprite_index=mov_lan_upleft{sprite_index=lan_still_upleft}
    if sprite_index=mov_lan_upright{sprite_index=lan_still_upright}
    if sprite_index=mov_lan_downright{sprite_index=lan_still_downright}
    if sprite_index=mov_lan_downleft{sprite_index=lan_still_downleft}
    if sprite_index=mov_lan_left{sprite_index=lan_still_left}
    if sprite_index=mov_lan_right{sprite_index=lan_still_right}
    if sprite_index=mov_lan_up{sprite_index=lan_still_up}
    if sprite_index=mov_lan_down{sprite_index=lan_still_down}
    }

if networld == 1{
    if sprite_index=Overworld_MoveLeftUp{sprite_index=sprite24}
    if sprite_index=Overworld_MoveRightUp{sprite_index=sprite23}
    if sprite_index=Overworld_MoveLeftDown{sprite_index=sprite28}
    if sprite_index=Overworld_MoveRightDown{sprite_index=sprite27}
    if sprite_index=Overworld_MoveLeft{sprite_index=sprite26}
    if sprite_index=Overworld_MoveRight{sprite_index=sprite25}
    if sprite_index=Overworld_MoveUp{sprite_index=Overworld_Stand}
    if sprite_index=Overworld_MoveDown{sprite_index=sprite29}
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if Move{

var ukey = (keyboard_check(vk_up))
var dkey = (keyboard_check(vk_down))
var lkey = (keyboard_check(vk_left))
var rkey = (keyboard_check(vk_right))

if (rkey || lkey || ukey || dkey){
walking = 1
}

if (!rkey &amp;&amp; !lkey &amp;&amp; !ukey &amp;&amp; !dkey){
walking = 0
}

depth = -y;
{
    if networld == 0{
    if (lkey&amp;&amp;ukey&amp;&amp;!rkey&amp;&amp;!dkey)  sprite_index=mov_lan_upleft;
    if (rkey&amp;&amp;ukey&amp;&amp;!lkey&amp;&amp;!dkey)  sprite_index=mov_lan_upright;
    if (lkey&amp;&amp;dkey&amp;&amp;!ukey&amp;&amp;!rkey)  sprite_index=mov_lan_downleft;
    if (rkey&amp;&amp;dkey&amp;&amp;!ukey&amp;&amp;!lkey)  sprite_index=mov_lan_downright;
    if (!rkey&amp;&amp;!ukey&amp;&amp;lkey&amp;&amp;!dkey) sprite_index=mov_lan_left;
    if (rkey&amp;&amp;!ukey&amp;&amp;!lkey&amp;&amp;!dkey)  sprite_index=mov_lan_right;
    if (!rkey&amp;&amp;ukey&amp;&amp;!lkey&amp;&amp;!dkey)  sprite_index=mov_lan_up;
    if (!rkey&amp;&amp;!ukey&amp;&amp;!lkey&amp;&amp;dkey)  sprite_index=mov_lan_down;
    }

if networld == 1{
    if (lkey&amp;&amp;ukey&amp;&amp;!rkey&amp;&amp;!dkey)  sprite_index=Overworld_MoveLeftUp;
    if (rkey&amp;&amp;ukey&amp;&amp;!lkey&amp;&amp;!dkey)  sprite_index=Overworld_MoveRightUp;
    if (lkey&amp;&amp;dkey&amp;&amp;!ukey&amp;&amp;!rkey)  sprite_index=Overworld_MoveLeftDown;
    if (rkey&amp;&amp;dkey&amp;&amp;!ukey&amp;&amp;!lkey)  sprite_index=Overworld_MoveRightDown;
    if (!rkey&amp;&amp;!ukey&amp;&amp;lkey&amp;&amp;!dkey) sprite_index=Overworld_MoveLeft;
    if (rkey&amp;&amp;!ukey&amp;&amp;!lkey&amp;&amp;!dkey)  sprite_index=Overworld_MoveRight;
    if (!rkey&amp;&amp;ukey&amp;&amp;!lkey&amp;&amp;!dkey)  sprite_index=Overworld_MoveUp;
    if (!rkey&amp;&amp;!ukey&amp;&amp;!lkey&amp;&amp;dkey)  sprite_index=Overworld_MoveDown;
    }

}

if walking == 0{
y = floor(y);
}

deepness = depth

}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Above Checks whether the position is free,
//If it is move into that position.

if Move{

///movement
if (keyboard_check(ord("X"))){
    spd = 2;
    image_speed=.25
}

if (!keyboard_check(ord("X"))){
    spd = 1;
    image_speed=.15
}

if (lkey&amp;&amp;ukey&amp;&amp;!rkey&amp;&amp;!dkey &amp;&amp; place_free (x-2*spd, y))  x-=1*spd;
if (rkey&amp;&amp;ukey&amp;&amp;!lkey&amp;&amp;!dkey &amp;&amp; place_free (x+2*spd, y))  x+=1*spd;
if (lkey&amp;&amp;dkey&amp;&amp;!ukey&amp;&amp;!rkey &amp;&amp; place_free (x-2*spd, y))  x-=1*spd;
if (rkey&amp;&amp;dkey&amp;&amp;!ukey&amp;&amp;!lkey &amp;&amp; place_free (x+2*spd, y))  x+=1*spd;


if (lkey&amp;&amp;ukey&amp;&amp;!rkey&amp;&amp;!dkey &amp;&amp; place_free (x, y-2*spd))  y-=.5*spd;
if (rkey&amp;&amp;ukey&amp;&amp;!lkey&amp;&amp;!dkey &amp;&amp; place_free (x, y-2*spd))  y-=.5*spd;
if (lkey&amp;&amp;dkey&amp;&amp;!ukey&amp;&amp;!rkey &amp;&amp; place_free (x, y+2*spd))  y+=.5*spd;
if (rkey&amp;&amp;dkey&amp;&amp;!ukey&amp;&amp;!lkey &amp;&amp; place_free (x, y+2*spd))  y+=.5*spd;

if (!rkey&amp;&amp;!ukey&amp;&amp;lkey&amp;&amp;!dkey &amp;&amp; place_free (x-2*spd, y))  x-=1*spd;
if (rkey&amp;&amp;!ukey&amp;&amp;!lkey&amp;&amp;!dkey &amp;&amp; place_free (x+2*spd, y))  x+=1*spd;
if (!rkey&amp;&amp;ukey&amp;&amp;!lkey&amp;&amp;!dkey &amp;&amp; place_free (x, y-2*spd))  y-=1*spd;
if (!rkey&amp;&amp;!ukey&amp;&amp;!lkey&amp;&amp;dkey &amp;&amp; place_free (x, y+2*spd))  y+=1*spd;

//slant move test
if (!rkey&amp;&amp;!ukey&amp;&amp;lkey&amp;&amp;!dkey &amp;&amp; !place_free (x-2*spd, y-2*spd)) y+=.5*spd;
if (!rkey&amp;&amp;!ukey&amp;&amp;lkey&amp;&amp;!dkey &amp;&amp; !place_free (x-2*spd, y+2*spd)) y-=.5*spd;
if (rkey&amp;&amp;!ukey&amp;&amp;!lkey&amp;&amp;!dkey &amp;&amp; !place_free (x+2*spd, y-2*spd)) y+=.5*spd;
if (rkey&amp;&amp;!ukey&amp;&amp;!lkey&amp;&amp;!dkey &amp;&amp; !place_free (x+2*spd, y+2*spd)) y-=.5*spd;
if (!rkey&amp;&amp;ukey&amp;&amp;!lkey&amp;&amp;!dkey &amp;&amp; !place_free (x-2*spd, y-2*spd)) x+=1*spd;
if (!rkey&amp;&amp;ukey&amp;&amp;!lkey&amp;&amp;!dkey &amp;&amp; !place_free (x+2*spd, y-2*spd)) x-=1*spd;
if (!rkey&amp;&amp;!ukey&amp;&amp;!lkey&amp;&amp;dkey &amp;&amp; !place_free (x-2*spd, y+2*spd)) x+=1*spd;
if (!rkey&amp;&amp;!ukey&amp;&amp;!lkey&amp;&amp;dkey &amp;&amp; !place_free (x+2*spd, y+2*spd)) x-=1*spd;

if (!ukey&amp;&amp;dkey &amp;&amp; place_meeting(x, y, obj_slope) &amp;&amp; place_free (x, y+2*spd)) y+=.5*spd;
if (ukey&amp;&amp;!dkey &amp;&amp; place_meeting(x, y, obj_slope) &amp;&amp; place_free (x, y-2*spd)) y-=.5*spd;
//if (!ukey&amp;&amp;dkey &amp;&amp; place_meeting(x, y, obj_slope)) y+=.5*spd;
//if (ukey&amp;&amp;!dkey &amp;&amp; place_meeting(x, y, obj_slope)) y-=.5*spd;

}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Text Box stuff</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var akey = keyboard_check_pressed(ord("Z"))

if (akey &amp;&amp; (place_meeting(x+2, y, text_parent) || place_meeting(x-2, y, text_parent) || place_meeting(x, y-2, text_parent) || place_meeting(x, y+2, text_parent)))
{
    var textthing = instance_create(x, y, obj_text);
    textthing.display = text_string
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>room trans</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Door Portal
if (place_meeting(x, y, door)){
    global.WarpX = instance_place(x, y, door).WarpX;
    global.WarpY = instance_place(x, y, door).WarpY;
    room = instance_place(x, y, door).rmnext;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Jack In stuff
var lbum_key = keyboard_check_pressed(ord("A"))
var rbum_key = keyboard_check_pressed(ord("S"))

if ((rbum_key == true) &amp;&amp; (networld == 0)){
    if (place_meeting(x, y, door_jackin)){
        HoldX = x;
        HoldY = y;
        HoldR = room;
        global.WarpX = instance_place(x, y, door_jackin).WarpX;
        global.WarpY = instance_place(x, y, door_jackin).WarpY;
        room = instance_place(x, y, door_jackin).rmnext;
}
    else
        if ((rbum_key == true) &amp;&amp; (networld == 0))
            if (!instance_place(x, y, door_jackin)){
                audio_play_sound(sou_chip_cancel, 0, 0)
            }
}

if((rbum_key == true) &amp;&amp; (networld == 1)){
    global.WarpX = global.HoldX;
    global.WarpY = global.HoldY;
    room = HoldR;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Virus Encounter</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Virus Step System
Virus_Room = choose(VE1,VE2,VE3,VE4,VE5,VE6,VE7,VE8,VE9,VE10);
if global.Virus = true{    
    if ukey || dkey || lkey || rkey{
        if x != xprevious || y != yprevious{
            Virus_Timer += 1
            if Virus_Timer = room_speed/5{
                Virus_Timer = 0;
                VE_Step -= 1;
                if VE_Step = 0{
                    if !instance_exists(objBlackFadeIn){
                        pause = 1;
                        global.XStart = objPlayerParent.x;
                        global.YStart = objPlayerParent.y;
                        if !instance_exists(objBlackFadeOut) {Fade = instance_create(x,y,objBlackFadeOut);}
                        Fade.RoomNext = Virus_Room;
                        global.EnemeyNumber = floor(random_range(1,5));
                        global.RoomLast = room;
                    }
                }   
            }
        }
    }
}    
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>424</id>
        <kind>2</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string></string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_self();

if Cutscene != 0{

draw_set_alpha(Alpha);
draw_set_colour(c_black);
draw_rectangle(view_xview, view_yview, view_xview+view_wview, view_yview+view_hview, 0);
draw_set_colour(c_white);
draw_set_alpha(1);

}


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="85">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>global.Mom_event = 2;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="13">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (pause == 0) &amp;&amp; Move{
    pause = 1;
    if !instance_exists(PETMenu) {instance_create(x, y, PETMenu); exit;}
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
