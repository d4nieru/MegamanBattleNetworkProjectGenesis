<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprTestMan</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-1</depth>
  <persistent>0</persistent>
  <parentName>objPlayerParent</parentName>
  <maskName>sprPlayerMask</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Variables</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//=====&gt;&gt; Player Position    &lt;&lt;================
    PanelX = 2;
    PanelY = 2;

//=====&gt;&gt; Camera Creation    &lt;&lt;================
    camera = instance_create(x,y,objCamera);

//=====&gt;&gt; Action Tokens      &lt;&lt;================
    Action                 =   0;

    ActionHurt             =  -1;
    ActionIdle             =   0;             // used for making easier the comprehension of the engine
    ActionMove             =   1;
        MovePanel          =   0;             // used for ActionMove
    ActionShoot            =   2;
    
//=====&gt;&gt; Animation Tokens   &lt;&lt;================
    Idle                   =   0;
    Move                   =   1;
    Shoot                  =   2;
    
//=====&gt;&gt; Input Variables    &lt;&lt;================
    Left = keyboard_check(vk_left);
    Right = keyboard_check(vk_right);
    Up = keyboard_check(vk_up);
    Down = keyboard_check(vk_down);
    X = keyboard_check(ord('X'));

    LeftPressed = keyboard_check_pressed(vk_left);
    RightPressed = keyboard_check_pressed(vk_right);
    UpPressed = keyboard_check_pressed(vk_up);
    DownPressed = keyboard_check_pressed(vk_down);
    XPressed = keyboard_check_pressed(ord('X'));

//=====&gt;&gt; Form Manager       &lt;&lt;================
    Base = sprTestMan;
    
    charge = 0;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Animations</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// --- Allocate default animation variables --------------------------------------
    animation           = Idle; // Character's actual animation. This is the one
                                  // you have to change. 
                                  
    animation_previous  = "";     // This one is used to check if the animation
                                  // has changed (if the previous anim isn't the same as
                                  // the new.)

    animation_frame     = 0;      // Actual frame on the animation
    animation_start     = 0;      // This is the start frame of the actual animation
    animation_end       = 0;      // This is the end frame of the actual animation
    animation_loop      = 0;      // This is the animation's looping point.
    animation_angle     = 0;      // This is used as a special rotation for the player.
    animation_direction = 1;      // This is the player's direction that it's facing.
    animation_speed     = 0;      // This is the speed of the actual animation
    animation_repeat    = 0;      // Set this to true if you want the animation to repeat
    animation_linked_to = "nothing" // This is the name of the animation wich actual is linked to
    
    animation_flags_changed  = 0;  // These flags are used if you want to track down
    animation_flags_finished = 0;  // the animations. For example if it has changed,
                                  // or if it has finished.
                                  
    //Switcher Variables
    CurrentAnimationStart = 0;
    CurrentAnimationEnd = 0;
    CurrentAnimationLoop = 0;
    CurrentAnimationSpeed = 0;
    CurrentAnimationRepeat = 0;
    CurrentAnimationLink = "nothing";
    
// --- Allocate animations -------------------------------------------------------
    
    // Idle animation
    animation_idle_start  = 0;
    animation_idle_end    = 0;
    animation_idle_loop   = 0;
    animation_idle_speed  = 0;
    animation_idle_repeat = true;
    animation_idle_linked_to = "(none)";
        
    // Move animation
    animation_move_start  = 1;
    animation_move_end    = 6;
    animation_move_loop   = 1;
    animation_move_speed  = .5;
    animation_move_repeat = false;
    animation_move_linked_to = "(none)";
    
    // Shoot animation
    animation_shoot_start  = 7;
    animation_shoot_end    = 11;
    animation_shoot_loop   = 7;
    animation_shoot_speed  = .5;
    animation_shoot_repeat = false;
    animation_shoot_linked_to = "(none)";

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Keys</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>    Left = keyboard_check(vk_left);
    Right = keyboard_check(vk_right);
    Up = keyboard_check(vk_up);
    Down = keyboard_check(vk_down);
    X = keyboard_check(ord('X'));

    LeftPressed = keyboard_check_pressed(vk_left);
    RightPressed = keyboard_check_pressed(vk_right);
    UpPressed = keyboard_check_pressed(vk_up);
    DownPressed = keyboard_check_pressed(vk_down);
    XPressed = keyboard_check_pressed(ord('X'));
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Animations System</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
    /* This is the actual core of the animation system. Here we check if the
    ** animation has changed, and if then, put the new animation.
    **
    ** Thanks to the nature of the actual system this part is rather
    ** simple, thanks to how powerful is Gamemaker :D
    */
    
    // Set changed flag to false
    animation_flags_changed = false;
    
    // First check if the actual animation has changed
    if ( animation != animation_previous )
    {
        // If the animation was changed, set previous to the new one
        animation_previous = animation; 
        
        // Now is when we get the data of the new animation. Since the
        // animation is handled using an string, we need to get
        // the animation local variable acording to that string.
        //
        // For this, we use the function variable_local_get(), wich
        // returns the value of the local variable string passed.
        
        animation_start     = CurrentAnimationStart;
        animation_end       = CurrentAnimationEnd;
        animation_loop      = CurrentAnimationLoop;
        animation_speed     = CurrentAnimationSpeed;
        animation_repeat    = CurrentAnimationRepeat;
        animation_linked_to = CurrentAnimationLink;

        
        // Easy huh? We only had to concatenate some strings to get the final names.
        // Now that we have all the basic information, set the actual frame to
        // the start
        animation_frame = animation_start;
        
        // Set flags
        animation_flags_changed  = true;    // Set the changed flag to true
        animation_flags_finished = false;   // Set to false the finished flag
    }
    
    // And now the rest is easy. Add the speed to the frame and then
    // check if the animation reached to the end.
    if ( animation_flags_finished == false )
    {
        animation_frame += animation_speed;
        if ( floor(animation_frame) &gt; animation_end )
        {
            // Do we have to repeat?
            if ( animation_repeat == true )
            {
                // Loop back to the loop frame
                animation_frame = animation_loop;
            } else {
                animation_frame          = animation_end;               
                if ( animation_linked_to != "(none)" ) animation = animation_linked_to;
                else 
                    // Set to true the animation finished flag
                    animation_flags_finished = true;
            }
        } 
    }
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Camera</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
camera.x = floor(x);
camera.y = floor(y);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Animations</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if ( Action == ActionIdle &amp;&amp; animation != Idle )
            animation = Idle;
            
if ( Action == ActionMove &amp;&amp; animation != Move )
            animation = Move;
            
if ( Action == ActionShoot &amp;&amp; animation != Shoot )
            animation = Shoot;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Animation Handler</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>switch(animation)
{
    case Idle:
    
        CurrentAnimationStart = animation_idle_start;
        CurrentAnimationEnd = animation_idle_end;
        CurrentAnimationLoop = animation_idle_loop;
        CurrentAnimationSpeed = animation_idle_speed;
        CurrentAnimationRepeat = animation_idle_repeat;
        CurrentAnimationLink = animation_idle_linked_to;
    
        break;
    
    case Move:
    
        CurrentAnimationStart = animation_move_start;
        CurrentAnimationEnd = animation_move_end;
        CurrentAnimationLoop = animation_move_loop;
        CurrentAnimationSpeed = animation_move_speed;
        CurrentAnimationRepeat = animation_move_repeat;
        CurrentAnimationLink = animation_move_linked_to;
    
        break;
        
    case Shoot:
    
        CurrentAnimationStart = animation_shoot_start;
        CurrentAnimationEnd = animation_shoot_end;
        CurrentAnimationLoop = animation_shoot_loop;
        CurrentAnimationSpeed = animation_shoot_speed;
        CurrentAnimationRepeat = animation_shoot_repeat;
        CurrentAnimationLink = animation_shoot_linked_to;
    
        break;
    
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Depth Handler</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>depth = -y;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Basic Movement</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Controls Depth
depth = -PanelY;

//==Movement==//
if Left &amp;&amp; Action == ActionIdle
{
    if (place_meeting(x-40, y, objLand))
    {
        Panel = instance_place(x-40, y, objLand);
        if (Panel.Owner == Player)
        {        
            if PanelX &gt; 1 then PanelX--;
            MovePanel = Panel;
            Action = ActionMove;
        }
    }
}

if Right &amp;&amp; Action == ActionIdle
{
    //Insert Animation Requirements
    if (place_meeting(x+40, y, objLand))
    {
        Panel = instance_place(x+40, y, objLand);
        if (Panel.Owner == Player)
        {
            if PanelX &lt; 6 then PanelX++;
            MovePanel = Panel;
            Action = ActionMove;
        }
    }
}

if Up &amp;&amp; Action == ActionIdle
{
    //Insert Animation Requirements
    if (place_meeting(x, y-25, objLand))
    {
        Panel = instance_place(x, y-25, objLand);
        if (Panel.Owner == Player)
        {
            if PanelY &gt; 1 then PanelY--;
            MovePanel = Panel;
            Action = ActionMove;
        }
    }
}

if Down &amp;&amp; Action == ActionIdle
{
    //Insert Animation Requirements
    if (place_meeting(x, y+25, objLand))
    {
        Panel = instance_place(x, y+25, objLand);
        if (Panel.Owner == Player)
        {
            if PanelY &lt; 3 then PanelY++;
            MovePanel = Panel;
            Action = ActionMove;
        }
    }
}

if ( animation == Move )
{
    if ( floor(animation_frame) == 4)
    {
        x = MovePanel.x+MovePanel.sprite_width/2;
        y = MovePanel.y+MovePanel.sprite_height/2+5;
    }
            
    if ( floor(animation_frame) == animation_move_end)
    {
        Action = ActionIdle;
    }
}


</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Buster Shot</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var Xdown = keyboard_check(ord("X"))

if (Xdown &amp;&amp; charge &lt;=179 ){
            charge+=1;
}

if (!Xdown &amp;&amp; charge &gt;= 180){
    Action =  ActionShoot;
    if instance_exists(objEnemeyParent)
    {    
        var Numb = instance_number(objEnemeyParent);
        var Counted = 1;
        var Start = instance_nth_nearest(x,y,objEnemeyParent,Counted);
        var Current = Start;
        
        while (Current.PanelY != PanelY) &amp;&amp; Counted &lt;= Numb
        {
            Counted ++;
            Current = instance_nth_nearest(x,y,objEnemeyParent,Counted);
        }  
        
        if (Counted &lt;= Numb &amp;&amp; Current.PanelY == PanelY)
        {
            Current.HP-=10;
            Current.image_index++;
        }
    }
}

if (!Xdown){
    charge = 0;
}

if ( animation == Shoot )
{
    if ( floor(animation_frame) == 9)
    {
        
    }
    
    if ( floor(animation_frame) == animation_shoot_end)
    {
        Action = ActionIdle;
    }
}

if (XPressed &amp;&amp; Action == ActionIdle)
{
    Action =  ActionShoot;
    if instance_exists(objEnemeyParent)
    {    
        var Numb = instance_number(objEnemeyParent);
        var Counted = 1;
        var Start = instance_nth_nearest(x,y,objEnemeyParent,Counted);
        var Current = Start;
        
        while (Current.PanelY != PanelY) &amp;&amp; Counted &lt;= Numb
        {
            Counted ++;
            Current = instance_nth_nearest(x,y,objEnemeyParent,Counted);
        }  
        
        if (Counted &lt;= Numb &amp;&amp; Current.PanelY == PanelY)
        {
            Current.HP--;
            Current.image_index++;
        }
    }
}

if ( animation == Shoot )
{
    if ( floor(animation_frame) == 9)
    {
        
    }
    
    if ( floor(animation_frame) == animation_shoot_end)
    {
        Action = ActionIdle;
    }
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_sprite_ext(Base,floor(animation_frame), floor(x), floor(y),1,1,0,c_white,1);
draw_text(10,10,"Panel X: "+string(PanelX));
draw_text(10,40,"Panel Y: "+string(PanelY));
draw_text(124,10,"Action: "+string(Action));
draw_text(124,40,"Charge: "+string(charge));

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="85">
      <action>
        <libid>1</libid>
        <id>203</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_kill_object</functionname>
        <codestring></codestring>
        <whoName>objEnemeyParent</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
    </event>
    <event eventtype="9" enumb="83">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>for (i = 5; i &gt; -1; i--)
{
    if objController.BattleMatrix[i,0].Owner == Player
    {
        objController.BattleMatrix[i,0].Owner = Enemey;
        objController.BattleMatrix[i,1].Owner = Enemey;
        objController.BattleMatrix[i,2].Owner = Enemey;
        exit;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="82">
      <action>
        <libid>1</libid>
        <id>223</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_current_room</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
    </event>
    <event eventtype="9" enumb="70">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if Base == sprTestMan
{
    Base = sprZeroSoul;
    exit;
}
    
if Base == sprZeroSoul
{
    Base = sprTestMan
    exit;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="68">
      <action>
        <libid>1</libid>
        <id>203</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_kill_object</functionname>
        <codestring></codestring>
        <whoName>objEnemeyParent</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
    </event>
    <event eventtype="9" enumb="65">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>for (i = 0; i &lt; 6; i++)
{
    if objController.BattleMatrix[i,0].Owner == Enemey
    {
        objController.BattleMatrix[i,0].Owner = Player;
        objController.BattleMatrix[i,1].Owner = Player;
        objController.BattleMatrix[i,2].Owner = Player;
        exit;
    }
    
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>24,35</point>
    <point>24,24</point>
  </PhysicsShapePoints>
</object>
