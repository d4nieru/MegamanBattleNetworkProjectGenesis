<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_zero_base</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>obj_virus</parentName>
  <maskName>spr_zero_base</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>VChild = noone;
Mask = spr_zero_base;
Hitbox_Touch = false;
HitBox = true;
Damage = 0;
Ex_Count = 0;
Ex_true = true;
Semi_Hurt = false;
Hurt = false;
Hurt_Timer = 0;
Damage_Flash = false;
DF_Direction = 0;
AT = 0;
Shuffle = true;
SaveX = 0;
SaveY = 0;

//Fade In Start
image_speed = 0;
image_index = 0;

//Stats
scr_virus_stats("Zero",E_Sword);
MaxHp = 1000;
Hp = MaxHp;
spd = .9;


//Moving Variables
MMT = 32;
Move_Timer = MMT;
Move_Count = 0;
Direction = 0;
NoMove = -1;
Up = 1;
Down = 2;
Left = 3;
Right = 4;
URight = 11;
DRight = 12;
ULeft = 13;
DLeft = 14;
Return = 5;
SwordCombo = 6;
Buster = 7;
SwordHammer = 8;
SwordSwingD = 9;
SwordSwingU = 10;
MultiStep = 15;
SwordSwing = 16;

//Attacking Variables
SwordCombo_A = false;
MultiStep_A = false;
Buster_A = false;
SwordHammer_A = false;
SwordSwing_A = false;


CT = 0;
CD = 0;
Charge = false;

PT_X[0] = -21;
PT_Y[0] = -21;
PT_X[1] = -22;
PT_Y[1] = -22;
PT_X[2] = -23;
PT_Y[2] = -23;

Save_Panel = -4;
TP = -4;
SSC = 0;
Circle_X = 60;
SH_Effect = 0;
SH_Timer = 0;
SH_T = false;

//Power
Power[0] = 20; 
Power[1] = 40; 
Power[2] = 30;
Power[3] = 20;
Power[4] = 40;

//States
State = 0;
Normal = 1;
Paused = 1;
Frozen = 1;
Dead = 5;

//Text
text[0] = true;

//Misc Script
scr_panel_lock("Create");
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>604</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_inherited</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>with(VChild){
 instance_destroy();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Damage
if Hp &lt;= 0 {State = Dead}

if (Damage * -1) &gt;= Hp{
   Hp = 0;
} 
if State != Frozen &amp;&amp; State != Paused {
   if Hp = 0 {State = Dead;}
} 

if Hp &gt; MaxHp {Hp = MaxHp}
if Hp &lt; 0 {Hp = 0}
 
if Damage &gt; 0{
   Hp += 1;
   Damage -= 1;
}
if Damage &lt; 0{
   Hp -= 1;
   Damage += 1;
}


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Animation Variables
if Hp &gt; 0 {State = obj_megaman.State;}
scr_weakness_system();
scr_battle_damage_zero();
if place_meeting(x,y,obj_panel){
  depth = instance_place(x,y,obj_panel).y*-1-1;
}
Base_S = spr_zero_base;
Fade_In = spr_zero_fadein;
SwordCombo_S = spr_zero_sword_combo;
Buster_S = spr_zero_buster;
SwordHammer_S = spr_zero_sword_hammer;
SwordSwingD_S = spr_zero_sword_swingd;
SwordSwingU_S = spr_zero_sword_swingu;
Hurt_S = spr_zero_hurt;
Hurt_Flash_S = spr_zero_hurt_flash;


if State = S_Normal{
//Animation Speeds
if sprite_index = Base_S &amp;&amp; image_index = 0 {image_speed = 0;}
if sprite_index = Base_S &amp;&amp; image_index &gt; 0 {image_speed = spd;}
if sprite_index = SwordCombo_S{
    if image_index = 0 || image_index = 8 || image_index = 14{
        image_speed = 0;
    }
}
if sprite_index = SwordCombo_S &amp;&amp; image_index != 0 &amp;&amp; image_index != 8 &amp;&amp; image_index != 14 {image_speed = .3;}
if sprite_index = Buster_S {image_speed = .3;}
if sprite_index = SwordHammer_S {image_speed = .2;}
if sprite_index = SwordSwingD_S {image_speed = .2;}
if sprite_index = SwordSwingU_S {image_speed = .2;}
if sprite_index = Hurt_S || sprite_index = Hurt_Flash_S {image_speed = 0;}
}

if State != S_Normal{
   if sprite_index != Fade_In {image_speed = 0;}
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Movement
scr_panel_lock("Step");
IP = instance_place(x,y,obj_panel);
image_round = round(image_index);
RM = choose(Up,Down,Left,Right,URight,DRight,ULeft,DLeft) // RM = Random Movement
if Move_Timer &lt; 0 {Move_Timer = 0};

if State = S_Normal{

if sprite_index = Base_S &amp;&amp; image_index = 0 &amp;&amp; image_alpha != 0{
     Move_Timer -= 1;
     if Move_Timer = 0{
         switch(RM){
              case NoMove:
              Move_Count += 1;
              Move_Timer = MMT;
              break;
              
              case Up:
              if place_meeting(x,y-24,obj_panel_blue_mask) &amp;&amp; !place_meeting(x,y-24,obj_object) &amp;&amp; !place_meeting(x,y-24,obj_virus){
                with(instance_create(IP.x,IP.y-24,obj_virus_placeholder)){
                    Owner = other.id;
                    other.VChild = id;
                  }                  
                  Direction = Up;
                  image_index = 0.1;
                  Move_Timer = MMT;
              } else {Move_Timer = 1;}
              break;
              
              case Down:
              if place_meeting(x,y+24,obj_panel_blue_mask) &amp;&amp; !place_meeting(x,y+24,obj_object) &amp;&amp; !place_meeting(x,y+24,obj_virus){
                with(instance_create(IP.x,IP.y+24,obj_virus_placeholder)){
                    Owner = other.id;
                    other.VChild = id;
                  }                   
                  Direction = Down;
                  image_index = 0.1;
                  Move_Timer = MMT;
              } else {Move_Timer = 1;}
              break;  
              
              case Left:
              if place_meeting(x-40,y,obj_panel_blue_mask) &amp;&amp; !place_meeting(x-40,y,obj_object) &amp;&amp; !place_meeting(x-40,y,obj_virus){
                with(instance_create(IP.x-40,IP.y,obj_virus_placeholder)){
                    Owner = other.id;
                    other.VChild = id;
                  }                   
                  Direction = Left;
                  image_index = 0.1;
                  Move_Timer = MMT;
              } else {Move_Timer = 1;}
              break; 
              
              case Right:
              if place_meeting(x+40,y,obj_panel_blue_mask) &amp;&amp; !place_meeting(x+40,y,obj_object) &amp;&amp; !place_meeting(x+40,y,obj_virus){
                with(instance_create(IP.x+40,IP.y,obj_virus_placeholder)){
                    Owner = other.id;
                    other.VChild = id;
                  }                   
                  Direction = Right;
                  image_index = 0.1;
                  Move_Timer = MMT;
              } else {Move_Timer = 1;}
              break; 
              
              case URight:
              if place_meeting(x+40,y-24,obj_panel_blue_mask) &amp;&amp; !place_meeting(x+40,y-24,obj_object) &amp;&amp; !place_meeting(x+40,y-24,obj_virus){
                with(instance_create(IP.x+40,IP.y-24,obj_virus_placeholder)){
                    Owner = other.id;
                    other.VChild = id;
                  }                   
                  Direction = URight;
                  image_index = 0.1;
                  Move_Timer = MMT;
              } else {Move_Timer = 1;}
              break;
              
              case DRight:
              if place_meeting(x+40,y+24,obj_panel_blue_mask) &amp;&amp; !place_meeting(x+40,y+24,obj_object) &amp;&amp; !place_meeting(x+40,y+24,obj_virus){
                with(instance_create(IP.x+40,IP.y+24,obj_virus_placeholder)){
                    Owner = other.id;
                    other.VChild = id;
                  }                   
                  Direction = DRight;
                  image_index = 0.1;
                  Move_Timer = MMT;
              } else {Move_Timer = 1;}
              break; 
              
              case ULeft:
              if place_meeting(x-40,y-24,obj_panel_blue_mask) &amp;&amp; !place_meeting(x-40,y-24,obj_object) &amp;&amp; !place_meeting(x-40,y-24,obj_virus){
                with(instance_create(IP.x-40,IP.y-24,obj_virus_placeholder)){
                    Owner = other.id;
                    other.VChild = id;
                  }                   
                  Direction = ULeft;
                  image_index = 0.1;
                  Move_Timer = MMT;
              } else {Move_Timer = 1;}
              break;
              
              case DLeft:
              if place_meeting(x-40,y+24,obj_panel_blue_mask) &amp;&amp; !place_meeting(x-40,y+24,obj_object) &amp;&amp; !place_meeting(x-40,y+24,obj_virus){
                with(instance_create(IP.x-40,IP.y+24,obj_virus_placeholder)){
                    Owner = other.id;
                    other.VChild = id;
                  }                   
                  Direction = DLeft;
                  image_index = 0.1;
                  Move_Timer = MMT;
              } else {Move_Timer = 1;}
              break;                                                                                             
         }
     }
}

}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Attacking
MM = obj_megaman;
MMP = instance_place(MM.x,MM.y,obj_panel)
MMPY = instance_place(MM.x,MM.y,obj_panel).y

if Shuffle{
   RA1 = choose(MultiStep,SwordCombo)
   /*RA2 = choose(DrillShot,DrillRain)
   RA3 = choose(DrillRain,DrillStab,DrillShot)
   RA4 = choose(DrillShot,DrillStab,DrillRain)
*/
}

if State = S_Normal{

//Attack State
if CT &gt; 0{
  CT += 1;
  if CT = room_speed{
     CT = 0;
     Charge = true;
  }
}
if Charge{
    CD += 1
}
if CD &gt; room_speed/2{
   CD = room_speed/2;
}

if Move_Count = 1 &amp;&amp; sprite_index = Base_S &amp;&amp; image_index = 0 || Move_Count = 6 &amp;&amp; sprite_index = Base_S &amp;&amp; image_index = 0{
   Shuffle = false;
   CT = 1;
   MMT = 5;
   if !instance_exists(obj_zero_charge){
       instance_create(x+1,y-9,obj_zero_charge);
   }
   Move_Count += 1;
}
if CD = room_speed/2 &amp;&amp; sprite_index = Base_S &amp;&amp; image_index = 0{
    Buster_A = true;
}

if Move_Count = 10 &amp;&amp; sprite_index = Base_S &amp;&amp; image_index = 0{
  if RA1 = MultiStep{  
    if place_meeting(MM.x+40,MM.y,obj_panel){
        if !place_meeting(MM.x+40,MM.y,obj_virus) &amp;&amp; !place_meeting(MM.x+40,MM.y,obj_object){
            if place_meeting(MM.x+40,MM.y,obj_panel_red_mask) || place_meeting(MM.x+40,MM.y,obj_panel_blue_mask){
                Save_Panel = instance_place(x,y,obj_panel);
                TP = instance_place(MM.x+40,MM.y,obj_panel);
                with(instance_create(Save_Panel.x,Save_Panel.y,obj_virus_placeholder)){
                    Owner = other.id;
                    other.VChild = id;
                }
                MultiStep_A = true;
                exit;
            }
        }
    }
  }
  
  if RA1 = SwordCombo{
    if place_meeting(MM.x+40,MM.y,obj_panel){
        if !place_meeting(MM.x+40,MM.y,obj_virus) &amp;&amp; !place_meeting(MM.x+40,MM.y,obj_object){
            if place_meeting(MM.x+40,MM.y,obj_panel_red_mask) || place_meeting(MM.x+40,MM.y,obj_panel_blue_mask){
                Save_Panel = instance_place(x,y,obj_panel);
                TP = instance_place(MM.x+40,MM.y,obj_panel);
                with(instance_create(Save_Panel.x,Save_Panel.y,obj_virus_placeholder)){
                    Owner = other.id;
                    other.VChild = id;
                }
                SwordCombo_A = true;
            }
        }
    }   
  }
}

if Move_Count = 14 &amp;&amp; sprite_index = Base_S &amp;&amp; image_index = 0{
    if place_meeting(x,91,obj_panel){
        if !place_meeting(x,91,obj_virus) &amp;&amp; !place_meeting(x,91,obj_object){
            if place_meeting(x,91,obj_panel_blue_mask){
                TP = instance_place(x,91,obj_panel);
                SwordSwing_A = true;
                exit;
            }
        }
    }
    
    if place_meeting(x+40,91,obj_panel){
        if !place_meeting(x+40,91,obj_virus) &amp;&amp; !place_meeting(x+40,91,obj_object){
            if place_meeting(x+40,91,obj_panel_blue_mask){
                TP = instance_place(x+40,91,obj_panel);
                SwordSwing_A = true;
                exit;
            }
        }
    }
    
    if place_meeting(x-40,91,obj_panel){
        if !place_meeting(x-40,91,obj_virus) &amp;&amp; !place_meeting(x-40,91,obj_object){
            if place_meeting(x-40,91,obj_panel_blue_mask){
                TP = instance_place(x-40,91,obj_panel);
                SwordSwing_A = true;
                exit;
            }
        }
    }        
}

if Move_Count = 18 &amp;&amp; sprite_index = Base_S &amp;&amp; image_index = 0 &amp;&amp; image_alpha = 1 &amp;&amp; Hp &lt;= MaxHp/2{
    if MM.x &lt; 140 {Circle_X = 60};
    if MM.x &gt;= 140 {Circle_X = 180};
    SwordHammer_A = true;
}

}
//Move_Count Reset
if Move_Count &gt; 19 {Move_Count = 0}


</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Coding the Attack

//Buster
if Buster_A{
   Buster_A = false;
   with(obj_zero_charge) {instance_destroy()};
   Charge = false;
   CD = 0;
   MMT = 32;
   image_index = 0;
   sprite_index = Buster_S;    
}

//SwordHammer
if SwordHammer_A{
    SwordHammer_A = false;
    image_index = .1;
    Direction = SwordHammer;
}
if SH_T &amp;&amp; State = S_Normal{
    SH_Timer += 1;
    if SH_Timer = 30{
        SH_Timer = 0;
        SH_T = false;
        with(obj_panel_indacator) {instance_destroy();}
        instance_create(Circle_X,109,obj_zero_circle_effect);
        exit;
    }
}
if SH_Effect = 1 &amp;&amp; State = S_Normal{
    SH_Effect = 0;
    SH_T = true;
    //Middle
    with(instance_place(Circle_X+40,115-24,obj_panel)){
        instance_create(x,y,obj_panel_indacator);
    }
    with(instance_place(Circle_X-40,115-24,obj_panel)){
        instance_create(x,y,obj_panel_indacator);
    }
    
    //Top
    with(instance_place(Circle_X,91-24,obj_panel)){
        instance_create(x,y,obj_panel_indacator);
    }
    with(instance_place(Circle_X+40,91-24,obj_panel)){
        instance_create(x,y,obj_panel_indacator);
    } 
    with(instance_place(Circle_X-40,91-24,obj_panel)){
        instance_create(x,y,obj_panel_indacator);
    }
    
    //Bottom
    with(instance_place(Circle_X,139-24,obj_panel)){
        instance_create(x,y,obj_panel_indacator);
    }
    with(instance_place(Circle_X+40,139-24,obj_panel)){
        instance_create(x,y,obj_panel_indacator);
    } 
    with(instance_place(Circle_X-40,139-24,obj_panel)){
        instance_create(x,y,obj_panel_indacator);
    }               
}

//SwordSwing
if SwordSwing_A{
    SwordSwing_A = false;
    R_Swing[0] = choose(SwordSwingU_S,SwordSwingD_S);
    R_Swing[1] = choose(SwordSwingU_S,SwordSwingD_S);
    R_Swing[2] = choose(SwordSwingU_S,SwordSwingD_S);
    image_index = .1;
    Direction = SwordSwing;
    if !place_meeting(180,115,obj_object) &amp;&amp; place_meeting(180,115,obj_panel_blue_mask){
        TP = instance_place(180,115,obj_panel);
        exit;
    }
}

//SwordCombo
if SwordCombo_A{
    SwordCombo_A = false;
    image_index = .1;
    Direction = SwordCombo;
}

//MultiStep
if MultiStep_A{
    MultiStep_A = false;
    image_index = .1;
    Direction = MultiStep;
}

if sprite_index = SwordCombo_S{
   if image_index = 0 || image_index = 8 || image_index = 14{
       SC_Timer += 1;
       if SC_Timer = 13{
           SC_Timer = 0;
           image_index += .1;
           exit;
       }
   }
   if Direction = MultiStep{
       switch(image_round){
           case 7:
       if place_meeting(MM.x+40,MM.y,obj_panel){
        if !place_meeting(MM.x+40,MM.y,obj_virus) &amp;&amp; !place_meeting(MM.x+40,MM.y,obj_object){
            if place_meeting(MM.x+40,MM.y,obj_panel_red_mask) || place_meeting(MM.x+40,MM.y,obj_panel_blue_mask){
                TP = instance_place(MM.x+40,MM.y,obj_panel);
                x = TP.x;
                y = TP.y-16;
                image_speed = 0;
                image_index = 8;
                exit;
            }
        }
    } else {sprite_index = Base_S; image_index = 0.1; Direction = Return; Save_Panel = -4;}
    break;
    
           case 13:
       if place_meeting(MM.x+40,MM.y,obj_panel){
        if !place_meeting(MM.x+40,MM.y,obj_virus) &amp;&amp; !place_meeting(MM.x+40,MM.y,obj_object){
            if place_meeting(MM.x+40,MM.y,obj_panel_red_mask) || place_meeting(MM.x+40,MM.y,obj_panel_blue_mask){
                TP = instance_place(MM.x+40,MM.y,obj_panel);
                x = TP.x;
                y = TP.y-16;
                image_speed = 0;
                image_index = 14;
                exit;
            }
        }
    } else {sprite_index = Base_S; image_index = 0.1; Direction = Return; Save_Panel = -4;}
    break;    
       }
   }
} else {SC_Timer = 0};
/*
if BigDrillStab_A{
   BigDrillStab_A = false;
   image_index = 0;
   sprite_index = BigDrillStab_S;    
}

if DrillShot_A{
   DrillShot_A = false;
   image_index = 0;
   sprite_index = DrillShot_S;
}

if DrillRain_A{
    DrillRain_A = false;
    image_index = 0;
    sprite_index = DrillRain_S;
}

if CrashCannon_A{
   CrashCannon_A = false;
   image_index = 0;
   sprite_index = CrashCannon_S;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Attack HitBox &amp; Sprites
//Buster
if sprite_index = Buster_S{
    if image_round = 2{
        if HitBox{
            HitBox = false;
            instance_create(x-28,y-12,obj_zero_bustershot);
        }
    }
}

//SwordHammer
if sprite_index = SwordHammer_S{
    if image_round = 3{
        if HitBox{
            HitBox = false;
            with(instance_create(IP.x-40,IP.y-3,obj_zero_hitbox)){
                Timer = 1;
                Hurt = true
                Element = E_Sword;
                Power = obj_zero_boss.Power[4];
                Travel = false;
            } 
            with(instance_create(IP.x-80,IP.y-3,obj_zero_hitbox)){
                Timer = 1;
                Hurt = true
                Element = E_Sword;
                Power = obj_zero_boss.Power[4];
                Travel = false;
            }                       
        }
    }
}

//SwordSwing
if sprite_index = SwordSwingU_S || SwordSwingD_S{
    if place_meeting(x-40,y,obj_panel){
        if image_round = 4 &amp;&amp; HitBox{
            HitBox = false;
            if sprite_index = SwordSwingU_S{
                if IP.x != 220{
                    with(instance_create((IP.x-40)+3,IP.y-17,obj_zero_wideshot)){
                        spd = -5;
                    }
                 } 
                if IP.x = 220{
                    with(instance_create((IP.x-40)+3,IP.y-17,obj_zero_wideshot)){
                        spd = -6;
                    }
                 }                  
            }
            if sprite_index = SwordSwingD_S{
                if IP.x != 220{
                    with(instance_create((IP.x-40)+3,IP.y+7,obj_zero_wideshot)){
                        spd = -5;
                    }
                }
                if IP.x = 220{
                    with(instance_create((IP.x-40)+3,IP.y+7,obj_zero_wideshot)){
                        spd = -6;
                    }
                }                
            }            
        }
    }
}

//SwordCombo &amp; MultiStep
if sprite_index = SwordCombo_S{
    switch(image_round){
        case 3:
          if HitBox{
             with(instance_create(IP.x-40,IP.y-3,obj_zero_hitbox)){
                 if other.Direction = other.SwordCombo {Semi = true;} else {Hurt = true}
                 Element = E_Sword;
                 Timer = 1;
                 Power = other.Power[0];
                 Travel = false;
             };
             HitBox = false;
          }
          break;
          
          case 4:
          HitBox = true;
          break;
          
          case 11:
          if HitBox{
             with(instance_create(IP.x-40,IP.y-3,obj_zero_hitbox)){
                 if other.Direction = other.SwordCombo {Semi = true;} else {Hurt = true}
                 Element = E_Sword;
                 Timer = 1;
                 Power = other.Power[0];
                 Travel = false;
             };
             with(instance_create(IP.x-40,(IP.y-3)+24,obj_zero_hitbox)){
                 if other.Direction = other.SwordCombo {Semi = true;} else {Hurt = true}
                 Element = E_Sword;
                 Timer = 1;
                 Power = other.Power[0];
                 Travel = false;
             }; 
             with(instance_create(IP.x-40,(IP.y-3)-24,obj_zero_hitbox)){
                 if other.Direction = other.SwordCombo {Semi = true;} else {Hurt = true}
                 Element = E_Sword;
                 Timer = 1;
                 Power = other.Power[0];
                 Travel = false;
             };                         
             HitBox = false;
          }
          break;
          
          case 12:
          HitBox = true;
          break;
          
          case 19:
          if HitBox{
             with(instance_create(IP.x-40,IP.y-3,obj_zero_hitbox)){
                 if other.Direction = other.SwordCombo {Semi = true;} else {Hurt = true}
                 Element = E_Sword;
                 Timer = 1;
                 Power = other.Power[0];
                 Travel = false;
             };
             with(instance_create(IP.x-40,(IP.y-3)-24,obj_zero_hitbox)){
                 if other.Direction = other.SwordCombo {Semi = true;} else {Hurt = true}
                 Element = E_Sword;
                 Timer = 1;
                 Power = other.Power[0];
                 Travel = false;
             };
             with(instance_create(IP.x-80,IP.y-3,obj_zero_hitbox)){
                 if other.Direction = other.SwordCombo {Semi = true;} else {Hurt = true}
                 Element = E_Sword;
                 Timer = 1;
                 Power = other.Power[0];
                 Travel = false;
             };
             with(instance_create(IP.x-80,(IP.y-3)-24,obj_zero_hitbox)){
                 if other.Direction = other.SwordCombo {Semi = true;} else {Hurt = true}
                 Element = E_Sword;
                 Timer = 1;
                 Power = other.Power[0];
                 Travel = false;
             };                                       
             HitBox = false;
          }
          break;                            
    }
}

/*
image_round = round(image_index);

//Drill Stab
if sprite_index = DrillStab_S{
        switch(image_round){
           case 3:
          if HitBox{
             with(instance_create(IP.x-40,IP.y-3,obj_crashman_hitbox)){
                 Semi = true;
                 Element = E_Crack;
                 Timer = 1;
                 Power = other.Power[0];
                 Travel = false;
             };
          }
           HitBox = false
           break;

           case 5:
           HitBox = true
           break;           
                      
           case 6:
          if HitBox{
             with(instance_create(IP.x-40,IP.y-3,obj_crashman_hitbox)){
                 Semi = true;
                 Element = E_Crack;
                 Timer = 1;
                 Power = other.Power[0];
                 Travel = false;
             };
          }
           HitBox = false
           break;
        }
}

//Big Drill Stab
if sprite_index = BigDrillStab_S{
        switch(image_round){
           case 4:
          if HitBox{
             with(instance_create(IP.x-40,IP.y-3,obj_crashman_hitbox)){
                 Semi = true;
                 Element = E_Crack;
                 Timer = 1;
                 Power = other.Power[1];
                 Travel = false;
             };
             with(instance_create(IP.x-80,IP.y-3,obj_crashman_hitbox)){
                 Semi = true;
                 Element = E_Crack;
                 Timer = 1;
                 Power = other.Power[1];
                 Travel = false;
             };         
          }
           HitBox = false
           break;

           case 6:
           HitBox = true
           break;           
                      
           case 8:
          if HitBox{
             with(instance_create(IP.x-40,IP.y-3,obj_crashman_hitbox)){
                 Semi = true;
                 Element = E_Crack;
                 Timer = 1;
                 Power = other.Power[1];
                 Travel = false;
             };
             with(instance_create(IP.x-80,IP.y-3,obj_crashman_hitbox)){
                 Semi = true;
                 Element = E_Crack;
                 Timer = 1;
                 Power = other.Power[1];
                 Travel = false;
             };             
          }
           HitBox = false
           break;
           
           case 10:
           HitBox = true
           break; 
           
           case 12:
          if HitBox{
             with(instance_create(IP.x-40,IP.y-3,obj_crashman_hitbox)){
                 Semi = true;
                 Element = E_Crack;
                 Timer = 1;
                 Power = other.Power[1];
                 Travel = false;
             };
          }
           HitBox = false
           break;                      
        }
}

//Drill Shot
if sprite_index = DrillShot_S{
    if image_round = 8 &amp;&amp; HitBox{
         instance_create(x-23,y-9,obj_drill_straight);
         instance_create(x+7,y-9,obj_drill_straight);
         instance_create(x+37,y-9,obj_drill_straight);
         HitBox = false;
    }
}

//Drill Rain
if PT_X[0] = PT_X[1] &amp;&amp; PT_Y[0] = PT_Y[1]{
     PT_X[1] = choose(20,60,100);
     PT_Y[1] = choose(91,115,139);
}
if PT_X[1] = PT_X[2] &amp;&amp; PT_Y[1] = PT_Y[2]{
     PT_X[2] = choose(20,60,100);
     PT_Y[2] = choose(91,115,139);
}
if PT_X[0] = PT_X[2] &amp;&amp; PT_Y[0] = PT_Y[2]{
     PT_X[2] = choose(20,60,100);
     PT_Y[2] = choose(91,115,139); 
}

if sprite_index = DrillRain_S{
    if image_round = 1{
        PT_X[0] = choose(20,60,100);
        PT_Y[0] = choose(91,115,139);
        PT_X[1] = choose(20,60,100);
        PT_Y[1] = choose(91,115,139);
        PT_X[2] = choose(20,60,100);
        PT_Y[2] = choose(91,115,139);        
        
    }    

    if image_round = 7 &amp;&amp; HitBox{
         instance_create(x+16,y-36,obj_drill_up);
         HitBox = false;
    }
}

//Crash Cannon
if sprite_index = CrashCannon_S{
    if image_round = 9{
          if HitBox{
             HitBox = false;
             with(instance_create(IP.x-40,IP.y-3,obj_crashman_hitbox)){
                   Hurt = true;
                   Element = E_None;
                   Power = other.Power[4];
                   Travel = true;
                   Tank_Cannon = true;
             }             
          }
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Death
if State = Dead &amp;&amp; obj_megaman.State = S_Normal{
  image_speed = 0;
  sprite_index = Hurt_Flash_S;
  image_alpha = 1;

  
  
  if Ex_Count = 0 &amp;&amp; Ex_true{
     Ex_true = false;
     with(instance_create(x-11,y+6,obj_expolsion_effect)){
        Owner = other.id;
        Ex_Count = true;
     }    
  }
   if Ex_Count = 1 &amp;&amp; Ex_true{
     Ex_true = false;
     with(instance_create(x+13,y-12,obj_expolsion_effect)){
        Owner = other.id;
        Ex_Count = true;
     }    
  }
   if Ex_Count = 2 &amp;&amp; Ex_true{
     instance_destroy();
     Ex_true = false;
     with(instance_create(x+5,y+9,obj_expolsion_effect)){
        Owner = other.id;
        Ex_Count = true;
     }    
  }

  }
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>604</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_inherited</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Fighting Text
if text[0] = true &amp;&amp; instance_exists(obj_chip_cursor){
   global.Cursor_Control = "OFF";
   text[0] = false;
   with(instance_create(0,0,text_parent)){
       scr_text_system(1,spr_megaman_mugshot,"Lan we need to be#careful. There is something#off about this navi.",noone,-1,"",noone);
       scr_text_system(2,spr_lan_mugshot,"Well I guess we better#not hold back then.",noone,-1,"",noone);
       alarm[0] = room_speed/5;
   }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="7">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Direction
Shuffle = true;
HitBox = true;

if sprite_index = Base_S{
     switch(Direction){
         case Up:
         y-=24;
         image_index = 0;
         Direction = 0;
         if !instance_exists(obj_zero_charge) {Move_Count += 1};
         break;
         
         case Down:
         y+=24;
         image_index = 0;
         Direction = 0;
         if !instance_exists(obj_zero_charge) {Move_Count += 1};
         break;
         
         case Left:
         x-=40;
         image_index = 0;
         Direction = 0;
         if !instance_exists(obj_zero_charge) {Move_Count += 1};
         break;    
         
         case Right:
         x+=40;
         image_index = 0;
         Direction = 0;
         if !instance_exists(obj_zero_charge) {Move_Count += 1};
         break;
         
         case DRight:
         x+=40;
         y+=24
         image_index = 0;
         Direction = 0;
         if !instance_exists(obj_zero_charge) {Move_Count += 1};
         break;  
         
         case URight:
         x+=40;
         y-=24
         image_index = 0;
         Direction = 0;
         if !instance_exists(obj_zero_charge) {Move_Count += 1};
         break;
        
         case DLeft:
         x-=40;
         y+=24
         image_index = 0;
         Direction = 0;
         if !instance_exists(obj_zero_charge) {Move_Count += 1};
         break; 
         
         case ULeft:
         x-=40;
         y-=24
         image_index = 0;
         Direction = 0;
         if !instance_exists(obj_zero_charge) {Move_Count += 1};
         break;                                   
         
         case Return:
         x = Save_Panel.x;
         y = Save_Panel.y-16;
         Move_Count += 1;
         Shuffle = true;
         image_index = 0;
         image_speed = 0;
         sprite_index = Base_S; 
         Save_Panel = -4;  
         break; 
         
         case MultiStep:
         x = TP.x;
         y = TP.y-16;
         image_index = 0;
         sprite_index = SwordCombo_S;
         exit;  
         break;
         
         case SwordCombo:
         x = TP.x;
         y = TP.y-16;
         image_index = 0;
         sprite_index = SwordCombo_S;
         exit;  
         break;         
         
         case SwordSwing:
         x = TP.x;
         y = (TP.y-16)-24;
         image_index = 0;
         sprite_index = R_Swing[0];
         exit;
         break;  
         
         case SwordHammer:
         Save_Panel = instance_place(x,y,obj_panel);
         Direction = 0;
         image_index = 0;
         image_alpha = 0;
         SH_Effect = 1;
         exit;
         break;                                               
     }
}

//Attacking
if sprite_index = Buster_S{
  image_index = 0;
  sprite_index = Base_S;
}
if sprite_index = SwordCombo_S{
    sprite_index = Base_S;
    image_index = .1;
    Direction = Return;
}
if sprite_index = SwordHammer_S{
    sprite_index = Base_S;
    image_index = 1;
    Direction = Return;
}
if sprite_index = SwordSwingD_S || sprite_index = SwordSwingU_S{
    if SSC != 1{
        SSC += 1;
        image_index = 0;
        sprite_index = R_Swing[SSC];
        exit;
    }
    if SSC = 1{
        SSC = 0;
        image_index = 0;
        sprite_index = Base_S;
        Move_Count += 1;
    }
}

with(VChild){
    instance_destroy();
}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>604</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_inherited</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_self();

if Hp &gt; 0 &amp;&amp; sprite_index != Fade_In &amp;&amp; image_alpha != 0{
draw_set_font(obj_field.EnemyHp_Font);
draw_text(x-7,y+24,round(Hp));
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
