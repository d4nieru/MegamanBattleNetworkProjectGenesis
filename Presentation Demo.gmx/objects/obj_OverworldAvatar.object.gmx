<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>Overworld_Stand</spriteName>
  <solid>-1</solid>
  <visible>-1</visible>
  <depth>-9999</depth>
  <persistent>0</persistent>
  <parentName>objPlayerParent</parentName>
  <maskName>Hitbox</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>pause = 0;
//=====&gt;&gt; Camera Creation    &lt;&lt;================
    camera = instance_create(x,y,objCamera);
move_status = 1;    

walking = 0;
voice = "";
text_string = "";
walkwait = 0;
hsp = 0;
vsp = 0;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Room Change &lt;======= Spooky's Code
/*if global.WarpX &gt; 0 &amp;&amp; global.WarpY &gt; 0{
     x = global.WarpX
     y = global.WarpY
     global.WarpX = -1;
     global.WarpY = -1;
} 
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Movement Variables &amp; Keyboard Variables
key_left = keyboard_check(vk_left);
key_right = keyboard_check(vk_right);
key_up = keyboard_check(vk_up);
key_down = keyboard_check(vk_down);
key_run = keyboard_check(ord("X"));

m_base = OverworldBase;
m_left = Overworld_MoveLeft;
m_right = Overworld_MoveRight;
m_up = Overworld_MoveUp;
m_down = Overworld_MoveDown;
m_uright = Overworld_MoveRightUp;
m_dright = Overworld_MoveRightDown;
m_uleft = Overworld_MoveLeftUp;
m_dleft = Overworld_MoveLeftDown;

//Move Status Variables
walk = 1;
run = 2;

if move_status = walk{
  spd = 1; 
  image_speed = .1
}
if move_status = run{
   spd = 2;
   image_speed = .18;
}

if !key_run {move_status = walk;}
if key_run {move_status = run;}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Movement
x += hsp;
y += vsp;

//Left Key
if key_left &amp;&amp; !key_right &amp;&amp; !key_up &amp;&amp; !key_down{
   hsp = -spd;
   vsp = 0;
   sprite_index = m_left;
}
//Right Key
if !key_left &amp;&amp; key_right &amp;&amp; !key_up &amp;&amp; !key_down{ 
   hsp = spd;
   vsp = 0;
   sprite_index = m_right;
}
//Up Key
if !key_left &amp;&amp; !key_right &amp;&amp; key_up &amp;&amp; !key_down{
    hsp = 0;
   vsp = -spd;
   sprite_index = m_up;
}
//Down Key
if !key_left &amp;&amp; !key_right &amp;&amp; !key_up &amp;&amp; key_down{
   hsp = 0;
   vsp = spd;
   sprite_index = m_down;
}

//UpRight Key
if !key_left &amp;&amp; key_right &amp;&amp; key_up &amp;&amp; !key_down{
    vsp = -spd/2;
   hsp = spd;
   sprite_index = m_uright;
}
//DownLeft Key
if key_left &amp;&amp; !key_right &amp;&amp; !key_up &amp;&amp; key_down{
     vsp = spd/2;
   hsp = -spd;
   sprite_index = m_dleft;
}
//DownRight Key
if !key_left &amp;&amp; key_right &amp;&amp; !key_up &amp;&amp; key_down{
     hsp = spd;
   vsp = spd/2;
   sprite_index = m_dright;
}
//UpLeft Key
if key_left &amp;&amp; !key_right &amp;&amp; key_up &amp;&amp; !key_down{
    hsp = -spd;
   vsp = -spd/2;
   sprite_index = m_uleft;
}

//Key Release Still
if !key_left &amp;&amp; !key_right &amp;&amp; !key_up &amp;&amp; !key_down{
    hsp = 0;
    vsp = 0;
    switch(sprite_index){
       case m_left:
       sprite_index = sprite26;
       break;
       
       case m_right:
       sprite_index = sprite25;
       break;
       
       case m_up:
       sprite_index = Overworld_Stand;
       break;
       
       case m_down:
       sprite_index = sprite29;
       break;
       
       case m_uleft:
       sprite_index = sprite24;
       break;
       
       case m_uright:
       sprite_index = sprite23;
       break;
       
       case m_dleft:
       sprite_index = sprite28;
       break;
       
       case m_dright:
       sprite_index = sprite27;
       break;
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Collision

//Horinzonl
if key_right{
  if place_meeting(x+7,y,obj_border) &amp;&amp; !place_meeting(x,y-7,obj_border){  
    if vsp = 0{
       hsp = 0;
       vsp = -spd/2;
    }
    if vsp &gt; 0{
       hsp = 0;
       vsp = 0;
    } 
  }
  if place_meeting(x,y-7,obj_border){
       hsp = 0;
       vsp = 0;
  }     
}

if key_right &amp;&amp; key_up &amp;&amp; place_meeting(x,y-7,obj_border){
   hsp = 0;
   vsp = 0;
}

//Veritacl
if key_down{
   if place_meeting(x+7,y,obj_border){
      if hsp = 0{
         vsp = spd/2;
         hsp = 0;
      }
      if hsp &gt; 0{
        vsp = 0;
        hsp = 0;
      }
   }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="13">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (pause == 0){
    pause = 1;
    instance_create(x, y, PETMenu);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
