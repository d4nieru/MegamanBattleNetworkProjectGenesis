<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-999999</depth>
  <persistent>0</persistent>
  <parentName>objControl</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Puase Variables
Use = false; //if menu can be used
Paused = false; //if game is puased
State = 0; //menu state
Selected = 0; //currently selected
SelectedMax = 6; //max selections
Entrance = false; //activates entrance sequence
Exit = false; //activates exit sequence
Transition = false; //activates transition sequence
StateToBe = 0; //new state holder
MainState = 0; //states for the main meny
Option = 0; //controls main menu change buttons
Mid = false; //mid point of transition
Freeze = false; //Locking the button inputs for the PETMENU

//Pet Screen Variables
YOff01 = background_get_height(bgPetScreen);

//Pet Word Variables
YOff02 = background_get_height(bgPet)+4;

//Select Word Variables
XOff01 = background_get_width(bgSettings)+2;

//Button Variables
XOff02 = background_get_width(bgButton)+24;

YOff03 = 0;
YOff04 = 0;
YOff05 = 0;
YOff06 = 0;
YOff07 = 0;
YOff08 = 0;
YOffs[0] = YOff03;
YOffs[1] = YOff04;
YOffs[2] = YOff05;
YOffs[3] = YOff06;
YOffs[4] = YOff07;
YOffs[5] = YOff08;

//Side Bar Variables
XOff03 = background_get_width(bgHealth);

//Left Right Button Variables
YOff09 = background_get_height(bgBackLeft)+8;



//Reference 
Debug = false; //brings up reference menu behind regular for conparison
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>YOffs[0] = YOff03;
YOffs[1] = YOff04;
YOffs[2] = YOff05;
YOffs[3] = YOff06;
YOffs[4] = YOff07;
YOffs[5] = YOff08;


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>On &amp; Off Toggle</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if !Freeze{

if keyboard_check_pressed(vk_enter)
{
    if Paused == false
    {
        Paused = true;
        Entrance = true;
        Exit = false;
        Transition = false;
        if instance_exists(objPlayerParent)
            with objPlayerParent pause = 1;
            exit;
    }
    else
    {
        Paused = false;
        Entrance = false;
        Exit = true;
        Transition = false;
        if instance_exists(objPlayerParent)
            with objPlayerParent pause = 0;
        instance_destroy();   
            exit;
    }
}

}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Entrance</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if !Freeze{

if Entrance == true
{
    if YOff01 &gt; 0
        YOff01 -= 15;
    
    if YOff01 &lt;= 0
    {
        YOff01 = 0;
        
        if YOff02 &lt;= 0
            TOff02 = 0;
        else
            YOff02 -= 2;
        
        if XOff01 &lt;= 0
            XOff01 = 0;
        else
            XOff01 -= 4;
            
        if XOff02 &lt;= 0
            XOff02 = 0;
        else
            XOff02 -= 8;
            
        if XOff03 &lt;= 0
            XOff03 = 0;
        else
            XOff03 -= 8;
            
        if YOff09 &lt;= 0
            TOff09 = 0;
        else
            YOff09 -= 8;
    }
    
    if XOff02 == 0
    {
        if YOff04 &lt; 18
            YOff04 += 9;
            
        if YOff05 &lt; 36
            YOff05 += 9;
            
        if YOff06 &lt; 54
            YOff06 += 9;
            
        if YOff07 &lt; 72
            YOff07 += 9;
            
        if YOff08 &lt; 90
            YOff08 += 9;
    }
    
    if YOff08 &gt;= 90
    {
        Use = true;
        Entrance = false;
    }
}

}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Transition</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if !Freeze{

if Transition == true
{
        if Mid == false
        {
            Use = false;
            
            if XOff01 &gt;= background_get_width(bgSettings)+2
                XOff01 = background_get_width(bgSettings)+2;
            else
                XOff01 += 4;
            
            if XOff02 &gt;= background_get_width(bgButton)+24
                XOff02 = background_get_width(bgButton)+24;
            else
                XOff02 += 8;
            
            if XOff03 &gt;= background_get_width(bgHealth)
                XOff03 = background_get_width(bgHealth);
            else
                XOff03 += 8;
                
            if XOff03 == background_get_width(bgHealth) &amp;&amp; Mid == false
            {
                Mid = true;
                
                if MainState == 0
                {
                    MainState = 1;
                    SelectedMax = 5
                }
                else
                {
                    MainState = 0;
                    SelectedMax = 6
                }
            }
        }
        else
        {
            if XOff01 &lt;= 0
                XOff01 = 0;
            else
                XOff01 -= 4;
            
            if XOff02 &lt;= 0
                XOff02 = 0;
            else
                XOff02 -= 8;
            
            if XOff03 &lt;= 0
                XOff03 = 0;
            else
                XOff03 -= 8;
        }
        
       
        if Mid == true &amp;&amp; XOff03 == 0
        {     
            Selected = SelectedMax;
            Transition = false;
            Use = true
            Mid = false;
        }
}

}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Selection</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if !Freeze{

if Use == true &amp;&amp; Paused == true
{
    if keyboard_check_pressed(vk_up) &amp;&amp; Selected &gt; 0
        Selected --;
        
    if keyboard_check_pressed(vk_down) &amp;&amp; Selected &lt;  SelectedMax
        Selected ++;      
    
    if Selected == SelectedMax
    {
        if keyboard_check_pressed(vk_left)
        {
            Option = 0;
        }   
        else if keyboard_check_pressed(vk_right)
        {
            Option = 1;
        }
    }
}

if keyboard_check_pressed(ord('Z'))
{
    switch MainState
    {
        case 0:
            switch  Selected
            {
                case 0:
                    //Chip Folder
                    with(instance_create(view_xview[0],view_yview[0],obj_menu_tran)){
                         Menu = obj_chip_menu_test;
                         other.Freeze = true;
                    }
                    break;
                
                case 1:
                    //Sub Chip Folder
                    break;
                    
                case 2:
                    //Library
                    break;
                    
                case 3:
                    //Megaman
                    break;
                    
                case 4:
                    //Emails
                    break;
                    
                case 5:
                    //Key Items
                    break;
                    
                case 6:
                    {
                        if Option == 1
                            Transition = true;
                    }
                    break;
            }
            break;
            
        case 1:
            switch  Selected
            {
                case 0:
                {
                    if keyboard_check_pressed(vk_left)
                    {
                        //Sound Adjustment Code
                    }
                    else if keyboard_check_pressed(vk_right)
                    {
                        //Sound Adjustment Code
                    }
                }
                break;
                
                case 1:
                {
                    if window_get_fullscreen()
                    {
                        window_set_fullscreen(false);
                        //exit;
                    }
                    else
                    {
                        window_set_fullscreen(true);
                        //exit;
                    }
                }
                break;
                    
                case 2:
                {
                    if keyboard_check_pressed(vk_left)
                    {
                        //Resolution Code
                    }
                    else if keyboard_check_pressed(vk_right)
                    {
                        //Resolution Code
                    }
                }
                break;
                    
                case 3:
                    //Comunication Code
                    break;
                    
                case 4:
                    //Saving Code
                    break;
                    
                case 5:
                    {
                        if Option == 0
                            Transition = true;
                    }
                    break;
            }
            break;
    }
}

}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Debug Code</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if !Freeze{

if keyboard_check_pressed(vk_alt)
{
    if Debug == false
    {
        Debug = true;
        exit;
    }
    else
    {
        Debug = false;
        exit;
    }
}

}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if Paused == true
{
    if Debug == true
        draw_background(bgReferenceMenu,view_xview,view_yview);
    
    //Draws Back Pet Screen
    draw_background(bgPetScreen,view_xview,view_yview-YOff01);
    
    //Draws Pet Word
    draw_background(bgPet,view_xview+40,(view_yview+4)-YOff02)
    
    if MainState == 0
    {
        //Draw Select Word
        draw_background(bgSelect,(view_xview+2)-XOff01, view_yview+18);
     
        //Draw Buttons And Icons
        for (i = 0; i &lt; 6; i++)
        {
            draw_background(bgButton,(view_xview+24)-XOff02,(view_yview+25)+YOffs[i]);
            draw_sprite(sprPetIcons,i,(view_xview+6)-XOff02,(view_yview+26)+YOffs[i]);
            draw_sprite(sprPetWords,i,(view_xview+30)-XOff02,(view_yview+26)+YOffs[i]);
        }
    
        draw_background(bgHealth,(view_xview+130)+XOff03, view_yview+25);
        draw_background(bgZenny,(view_xview+130)+XOff03, view_yview+47);
        draw_background(bgFags,(view_xview+130)+XOff03, view_yview+69);
    }
    else
    {
        //Draw Settings Word
        draw_background(bgSettings,(view_xview+2)-XOff01, view_yview+18);
        
        //Draw Settings Buttons And Icons
        for (i = 0; i &lt; 5; i++)
        {
            draw_background(bgButton,(view_xview+24)-XOff02,(view_yview+25)+YOffs[i]);
            draw_sprite(sprPetIcons2,i,(view_xview+3)-XOff02,(view_yview+25)+YOffs[i]);
            draw_sprite(sprPetWords,i+6,(view_xview+30)-XOff02,(view_yview+26)+YOffs[i]);
        }
    }
    draw_background_ext(bgBackLeft,(view_xview+82), (view_yview+142)+YOff09,-1,1,0,c_white,1);
    draw_background(bgBackLeft,(view_xview+114), (view_yview+142)+YOff09);
    
    //Selection
    if Use == true
    {
        if Selected &lt; SelectedMax
        {
            draw_background(bgButtonSelected,(view_xview+24),(view_yview+25)+YOffs[Selected]);
            if MainState == 0
                draw_sprite(sprPetWordsSelected,Selected,(view_xview+30)-XOff02,(view_yview+26)+YOffs[Selected]);
            else
                draw_sprite(sprPetWordsSelected,Selected+6,(view_xview+30)-XOff02,(view_yview+26)+YOffs[Selected]);
        }
        
        if Selected == SelectedMax
        {
            if Option == 0
                draw_background_ext(bgBackLeftSellected,(view_xview+82), (view_yview+142)+YOff09,-1,1,0,c_white,1);
            else 
                draw_background(bgBackLeftSellected,(view_xview+114), (view_yview+142)+YOff09);
        }
    }
    
    //Draw Pet Outer Layer
    draw_background(bgPetScreenClear,view_xview,view_yview-YOff01);
    
    if Use == true
        draw_background(bgPetMiniIconScreen,view_xview+178,view_yview-116);
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
