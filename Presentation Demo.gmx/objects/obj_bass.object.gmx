<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_bass_base</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>obj_virus</parentName>
  <maskName>spr_bass_base</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>image_speed = .1;
VChild = noone;
Mask = spr_bass_base;

//Animation
AT = 0 // Animation Timer
BAT = 0
BusterX = 0;
BusterY = 0;
BusterX2 = 0;
BusterY2 = 0;
BusterX3 = 0;
BusterY3 = 0;

//Movement
Target_Panel = 0;
Move = true;
Move_Count = 0;
MMT = 10;
Move_Timer = MMT;
Up = 1;
Down = 2;
Left = 3;
Right = 4;
Up_Left = 5;
Up_Right = 6;
Down_Left = 7;
Down_Right = 8;
Up_Full = 9;
Down_Full = 10;
Left_Full = 11;
Right_Full = 12;

Direction = 0;
HR = 1; //HR = Hell's Rolling
DS = 2; //DS = Dark Sword
GH = 3; //GH = Gregar's Head
FH = 4; //FH = Falzar's Head
Falzar_Stop = false;

//Damage System
Semi_Hurt = false;
Hurt = false;
Hurt_Timer = 0;
Damage = 0;
Damage_Flash = false;
DF_Direction = 0;

//Stats
scr_virus_stats("Bass",E_None);
MaxHp = 1000
Hp = MaxHp;
spd = 6;
Power[0] = 5;
Power[1] = 20;
Power[2] = 30;
Power[3] = 25;
Power[4] = 30;
Power[5] = 20;

//States
State = S_Paused;
Normal = 0;
Paused = 0;
Frozen = 0;
Dead = 111;
Ex_Count = 0;
Ex_true = true;

Stop_Movement = true;
Hspeed_Save = 0;
Vspeed_Save = 0;
Hspeed_P = false;
Hspeed_N = false;
Vspeed_P = false;
Vspeed_N = false;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>604</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_inherited</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>with(VChild){
 instance_destroy();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Damage
if (Damage * -1) &gt;= Hp{
   Hp = 0;
} 

if Hp = 0 {State = Dead;}

if Hp &gt; MaxHp {Hp = MaxHp}
if Hp &lt; 0 {Hp = 0}
 
if Damage &gt; 0{
   Hp += 1;
   Damage -= 1;
}
if Damage &lt; 0{
   Hp -= 1;
   Damage += 1;
}


</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Stopped Movement

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if State != S_Normal{
   hspeed = 0;
   vspeed = 0;
}
if State = S_Normal{
   if Hspeed_P {hspeed = spd}
   if Hspeed_N {hspeed = -spd}
   if Vspeed_P {vspeed = spd}
   if Vspeed_N {vspeed = -spd}
} 
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Movement

//Scripts
scr_weakness_system();
scr_battle_damage_bass();

//Sprite Variables
Base_S = spr_bass_base;
Fade_In = spr_bass_fadein;
Sword_S = spr_bass_sword;
HRolling_S = spr_bass_hrolling;
BeastCharge_S = spr_bass_beast_charge;
Hurt_S = spr_bass_hurt;
Buster_S = spr_bass_buster;
Gregar_S = spr_bass_gregar;
Falzar_S = spr_bass_falzar;
Teleport_S = spr_bass_teleport;
Throw_S = spr_bass_throw;
WideShot_S = spr_bass_dark_wideshot;

//States
if Hp &gt; 0 {State = obj_megaman.State}
IP = instance_place(x,y,obj_panel);
if State != S_Paused &amp;&amp; State != S_Frozen{



//Random Variables
RD = choose(Up,Down,Left,Right,Up_Left,Up_Right,Down_Left,Down_Right,Up_Full,Down_Full,Left_Full,Right_Full);
Buster_R = choose(1,2,3);
//Start Moving
if Move &amp;&amp; sprite_index = Base_S{
    Move_Timer -= 1;
    if Move_Timer &lt;= 0{
       Move = false;
       Move_Timer = MMT;
       switch(RD){
          case Up:
          if place_meeting(x,y-24,obj_panel_blue) &amp;&amp; instance_place(x,y-24,obj_panel_blue).sprite_index = spr_panel_blue &amp;&amp; !place_meeting(x,y-24,obj_virus) &amp;&amp; !place_meeting(x,y-24,obj_object) {Vspeed_N = true;
          with(instance_create(IP.x,IP.y-24,obj_virus_placeholder)){
              Owner = other.id;
              other.VChild = id;
          }          
          Target_Panel = instance_place(x,y-24,obj_panel_blue);
           instance_create(x,y,obj_bass_afterimage); 
              } else {Move = true; Move_Timer = 1;}
          break;
          
          case Down:
          if place_meeting(x,y+24,obj_panel_blue) &amp;&amp; instance_place(x,y+24,obj_panel_blue).sprite_index = spr_panel_blue &amp;&amp; !place_meeting(x,y+24,obj_virus) &amp;&amp; !place_meeting(x,y+24,obj_object) {Vspeed_P = true;
          with(instance_create(IP.x,IP.y+24,obj_virus_placeholder)){
              Owner = other.id;
              other.VChild = id;
          }          
          Target_Panel = instance_place(x,y+24,obj_panel_blue);
          instance_create(x,y,obj_bass_afterimage); 
          } else {Move = true; Move_Timer = 1;}
          break;
          
          case Left:
          if place_meeting(x-40,y,obj_panel_blue) &amp;&amp; instance_place(x-40,y,obj_panel_blue).sprite_index = spr_panel_blue &amp;&amp; !place_meeting(x-40,y,obj_virus) &amp;&amp; !place_meeting(x-40,y,obj_object) {Hspeed_N = true;
          with(instance_create(IP.x-40,IP.y,obj_virus_placeholder)){
              Owner = other.id;
              other.VChild = id;
          }          
          Target_Panel = instance_place(x-40,y,obj_panel_blue);
          instance_create(x,y,obj_bass_afterimage); 
          } else {Move = true; Move_Timer = 1;}
          break;
          
          case Right:
          if place_meeting(x+40,y,obj_panel_blue) &amp;&amp; instance_place(x+40,y,obj_panel_blue).sprite_index = spr_panel_blue &amp;&amp; !place_meeting(x+40,y,obj_virus) &amp;&amp; !place_meeting(x+40,y,obj_object) {Hspeed_P = true;
          with(instance_create(IP.x+40,IP.y,obj_virus_placeholder)){
              Owner = other.id;
              other.VChild = id;
          }          
          Target_Panel = instance_place(x+40,y,obj_panel_blue);
          instance_create(x,y,obj_bass_afterimage); 
          } else {Move = true; Move_Timer = 1;}
          break;
          
          case Up_Left:
          if place_meeting(x-40,y-24,obj_panel_blue) &amp;&amp; instance_place(x-40,y-24,obj_panel_blue).sprite_index = spr_panel_blue &amp;&amp; !place_meeting(x-40,y-24,obj_virus) &amp;&amp; !place_meeting(x-40,y-24,obj_object){
          with(instance_create(IP.x-40,IP.y-24,obj_virus_placeholder)){
              Owner = other.id;
              other.VChild = id;
          }            
            Hspeed_N = true;
            Vspeed_N = true;
            Target_Panel = instance_place(x-40,y-24,obj_panel_blue);
            instance_create(x,y,obj_bass_afterimage);
          } else {Move = true; Move_Timer = 1;}
          break;
          
          case Up_Right:
          if place_meeting(x+40,y-24,obj_panel_blue) &amp;&amp; instance_place(x+40,y-24,obj_panel_blue).sprite_index = spr_panel_blue &amp;&amp; !place_meeting(x+40,y-24,obj_virus) &amp;&amp; !place_meeting(x+40,y-24,obj_object){
          with(instance_create(IP.x+40,IP.y-24,obj_virus_placeholder)){
              Owner = other.id;
              other.VChild = id;
          }            
            Hspeed_P = true;
            Vspeed_N = true;
            Target_Panel = instance_place(x+40,y-24,obj_panel_blue);
            instance_create(x,y,obj_bass_afterimage);
          } else {Move = true; Move_Timer = 1;} 
          break;
          
          case Down_Left:
          if place_meeting(x-40,y+24,obj_panel_blue) &amp;&amp; instance_place(x-40,y+24,obj_panel_blue).sprite_index = spr_panel_blue &amp;&amp; !place_meeting(x-40,y+24,obj_virus) &amp;&amp; !place_meeting(x-40,y+24,obj_object){
          with(instance_create(IP.x-40,IP.y+24,obj_virus_placeholder)){
              Owner = other.id;
              other.VChild = id;
          }            
            Hspeed_N = true;
            Vspeed_P = true;
            Target_Panel = instance_place(x-40,y+24,obj_panel_blue);
            instance_create(x,y,obj_bass_afterimage);
          } else {Move = true; Move_Timer = 1;} 
          break;   
          
            case Down_Right:
            if place_meeting(x+40,y+24,obj_panel_blue) &amp;&amp; instance_place(x+40,y+24,obj_panel_blue).sprite_index = spr_panel_blue &amp;&amp; !place_meeting(x+40,y+24,obj_virus) &amp;&amp; !place_meeting(x+40,y+24,obj_object){
          with(instance_create(IP.x+40,IP.y+24,obj_virus_placeholder)){
              Owner = other.id;
              other.VChild = id;
          }            
            Hspeed_P = true;
            Vspeed_P = true;
            Target_Panel = instance_place(x+40,y+24,obj_panel_blue);
            instance_create(x,y,obj_bass_afterimage);
          } else {Move = true; Move_Timer = 1;}   
          break;  
          
            case Up_Full:
            if place_meeting(x,y-48,obj_panel_blue) &amp;&amp; instance_place(x,y-48,obj_panel_blue).sprite_index = spr_panel_blue &amp;&amp; !place_meeting(x,y-48,obj_virus) &amp;&amp; !place_meeting(x,y-48,obj_object){
          with(instance_create(IP.x,IP.y-48,obj_virus_placeholder)){
              Owner = other.id;
              other.VChild = id;
          }            
            Vspeed_N = true;
            Target_Panel = instance_place(x,y-48,obj_panel_blue);
            instance_create(x,y,obj_bass_afterimage);
          } else {Move = true; Move_Timer = 1;}  
          break;  
          
            case Down_Full:
            if place_meeting(x,y+48,obj_panel_blue) &amp;&amp; instance_place(x,y+48,obj_panel_blue).sprite_index = spr_panel_blue &amp;&amp; !place_meeting(x,y+48,obj_virus) &amp;&amp; !place_meeting(x,y+48,obj_object){
          with(instance_create(IP.x,IP.y+48,obj_virus_placeholder)){
              Owner = other.id;
              other.VChild = id;
          }            
            Vspeed_P = true;
            Target_Panel = instance_place(x,y+48,obj_panel_blue);
            instance_create(x,y,obj_bass_afterimage);
          } else {Move = true; Move_Timer = 1;}  
          break;  
          
            case Left_Full:
            if place_meeting(x-80,y,obj_panel_blue) &amp;&amp; instance_place(x-80,y,obj_panel_blue).sprite_index = spr_panel_blue &amp;&amp; !place_meeting(x-80,y,obj_virus) &amp;&amp; !place_meeting(x-80,y,obj_object){
          with(instance_create(IP.x-80,IP.y,obj_virus_placeholder)){
              Owner = other.id;
              other.VChild = id;
          }            
            Hspeed_N = true;
            Target_Panel = instance_place(x-80,y,obj_panel_blue);
            instance_create(x,y,obj_bass_afterimage);
          } else {Move = true; Move_Timer = 1;} 
          break;  
          
            case Right_Full:
            if place_meeting(x+80,y,obj_panel_blue) &amp;&amp; instance_place(x+80,y,obj_panel_blue).sprite_index = spr_panel_blue &amp;&amp; !place_meeting(x+80,y,obj_virus) &amp;&amp; !place_meeting(x+80,y,obj_object){
          with(instance_create(IP.x+80,IP.y,obj_virus_placeholder)){
              Owner = other.id;
              other.VChild = id;
          }            
            Hspeed_P = true;
            Target_Panel = instance_place(x+80,y,obj_panel_blue);
            instance_create(x,y,obj_bass_afterimage);
          } else {Move = true; Move_Timer = 1;} 
          break;                                              
       }
    }
}
//Stop Moving
if hspeed != 0 || vspeed != 0{
   //Hspeed
   if hspeed &gt; 0 &amp;&amp; vspeed = 0 &amp;&amp; x &gt;= Target_Panel.x-2{
        Hspeed_P = false;
        Hspeed_N = false;
        Vspeed_P = false;
        Vspeed_N = false;
        hspeed = 0;
        x = Target_Panel.x-2;
        Target_Panel = 0;
        Move = true;
        Move_Count += 1;
        with(VChild){
          instance_destroy();
        }        
        exit;
   }
   if hspeed &lt; 0 &amp;&amp; vspeed = 0 &amp;&amp; x &lt;= Target_Panel.x-2{
        Hspeed_P = false;
        Hspeed_N = false;
        Vspeed_P = false;
        Vspeed_N = false;
        hspeed = 0;
        x = Target_Panel.x-2;
        Target_Panel = 0;
        Move = true;
        Move_Count += 1;
        with(VChild){
          instance_destroy();
        }        
        exit;
   }
   //Vspeed
   if vspeed &gt; 0 &amp;&amp; hspeed = 0 &amp;&amp; y &gt;= Target_Panel.y-35{
        Hspeed_P = false;
        Hspeed_N = false;
        Vspeed_P = false;
        Vspeed_N = false;        
        vspeed = 0;
        y = Target_Panel.y-35;
        Target_Panel = 0;
        Move = true;
        Move_Count += 1;
        with(VChild){
          instance_destroy();
        }        
        exit;
   }  
   if vspeed &lt; 0 &amp;&amp; hspeed = 0 &amp;&amp; y &lt;= Target_Panel.y-35{
        Hspeed_P = false;
        Hspeed_N = false;
        Vspeed_P = false;
        Vspeed_N = false;        
        vspeed = 0;
        y = Target_Panel.y-35;
        Target_Panel = 0;
        Move = true;
        Move_Count += 1;
        with(VChild){
          instance_destroy();
        }        
        exit;
   }
   //Hspeed &amp; Vspeed
   //UP_Left
   if hspeed &lt; 0 &amp;&amp; vspeed &lt; 0 &amp;&amp; x &lt;= Target_Panel.x-2 &amp;&amp; y &lt;= Target_Panel.y-35{
        Hspeed_P = false;
        Hspeed_N = false;
        Vspeed_P = false;
        Vspeed_N = false;      
      hspeed = 0;
      vspeed = 0;
      x = Target_Panel.x-2;
      y = Target_Panel.y-35;
      Target_Panel = 0;
      Move = true;
      Move_Count += 1;
        with(VChild){
          instance_destroy();
        }      
      exit;
   }  
   //UP_Right
   if hspeed &gt; 0 &amp;&amp; vspeed &lt; 0 &amp;&amp; x &gt;= Target_Panel.x-2 &amp;&amp; y &lt;= Target_Panel.y-35{
        Hspeed_P = false;
        Hspeed_N = false;
        Vspeed_P = false;
        Vspeed_N = false;      
      hspeed = 0;
      vspeed = 0;
      x = Target_Panel.x-2;
      y = Target_Panel.y-35;
      Target_Panel = 0;
      Move = true;
      Move_Count += 1;
        with(VChild){
          instance_destroy();
        }      
      exit;
   } 
   //Down_Left
   if hspeed &lt; 0 &amp;&amp; vspeed &gt; 0 &amp;&amp; x &lt;= Target_Panel.x-2 &amp;&amp; y &gt;= Target_Panel.y-35{
        Hspeed_P = false;
        Hspeed_N = false;
        Vspeed_P = false;
        Vspeed_N = false;      
      hspeed = 0;
      vspeed = 0;
      x = Target_Panel.x-2;
      y = Target_Panel.y-35;
      Target_Panel = 0;
      Move = true;
      Move_Count += 1;
        with(VChild){
          instance_destroy();
        }      
      exit;
   } 
   //Down_Right
   if hspeed &gt; 0 &amp;&amp; vspeed &gt; 0 &amp;&amp; x &gt;= Target_Panel.x-2 &amp;&amp; y &gt;= Target_Panel.y-35{
        Hspeed_P = false;
        Hspeed_N = false;
        Vspeed_P = false;
        Vspeed_N = false;      
      hspeed = 0;
      vspeed = 0;
      x = Target_Panel.x-2;
      y = Target_Panel.y-35;
      Target_Panel = 0;
      Move = true;
      Move_Count += 1;
        with(VChild){
          instance_destroy();
        }      
      exit;
   }                
}

} //&lt;==================== State's end Bracket



</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Animation Speeds
if sprite_index = Fade_In {image_speed = .2;}
//States
if State != S_Paused &amp;&amp; State != S_Frozen{

if sprite_index = Base_S {image_speed = .1;}
if sprite_index = Sword_S &amp;&amp; image_index &gt; 0 {image_speed = .4;}
if sprite_index = HRolling_S &amp;&amp; image_index &lt;= 1.9 {image_speed = .3;}
if sprite_index = HRolling_S &amp;&amp; image_index &gt;= 2 {image_speed = .2;}
if sprite_index = BeastCharge_S {image_speed = .25;}
if sprite_index = Hurt_S {image_speed = 0;}
if sprite_index = Buster_S &amp;&amp; image_index &gt; 0 {image_speed = .4;}
if sprite_index = Gregar_S {image_speed = .3;}
if sprite_index = Falzar_S &amp;&amp; !Falzar_Stop {image_speed = .3;}
if sprite_index = Falzar_S &amp;&amp; Falzar_Stop {image_speed = 0;}
if sprite_index = Teleport_S {image_speed = .4;}
if sprite_index = Throw_S {image_speed = .2;}
if sprite_index = WideShot_S {image_speed = .2;}


}

if State = S_Paused || State = S_Frozen{
  if sprite_index != Fade_In {image_speed = 0;}
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Attacking
RA = choose(1,2,3,4)
if State = S_Normal{

MM = obj_megaman //MM = MegaMan
//Buster Barrage
if sprite_index = Buster_S &amp;&amp; image_speed = 0{
   AT += 1; //AT = Attack Timer
   if AT = 8{
      image_index = 0.1;
      AT = 0;
   }
}
if sprite_index = Buster_S &amp;&amp; image_speed &gt; 0{
  BAT += 1; //BAT = Buster Attack Timer
}

if sprite_index = Buster_S &amp;&amp; BAT = 20{
      with(instance_place(60,115-24,obj_panel)){
         other.BusterX = x;
         other.BusterY = y-24;
         with(instance_create(x,y,obj_panel_indacator)) {Owner = obj_bass.id}
      }
      with(instance_place(100,139-24,obj_panel)){
         other.BusterX2 = x;
         other.BusterY2 = y-24;
         with(instance_create(x,y,obj_panel_indacator)) {Owner = obj_bass.id}
      }  
      with(instance_place(100,91-24,obj_panel)){
         other.BusterX3 = x;
         other.BusterY3 = y-24;
         with(instance_create(x,y,obj_panel_indacator)) {Owner = obj_bass.id}
      }          
}
if sprite_index = Buster_S &amp;&amp; BAT = 25{
  with(instance_place(BusterX,BusterY,obj_panel)){
    instance_create(x,y-4,obj_bass_buster_effect);
    with(instance_create(x,y-3,obj_bass_hitbox)) {Timer = 1; Power = obj_bass.Power[0];}
  }
  with(instance_place(BusterX2,BusterY2,obj_panel)){
    instance_create(x,y-4,obj_bass_buster_effect);
    with(instance_create(x,y-3,obj_bass_hitbox)) {Timer = 1; Power = obj_bass.Power[0];}
  }
  with(instance_place(BusterX3,BusterY3,obj_panel)){
    instance_create(x,y-4,obj_bass_buster_effect);
    with(instance_create(x,y-3,obj_bass_hitbox)) {Timer = 1; Power = obj_bass.Power[0];}
  }     
  with(obj_panel_indacator){
   if Owner = other.id {instance_destroy();}
  }
  BusterX = 0;
  BusterY = 0;
  BusterX2 = 0;
  BusterY2 = 0; 
  BusterX3 = 0;
  BusterY3 = 0; 
}
if sprite_index = Buster_S &amp;&amp; BAT = 30{
      with(instance_place(100,115-24,obj_panel)){
         other.BusterX = x;
         other.BusterY = y-24;
         with(instance_create(x,y,obj_panel_indacator)) {Owner = obj_bass.id}
      }
      with(instance_place(60,91-24,obj_panel)){
         other.BusterX2 = x;
         other.BusterY2 = y-24;
         with(instance_create(x,y,obj_panel_indacator)) {Owner = obj_bass.id}
      }  
      with(instance_place(60,139-24,obj_panel)){
         other.BusterX3 = x;
         other.BusterY3 = y-24;
         with(instance_create(x,y,obj_panel_indacator)) {Owner = obj_bass.id}
      }           
}
if sprite_index = Buster_S &amp;&amp; BAT = 35{
  with(instance_place(BusterX,BusterY,obj_panel)){
    instance_create(x,y-4,obj_bass_buster_effect);
    with(instance_create(x,y-3,obj_bass_hitbox)) {Timer = 1; Power = obj_bass.Power[0];}
  }
  with(instance_place(BusterX2,BusterY2,obj_panel)){
    instance_create(x,y-4,obj_bass_buster_effect);
    with(instance_create(x,y-3,obj_bass_hitbox)) {Timer = 1; Power = obj_bass.Power[0];}
  } 
  with(instance_place(BusterX3,BusterY3,obj_panel)){
    instance_create(x,y-4,obj_bass_buster_effect);
    with(instance_create(x,y-3,obj_bass_hitbox)) {Timer = 1; Power = obj_bass.Power[0];}
  }   
  with(obj_panel_indacator){
   if Owner = other.id {instance_destroy();}
  }
  BusterX = 0;
  BusterY = 0;
  BusterX2 = 0;
  BusterY2 = 0;
  BusterX3 = 0;
  BusterY3 = 0;    
}
if sprite_index = Buster_S &amp;&amp; BAT = 40{
      with(instance_place(60,115-24,obj_panel)){
         other.BusterX = x;
         other.BusterY = y-24;
         with(instance_create(x,y,obj_panel_indacator)) {Owner = obj_bass.id}
      }
      with(instance_place(20,91-24,obj_panel)){
         other.BusterX2 = x;
         other.BusterY2 = y-24;
         with(instance_create(x,y,obj_panel_indacator)) {Owner = obj_bass.id}
      } 
      with(instance_place(20,139-24,obj_panel)){
         other.BusterX3 = x;
         other.BusterY3 = y-24;
         with(instance_create(x,y,obj_panel_indacator)) {Owner = obj_bass.id}
      }           
}
if sprite_index = Buster_S &amp;&amp; BAT = 45{
  with(instance_place(BusterX,BusterY,obj_panel)){
    instance_create(x,y-4,obj_bass_buster_effect);
    with(instance_create(x,y-3,obj_bass_hitbox)) {Timer = 1; Power = obj_bass.Power[0];}
  }
  with(instance_place(BusterX2,BusterY2,obj_panel)){
    instance_create(x,y-4,obj_bass_buster_effect);
    with(instance_create(x,y-3,obj_bass_hitbox)) {Timer = 1; Power = obj_bass.Power[0];}
  } 
  with(instance_place(BusterX3,BusterY3,obj_panel)){
    instance_create(x,y-4,obj_bass_buster_effect);
    with(instance_create(x,y-3,obj_bass_hitbox)) {Timer = 1; Power = obj_bass.Power[0];}
  }     
  with(obj_panel_indacator){
   if Owner = other.id {instance_destroy();}
  }
  BusterX = 0;
  BusterY = 0;
  BusterX2 = 0;
  BusterY2 = 0; 
  BusterX3 = 0;
  BusterY3 = 0;  
}
if sprite_index = Buster_S &amp;&amp; BAT = 50{
      with(instance_place(20,115-24,obj_panel)){
         other.BusterX = x;
         other.BusterY = y-24;
         with(instance_create(x,y,obj_panel_indacator)) {Owner = obj_bass.id}
      }
      with(instance_place(60,91-24,obj_panel)){
         other.BusterX2 = x;
         other.BusterY2 = y-24;
         with(instance_create(x,y,obj_panel_indacator)) {Owner = obj_bass.id}
      } 
      with(instance_place(60,139-24,obj_panel)){
         other.BusterX3 = x;
         other.BusterY3 = y-24;
         with(instance_create(x,y,obj_panel_indacator)) {Owner = obj_bass.id}
      }             
}
if sprite_index = Buster_S &amp;&amp; BAT = 55{
  with(instance_place(BusterX,BusterY,obj_panel)){
    instance_create(x,y-4,obj_bass_buster_effect);
    with(instance_create(x,y-3,obj_bass_hitbox)) {Timer = 1; Power = obj_bass.Power[0];}
  }
  with(instance_place(BusterX2,BusterY2,obj_panel)){
    instance_create(x,y-4,obj_bass_buster_effect);
    with(instance_create(x,y-3,obj_bass_hitbox)) {Timer = 1; Power = obj_bass.Power[0];}
  } 
  with(instance_place(BusterX3,BusterY3,obj_panel)){
    instance_create(x,y-4,obj_bass_buster_effect);
    with(instance_create(x,y-3,obj_bass_hitbox)) {Timer = 1; Power = obj_bass.Power[0];}
  }    
  with(obj_panel_indacator){
   if Owner = other.id {instance_destroy();}
  }
  BusterX = 0;
  BusterY = 0;
  BusterX2 = 0;
  BusterY2 = 0; 
  BusterX3 = 0;
  BusterY3 = 0;  
}
if sprite_index = Buster_S &amp;&amp; BAT = 60{
      with(instance_place(100,91-24,obj_panel)){
         other.BusterX = x;
         other.BusterY = y-24;
         with(instance_create(x,y,obj_panel_indacator)) {Owner = obj_bass.id}
      }
      with(instance_place(100,139-24,obj_panel)){
         other.BusterX2 = x;
         other.BusterY2 = y-24;
         with(instance_create(x,y,obj_panel_indacator)) {Owner = obj_bass.id}
      }
      with(instance_place(20,139-24,obj_panel)){
         other.BusterX3 = x;
         other.BusterY3 = y-24;
         with(instance_create(x,y,obj_panel_indacator)) {Owner = obj_bass.id}
      }            
}
if sprite_index = Buster_S &amp;&amp; BAT = 65{
  with(instance_place(BusterX,BusterY,obj_panel)){
    instance_create(x,y-4,obj_bass_buster_effect);
    with(instance_create(x,y-3,obj_bass_hitbox)) {Timer = 1; Power = obj_bass.Power[0];}
  }
  with(instance_place(BusterX2,BusterY2,obj_panel)){
    instance_create(x,y-4,obj_bass_buster_effect);
    with(instance_create(x,y-3,obj_bass_hitbox)) {Timer = 1; Power = obj_bass.Power[0];}
  }
  with(instance_place(BusterX3,BusterY3,obj_panel)){
    instance_create(x,y-4,obj_bass_buster_effect);
    with(instance_create(x,y-3,obj_bass_hitbox)) {Timer = 1; Power = obj_bass.Power[0];}
  }     
  with(obj_panel_indacator){
   if Owner = other.id {instance_destroy();}
  }
  BusterX = 0;
  BusterY = 0;
  BusterX2 = 0;
  BusterY2 = 0;
  BusterX3 = 0;
  BusterY3 = 0; 
  BAT = 0;
  sprite_index = Base_S;
  if Move_Count = 3 {Move_Count = 4;}
  if Move_Count = 2 {Move_Count = 4;}
  if Move_Count = 19 {Move_Count = 20;}
}

if Move_Count = 19 &amp;&amp; sprite_index = Base_S &amp;&amp; hspeed = 0 &amp;&amp; vspeed = 0{
   image_index = 0;
   image_speed = 0;
   sprite_index = Buster_S;
}
if Move_Count = 2 &amp;&amp; sprite_index = Base_S &amp;&amp; hspeed = 0 &amp;&amp; vspeed = 0{
  if RA = 1 || RA = 4{ 
   image_index = 0;
   image_speed = 0;
   sprite_index = Buster_S;
   }
}
if Move_Count = 3 &amp;&amp; sprite_index = Base_S &amp;&amp; hspeed = 0 &amp;&amp; vspeed = 0{
   image_index = 0;
   image_speed = 0;
   sprite_index = Buster_S;
}

//Hell's Rolling
if sprite_index = HRolling_S &amp;&amp; image_index &gt; 1.9 &amp;&amp; AT &lt;= 1{
   AT += 1;
   image_index = 0;
}

if sprite_index = HRolling_S &amp;&amp; image_index &gt;= 3 &amp;&amp; image_index &lt; 3.2{
   with(instance_create(256,51,obj_bass_hrolling)) {LaneY = (91-19)}
   with(instance_create(256,103,obj_bass_hrolling)) {LaneY = (139-19); depth = -100; Bottom = true;}
}

if Move_Count = 13 &amp;&amp; sprite_index = Base_S &amp;&amp; hspeed = 0 &amp;&amp; vspeed = 0{ 
   image_index = 0;
   sprite_index = Teleport_S;
   with(instance_create(220,115,obj_virus_placeholder)){
        Owner = other.id;
        other.VChild = id;
   }   
   Direction = HR; //HR = Hell's Rolling
}
if Move_Count = 7 &amp;&amp; sprite_index = Base_S &amp;&amp; hspeed = 0 &amp;&amp; vspeed = 0{
   image_index = 0;
   sprite_index = Teleport_S;
   with(instance_create(220,115,obj_virus_placeholder)){
        Owner = other.id;
        other.VChild = id;
   }   
   Direction = HR; //HR = Hell's Rolling
}

//Dark Sword
if sprite_index = Sword_S &amp;&amp; image_index = 0{
   AT += 1;
 if AT = 2{
    with(instance_place(x-40,y,obj_panel)){
    with(instance_create(x,y,obj_panel_indacator)) {Owner = obj_bass.id}
    }
    with(instance_place(x-40,y-24,obj_panel)){
    with(instance_create(x,y,obj_panel_indacator)) {Owner = obj_bass.id}
    }
    with(instance_place(x-40,y+24,obj_panel)){
    with(instance_create(x,y,obj_panel_indacator)) {Owner = obj_bass.id}
    }
    with(instance_place(x-80,y,obj_panel)){
    with(instance_create(x,y,obj_panel_indacator)) {Owner = obj_bass.id}
    }  
    with(instance_place(x-80,y-24,obj_panel)){
    with(instance_create(x,y,obj_panel_indacator)) {Owner = obj_bass.id}
    }
    with(instance_place(x-80,y+24,obj_panel)){
    with(instance_create(x,y,obj_panel_indacator)) {Owner = obj_bass.id}
    }                  
 } 
 if AT = 10{
     image_index = 0.1
 } 
}

if sprite_index = Sword_S &amp;&amp; image_index &gt;= 2 &amp;&amp; image_index &lt; 2.4{
     with(instance_place(x-40,y,obj_panel)){
       with(instance_create(x,y-3,obj_bass_hitbox)){
        Power = obj_bass.Power[2];
        Hurt = true;
        Timer = 1;
       }
     }
     with(instance_place(x-40,y-24,obj_panel)){
       with(instance_create(x,y-3,obj_bass_hitbox)){
        Power = obj_bass.Power[2];
        Hurt = true;
        Timer = 1;
       }
     }
     with(instance_place(x-40,y+24,obj_panel)){
       with(instance_create(x,y-3,obj_bass_hitbox)){
        Power = obj_bass.Power[2];
        Hurt = true;
        Timer = 1;
       }
     }
     with(instance_place(x-80,y,obj_panel)){
       with(instance_create(x,y-3,obj_bass_hitbox)){
        Power = obj_bass.Power[2];
        Hurt = true;
        Timer = 1;
       }
     }
     with(instance_place(x-80,y-24,obj_panel)){
       with(instance_create(x,y-3,obj_bass_hitbox)){
        Power = obj_bass.Power[2];
        Hurt = true;
        Timer = 1;
       }
     }
     with(instance_place(x-80,y+24,obj_panel)){
       with(instance_create(x,y-3,obj_bass_hitbox)){
        Power = obj_bass.Power[2];
        Hurt = true;
        Timer = 1;
       }
     }                         
     
     instance_create(x-51,y+31,obj_darksword_effect);
     with(obj_panel_indacator){
       if Owner = obj_bass.id {instance_destroy();}
     }
}

if Move_Count = 11 &amp;&amp; sprite_index = Base_S &amp;&amp; hspeed = 0 &amp;&amp; vspeed = 0{
   if !place_meeting(MM.x+40,115,obj_virus) &amp;&amp; !place_meeting(MM.x+40,115,obj_object){
         image_index = 0;
         sprite_index = Teleport_S;
         with(instance_create(IP.x,IP.y,obj_virus_placeholder)){
              Owner = other.id;
             other.VChild = id;
   }         
         Direction = DS; //DS = Dark Sword
   }
}

//Gregar's Head
if sprite_index = BeastCharge_S &amp;&amp; Direction = GH{
  AT += 1;
  if AT = 1{
      with(instance_create(x,y,obj_screenshake)) {alarm[0] = 50;}
  }
  if AT = 25 &amp;&amp; Direction = GH{
     with(instance_place(x-40,y,obj_panel)){
         with(instance_create(x,y,obj_panel_indacator)) {Owner = obj_bass.id}
     }
     with(instance_place(x-80,y,obj_panel)){
         with(instance_create(x,y,obj_panel_indacator)) {Owner = obj_bass.id}
     }
     with(instance_place(x-80,y-24,obj_panel)){
         with(instance_create(x,y,obj_panel_indacator)) {Owner = obj_bass.id}
     } 
     with(instance_place(x-80,y+24,obj_panel)){
         with(instance_create(x,y,obj_panel_indacator)) {Owner = obj_bass.id}
     } 
     with(instance_place(x-120,y,obj_panel)){
         with(instance_create(x,y,obj_panel_indacator)) {Owner = obj_bass.id}
     } 
     with(instance_place(x-120,y-24,obj_panel)){
         with(instance_create(x,y,obj_panel_indacator)) {Owner = obj_bass.id}
     } 
     with(instance_place(x-120,y+24,obj_panel)){
         with(instance_create(x,y,obj_panel_indacator)) {Owner = obj_bass.id}
     }   
  }
  if AT = 35 &amp;&amp; Direction = GH{
     image_index = 0;
     sprite_index = Gregar_S;
     AT = 0;                         
  }
}

if sprite_index = Gregar_S &amp;&amp; image_index &gt;= 2{
  AT += 1;
  if AT = 10{
    instance_create(x-48,y+18,obj_gregar_flame);
    with(instance_place(x-40,y,obj_panel)){
        with(instance_create(x,y-3,obj_bass_hitbox)){
            Power = obj_bass.Power[3];
            Stay = true;
            Hurt = true;
        } 
      }
    }
  if AT = 15{  
    with(instance_place(x-80,y,obj_panel)){
      instance_create(x+2,y-13,obj_gregar_flame);
      with(instance_create(x,y-3,obj_bass_hitbox)){
          Power = obj_bass.Power[3];
          Stay = true;
          Hurt = true;
      }
    }
    with(instance_place(x-80,y-24,obj_panel)){
      instance_create(x+2,y-13,obj_gregar_flame);
      with(instance_create(x,y-3,obj_bass_hitbox)){
          Power = obj_bass.Power[3];
          Stay = true;
          Hurt = true;
      }      
    } 
    with(instance_place(x-80,y+24,obj_panel)){
      instance_create(x+2,y-13,obj_gregar_flame);
      with(instance_create(x,y-3,obj_bass_hitbox)){
          Power = obj_bass.Power[3];
          Stay = true;
          Hurt = true;
      }      
    }
  }  
  if AT = 20{  
    with(instance_place(x-120,y,obj_panel)){
      instance_create(x+2,y-13,obj_gregar_flame);
      with(instance_create(x,y-3,obj_bass_hitbox)){
          Power = obj_bass.Power[3];
          Stay = true;
          Hurt = true;
      }      
    }
    with(instance_place(x-120,y-24,obj_panel)){
      instance_create(x+2,y-13,obj_gregar_flame);
      with(instance_create(x,y-3,obj_bass_hitbox)){
          Power = obj_bass.Power[3];
          Stay = true;
          Hurt = true;
      }      
    }
    with(instance_place(x-120,y+24,obj_panel)){
      instance_create(x+2,y-13,obj_gregar_flame);
      with(instance_create(x,y-3,obj_bass_hitbox)){
          Power = obj_bass.Power[3];
          Stay = true;
          Hurt = true;
      }      
    }
 }                        
  
  if AT = 120{
     with(obj_panel_indacator){
       if Owner = obj_bass.id {instance_destroy();}
     }
     with(obj_gregar_flame) {Burn_Out = true;}
     with(obj_bass_hitbox) {instance_destroy();}
    image_index = 0;
    sprite_index = Base_S;
    Move_Count = 16;
    AT = 0;  
    Move_Timer = 40;
  }
}

if Move_Count = 15 &amp;&amp; sprite_index = Base_S &amp;&amp; hspeed = 0 &amp;&amp; vspeed = 0{
   if RA = 3 || RA = 4{  
     if !place_meeting(140,115,obj_virus) &amp;&amp; !place_meeting(140,115,obj_object){
       image_index = 0;
       sprite_index = Teleport_S;
         with(instance_create(IP.x,IP.y,obj_virus_placeholder)){
              Owner = other.id;
             other.VChild = id;
   }        
       Direction = GH; //GH = Gregar's Head
     }
     }
}

//Falzar's Head
if sprite_index = BeastCharge_S &amp;&amp; Direction = FH{
  AT += 1;
  if AT = 1{
      with(instance_create(x,y,obj_screenshake)) {alarm[0] = 50;}
  }  
  if AT = 25 &amp;&amp; Direction = FH{
     with(instance_place(x-40,y,obj_panel)){
         with(instance_create(x,y,obj_panel_indacator)) {Owner = obj_bass.id}
     }
     with(instance_place(x-80,y,obj_panel)){
         with(instance_create(x,y,obj_panel_indacator)) {Owner = obj_bass.id}
     } 
      with(instance_place(x-120,y,obj_panel)){
         with(instance_create(x,y,obj_panel_indacator)) {Owner = obj_bass.id}
     } 
     with(instance_place(x-120,y-24,obj_panel)){
         with(instance_create(x,y,obj_panel_indacator)) {Owner = obj_bass.id}
     } 
     with(instance_place(x-120,y+24,obj_panel)){
         with(instance_create(x,y,obj_panel_indacator)) {Owner = obj_bass.id}
     }   
  }
  if AT = 35 &amp;&amp; Direction = FH{
     image_index = 0;
     sprite_index = Falzar_S;
     AT = 0;                         
  }
}

if sprite_index = Falzar_S &amp;&amp; image_index &gt;= 2{
  AT += 1;
  if AT = 10{
    instance_create(52,108,obj_falzar_wind);
    with(instance_place(x-40,y,obj_panel)){
      with(instance_create(x,y-3,obj_bass_hitbox)){
        Power = obj_bass.Power[4];
        Hurt = true;
        Stay = true;
      }
    }
    with(instance_place(x-80,y,obj_panel)){
      with(instance_create(x,y-3,obj_bass_hitbox)){
        Power = obj_bass.Power[4];
        Hurt = true;
        Stay = true;
      }
    } 
    with(instance_place(x-120,y,obj_panel)){
      with(instance_create(x,y-3,obj_bass_hitbox)){
        Power = obj_bass.Power[4];
        Hurt = true;
        Stay = true;
      }
    }
    with(instance_place(x-120,y-24,obj_panel)){
      with(instance_create(x,y-3,obj_bass_hitbox)){
        Power = obj_bass.Power[4];
        Hurt = true;
        Stay = true;
      }
    }
    with(instance_place(x-120,y+24,obj_panel)){
      with(instance_create(x,y-3,obj_bass_hitbox)){
        Power = obj_bass.Power[4];
        Hurt = true;
        Stay = true;
      }
    }                
  }
  if AT = 120{
     with(obj_panel_indacator){
       if Owner = obj_bass.id {instance_destroy();}
     }
     with(obj_bass_hitbox) {instance_destroy();}
     with(obj_falzar_wind) {instance_destroy();}
     image_index = 2;
     image_speed = 0;
     Falzar_Stop = true;
  }
  if AT = 145{
    image_index = 0;
    sprite_index = Base_S;
    Move_Count = 16;
    AT = 0;  
    Move_Timer = 40;  
    Falzar_Stop = false;
  }
}

if Move_Count = 15 &amp;&amp; sprite_index = Base_S &amp;&amp; hspeed = 0 &amp;&amp; vspeed = 0{
  if RA = 1 || RA = 2{  
    if !place_meeting(140,115,obj_virus) &amp;&amp; !place_meeting(140,115,obj_object){
       image_index = 0;
       sprite_index = Teleport_S;
         with(instance_create(IP.x,IP.y,obj_virus_placeholder)){
              Owner = other.id;
             other.VChild = id;
   }        
       Direction = FH; //Falzar's Head
    }
    }
}

//Shadow Flame
if Move_Count = 22 &amp;&amp; sprite_index = Base_S &amp;&amp; hspeed = 0 &amp;&amp; vspeed = 0{
    image_index = 0;
    sprite_index = Throw_S;
}

if sprite_index = Throw_S &amp;&amp; image_index &gt;= 3 &amp;&amp; image_index &lt; 3.3{
   if x = 218{
     if !place_meeting(x,y,obj_object) &amp;&amp; place_meeting(x-40,y,obj_panel_blue_mask){
         x -= 40;
     }
   }
   switch(y){
     case 80:
     with(instance_place(x,y+24,obj_panel)){
          instance_create(x+2,y-28,obj_shadow_flame);
     }
     with(instance_place(x,y-24,obj_panel)){
          instance_create(x+2,y-28,obj_shadow_flame);
     } 
     with(instance_place(x+40,y,obj_panel)){
          with(instance_create(x+2,y-28,obj_shadow_flame)){
            IS = .35
          }
     }         
     break;
     
     case 104:
     with(instance_place(x,y-24,obj_panel)){
          instance_create(x+2,y-28,obj_shadow_flame);
     }  
     with(instance_place(x,y-48,obj_panel)){
          instance_create(x+2,y-28,obj_shadow_flame);
     }
     with(instance_place(x+40,y,obj_panel)){
          with(instance_create(x+2,y-28,obj_shadow_flame)){
            IS = .35
          }
     }       
     break;
     
     case 56:
     with(instance_place(x,y+24,obj_panel)){
          instance_create(x+2,y-28,obj_shadow_flame);
     }
     with(instance_place(x,y+48,obj_panel)){
          instance_create(x+2,y-28,obj_shadow_flame);
     }
     with(instance_place(x+40,y,obj_panel)){
          with(instance_create(x+2,y-28,obj_shadow_flame)){
            IS = .35
          }
     }     
     break;                
   }
}

//Move_Count Management
if Move_Count &gt; 22 {Move_Count = 0;}


}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Death
Base_Flash = spr_bass_hurt_flash

if State = Dead &amp;&amp; obj_megaman.State = S_Normal{
  image_speed = 0;
  sprite_index = Base_Flash;

  
  
  if Ex_Count = 0 &amp;&amp; Ex_true{
     Ex_true = false;
     with(instance_create(x-11,y+6,obj_expolsion_effect)){
        Owner = other.id;
        Ex_Count = true;
     }    
  }
   if Ex_Count = 1 &amp;&amp; Ex_true{
     Ex_true = false;
     with(instance_create(x+13,y-12,obj_expolsion_effect)){
        Owner = other.id;
        Ex_Count = true;
     }    
  }
   if Ex_Count = 2 &amp;&amp; Ex_true{
     instance_destroy();
     Ex_true = false;
     with(instance_create(x+5,y+9,obj_expolsion_effect)){
        Owner = other.id;
        Ex_Count = true;
     }    
  }

  }
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>604</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_inherited</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
    </event>
    <event eventtype="7" enumb="7">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if sprite_index = Buster_S {image_index = 1}

if sprite_index = HRolling_S{
   image_index = 0;
   sprite_index = Base_S;
   if Move_Count = 7 {Move_Count = 8;}
   if Move_Count = 13 {Move_Count = 14;}
   AT = 0;
}

if sprite_index = Sword_S{
   x = SaveX;
   y = SaveY;
   image_index = 0;
   sprite_index = Base_S;
   Move_Count = 12;
   AT = 0;
}

if sprite_index = Gregar_S{
  image_index = 2;
}
if sprite_index = Falzar_S{
  image_index = 2;
}

if sprite_index = Throw_S{
  image_index = 0;
  sprite_index = Base_S;
  Move_Count += 1;
}

//Teleporting
if sprite_index = Teleport_S{
   switch(Direction){
      case HR:
      if !place_meeting(220,115,obj_virus) &amp;&amp; !place_meeting(220,115,obj_object){
          x = instance_place(220,115,obj_panel).x-2;
          y = instance_place(220,115,obj_panel).y-(35+24);
          image_index = 0;
          sprite_index = HRolling_S;
          }
          break;
          
          case DS:
          SaveX = x;
          SaveY = y;
          x = instance_place(MM.x+40,115,obj_panel).x-2;
          y = 115-35
          image_index = 0;
          image_speed = 0;
          sprite_index = Sword_S;
          break;
          
          case GH:
          SaveX = x;
          SaveY = y;
          x = instance_place(140,115,obj_panel).x-2;
          y = instance_place(140,115,obj_panel).y-(35+24);
          image_index = 0;
          sprite_index = BeastCharge_S;
          break;
          
          case FH:
          SaveX = x;
          SaveY = y;
          x = instance_place(140,115,obj_panel).x-2;
          y = instance_place(140,115,obj_panel).y-(35+24);
          image_index = 0;
          sprite_index = BeastCharge_S;
          break;
   }
   with(VChild){
       instance_destroy();
   }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>604</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_inherited</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_self();

if Hp &gt; 0 &amp;&amp; sprite_index != Fade_In &amp;&amp; image_alpha != 0{
draw_set_font(obj_field.EnemyHp_Font);
draw_text(x-6,y+33,round(Hp));
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
