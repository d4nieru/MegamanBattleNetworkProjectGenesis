<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_gutsman_boss_base</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>obj_virus</parentName>
  <maskName>spr_gutsman_boss_base</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>VChild = noone;
Mask = spr_gutsman_boss_base;
Hitbox_Touch = false;
Damage = 0;
Ex_Count = 0;
Ex_true = true;
Semi_Hurt = false;
Hurt = false;
Hurt_Timer = 0;
Damage_Flash = false;
DF_Direction = 0;
AT = 0;
Shield = false;

//Fade In Start
image_speed = 0;
image_index = 0;

//Stats
scr_virus_stats("GutsMan",E_None);
MaxHp = 500;
Hp = MaxHp;
spd = .4;
Power[0] = 10;
Power[1] = 5;
Power[2] = 30;
Power[3] = 20;

//Moving Variables
MMT = 70;
Move_Timer = MMT;
Move_Count = 0;
Direction = 0;
Up = 1;
Down = 2;
Left = 3;
Right = 4;
Return = 5;

//Attacking Variables
ShockWave = 1;
GutPunch = 2;
Buster = 3;
Geddon = 4;
CrackOut = 5;

ShockWave_A = false;
GutPunch_A = false;
Buster_A = false;
Geddon_A = false;
CrackOut_A = false;

MHT = 10;
Hammer_Timer = MHT;
Shuffle = true;
MBC = 3;
Buster_Count = MBC;
Geddon_Turn = true;

//States
State = 0;
Normal = 1;
Paused = 1;
Frozen = 1;
Dead = 5;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>604</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_inherited</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>with(VChild){
 instance_destroy();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Damage
if Hp &lt;= 0 {State = Dead}

if (Damage * -1) &gt;= Hp{
   Hp = 0;
} 
if State != Frozen &amp;&amp; State != Paused {
   if Hp = 0 {State = Dead;}
} 

if Hp &gt; MaxHp {Hp = MaxHp}
if Hp &lt; 0 {Hp = 0}
 
if Damage &gt; 0{
   Hp += 1;
   Damage -= 1;
}
if Damage &lt; 0{
   Hp -= 1;
   Damage += 1;
}


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Animation Variables
if Hp &gt; 0 {State = obj_megaman.State;}
scr_weakness_system();
scr_battle_damage_gutsman();
if place_meeting(x,y,obj_panel){
  depth = instance_place(x,y,obj_panel).y*-1;
}
Base_S = spr_gutsman_boss_base;
Fade_In = spr_gutsman_boss_fadein;
Buster_S = spr_gutsman_boss_gutbuster;
GutPunch_S = spr_gutsman_boss_gutpunch;
Hammer_S = spr_gutsman_boss_hammer;
Slide_S = spr_gutsman_boss_slide;
Hurt_S = spr_gutsman_boss_hurt;
Hurt_Flash_S = spr_gutsman_boss_hurt_flash;

if State = S_Normal{
//Animation Speeds
if sprite_index = Base_S &amp;&amp; image_index = 0 {image_speed = 0;}
if sprite_index = Base_S &amp;&amp; image_index != 0 {image_speed = spd;}
if sprite_index = Buster_S {image_speed = .15;}
if sprite_index = GutPunch_S {image_speed = .25;}
if sprite_index = Hammer_S {image_speed = .2;}
if sprite_index = Slide_S {image_speed = .2;}
if sprite_index = Hurt_S || sprite_index = Hurt_Flash_S {image_speed = 0;}
}

if State != S_Normal{
   if sprite_index != Fade_In {image_speed = 0;}
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Movement
IP = instance_place(x,y,obj_panel);
RM = choose(Up,Down,Left,Right) // RM = Random Movement

if State = S_Normal{

if sprite_index = Base_S &amp;&amp; image_index = 0{
     Move_Timer -= 1;
     if Move_Timer = 0{
         switch(RM){
              case Up:
              if place_meeting(x,y-24,obj_panel_blue_mask) &amp;&amp; !place_meeting(x,y-24,obj_object) &amp;&amp; !place_meeting(x,y-24,obj_virus){
                with(instance_create(IP.x,IP.y-24,obj_virus_placeholder)){
                    Owner = other.id;
                    other.VChild = id;
                  }                  
                  Direction = Up;
                  image_index = 0.1;
                  Move_Timer = MMT;
              } else {Move_Timer = 1;}
              break;
              
              case Down:
              if place_meeting(x,y+24,obj_panel_blue_mask) &amp;&amp; !place_meeting(x,y+24,obj_object) &amp;&amp; !place_meeting(x,y+24,obj_virus){
                with(instance_create(IP.x,IP.y+24,obj_virus_placeholder)){
                    Owner = other.id;
                    other.VChild = id;
                  }                   
                  Direction = Down;
                  image_index = 0.1;
                  Move_Timer = MMT;
              } else {Move_Timer = 1;}
              break;  
              
              case Left:
              if place_meeting(x-40,y,obj_panel_blue_mask) &amp;&amp; !place_meeting(x-40,y,obj_object) &amp;&amp; !place_meeting(x-40,y,obj_virus){
                with(instance_create(IP.x-40,IP.y,obj_virus_placeholder)){
                    Owner = other.id;
                    other.VChild = id;
                  }                   
                  Direction = Left;
                  image_index = 0.1;
                  Move_Timer = MMT;
              } else {Move_Timer = 1;}
              break; 
              
              case Right:
              if place_meeting(x+40,y,obj_panel_blue_mask) &amp;&amp; !place_meeting(x+40,y,obj_object) &amp;&amp; !place_meeting(x+40,y,obj_virus){
                with(instance_create(IP.x+40,IP.y,obj_virus_placeholder)){
                    Owner = other.id;
                    other.VChild = id;
                  }                   
                  Direction = Right;
                  image_index = 0.1;
                  Move_Timer = MMT;
              } else {Move_Timer = 1;}
              break;                                       
         }
     }
}

}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Attacking
Megaman = obj_megaman;
if Shuffle{
   RA2 = choose(ShockWave,GutPunch)
   RA3 = choose(GutPunch,Buster,ShockWave)
}

if State = S_Normal{

//Attack State
if ShockWave_A{
    sprite_index = Hammer_S;
    if sprite_index = Hammer_S &amp;&amp; image_index &gt;= 3 &amp;&amp; image_index &lt; 3.3{
        //Create the ShockWave
        //with(instance_create(0,0,obj_screenshake)) {alarm[0] = 20;}
        with(instance_create(x-35,y+9,obj_gutsman_boss_shockwave)){
            //Power = other.Power[0];
        }
    }
    if sprite_index = Hammer_S &amp;&amp; image_index = 4{
       Hammer_Timer -= 1;
       if Hammer_Timer = 0{
           Hammer_Timer = MHT;
           ShockWave_A = false;
           Shuffle = true;
           Move_Count += 1
           image_index = 0;
           image_speed = 0;
           sprite_index = Base_S;
       }
    }
}

if Geddon_A{
    sprite_index = Hammer_S;
    if sprite_index = Hammer_S &amp;&amp; image_index &gt;= 3 &amp;&amp; image_index &lt; 3.3{
       if instance_place(x-40,y,obj_panel).Panel_Status != 3 &amp;&amp; instance_place(x-40,y,obj_panel).Panel_Status != 4{
           with(instance_create(0,0,obj_screenshake)) {alarm[0] = 25;}
           with(obj_panel_red){
              if Panel_Status != PS_Cracked &amp;&amp; Panel_Status != PS_Broke &amp;&amp; Panel_Status != PS_Clear {Cracked = true;}
              if Panel_Status = PS_Cracked &amp;&amp; !place_meeting(x,y,obj_megaman) {Broke = true;}
               }
       }    
    }
    if sprite_index = Hammer_S &amp;&amp; image_index = 4{
       Hammer_Timer -= 1;
       if Hammer_Timer = 0{
           Hammer_Timer = MHT;
           Geddon_A = false;
           Shuffle = true;
           Move_Count += 1
           image_index = 0;
           image_speed = 0;
           sprite_index = Base_S;
       }
    }      
}

if GutPunch_A{
   sprite_index = GutPunch_S;
   if sprite_index = GutPunch_S &amp;&amp; image_index &gt;= 4 &amp;&amp; image_index &lt; 4.3{
      with(instance_create(IP.x-40,IP.y-3,obj_gutsman_hitbox)){
           Power = other.Power[2];
           Timer = 1;
           Chip_Effect = CE_BlowBack;
        }  //Create the HitBox
   }
   if sprite_index = GutPunch_S &amp;&amp; image_index &gt;= 6.7{
       GutPunch_A = false;
       Direction = Return;
       image_index = 1;
       sprite_index = Base_S
   }
}

if Buster_A{
    sprite_index = Buster_S;
    if sprite_index = Buster_S &amp;&amp; image_index &gt;= 1 &amp;&amp; image_index &lt; 1.1{
        with(instance_create(x-30,y-10,obj_gutsman_bullet)){
              //Power = other.Power[1];
           }   //Create Bullet
    }
}

//Steps to Attack
if Move_Count = 3{
      if sprite_index = Base_S &amp;&amp; image_index = 0{
           TargetY = instance_place(Megaman.x,Megaman.y,obj_panel).y-19;
           if !place_meeting(x,TargetY,obj_object) &amp;&amp; place_meeting(x,TargetY,obj_panel_blue_mask) &amp;&amp; !place_meeting(x,TargetY,obj_virus){
                with(instance_create(IP.x,TargetY+19,obj_virus_placeholder)){
                    Owner = other.id;
                    other.VChild = id;
                  }                 
                y = TargetY;
                image_index = 0;
                ShockWave_A = true;
           }
      }
}

if Move_Count = 6{
    Shuffle = false;
    switch(RA2){
        case ShockWave:
      if sprite_index = Base_S &amp;&amp; image_index = 0{
           TargetY = instance_place(Megaman.x,Megaman.y,obj_panel).y-19;
           if !place_meeting(x,TargetY,obj_object) &amp;&amp; place_meeting(x,TargetY,obj_panel_blue_mask) &amp;&amp; !place_meeting(x,TargetY,obj_virus){
                with(instance_create(IP.x,TargetY+19,obj_virus_placeholder)){
                    Owner = other.id;
                    other.VChild = id;
                  }                 
                y = TargetY;
                image_index = 0;
                ShockWave_A = true;
           }
      }
      break;
      
        case GutPunch:
        if sprite_index = Base_S &amp;&amp; image_index = 0 &amp;&amp; Move_Timer = MMT/2{
            TargetX = instance_place(Megaman.x,Megaman.y,obj_panel).x+40-5;
            TargetY = instance_place(Megaman.x,Megaman.y,obj_panel).y-19;
            if !place_meeting(TargetX,TargetY,obj_object) &amp;&amp; instance_place(TargetX,TargetY,obj_panel).Panel_Status != 3 &amp;&amp; instance_place(TargetX,TargetY,obj_panel).Panel_Status != 4 &amp;&amp; !place_meeting(TargetX,TargetY,obj_virus){
            with(instance_create(IP.x,IP.y,obj_virus_placeholder)){
                Owner = other.id;
                other.VChild = id;
            }                
               SaveX = x;
               SaveY = y;
               x = TargetX;
               y = TargetY;
               image_index = 0;
               GutPunch_A = true;
            }
        }
        break;        
    }
}

if Move_Count = 9{
    Shuffle = false;
    switch(RA3){
        case ShockWave:
      if sprite_index = Base_S &amp;&amp; image_index = 0{
           TargetY = instance_place(Megaman.x,Megaman.y,obj_panel).y-19;
           if !place_meeting(x,TargetY,obj_object) &amp;&amp; place_meeting(x,TargetY,obj_panel_blue_mask) &amp;&amp; !place_meeting(x,TargetY,obj_virus){
                with(instance_create(IP.x,TargetY+19,obj_virus_placeholder)){
                    Owner = other.id;
                    other.VChild = id;
                  }                
                 y = TargetY;
                image_index = 0;
                ShockWave_A = true;
           }
      }
      break;
      
        case GutPunch:
        if sprite_index = Base_S &amp;&amp; image_index = 0 &amp;&amp; Move_Timer = MMT/2{
            TargetX = instance_place(Megaman.x,Megaman.y,obj_panel).x+40-5;
            TargetY = instance_place(Megaman.x,Megaman.y,obj_panel).y-19;
            if !place_meeting(TargetX,TargetY,obj_object) &amp;&amp; instance_place(TargetX,TargetY,obj_panel).Panel_Status != 3 &amp;&amp; instance_place(TargetX,TargetY,obj_panel).Panel_Status != 4 &amp;&amp; !place_meeting(TargetX,TargetY,obj_virus){
                with(instance_create(IP.x,IP.y,obj_virus_placeholder)){
                    Owner = other.id;
                    other.VChild = id;
                  }                
               SaveX = x;
               SaveY = y;
               x = TargetX;
               y = TargetY;
               image_index = 0;
               GutPunch_A = true;
            }
        }  
        break; 
        
        case Buster:
        if sprite_index = Base_S &amp;&amp; image_index = 0{
           TargetY = instance_place(Megaman.x,Megaman.y,obj_panel).y-19;
           if !place_meeting(x,TargetY,obj_object) &amp;&amp; place_meeting(x,TargetY,obj_panel_blue_mask) &amp;&amp; !place_meeting(x,TargetY,obj_virus){
                with(instance_create(IP.x,TargetY+19,obj_virus_placeholder)){
                    Owner = other.id;
                    other.VChild = id;
                  }                
               y = TargetY;
               image_index = 0;
               Buster_A = true;
           }
        }  
        break;   
    }
}

if Move_Count = 13{
 if Geddon_Turn{ 
  if sprite_index = Base_S &amp;&amp; image_index = 0{
     TargetX = instance_place(140,115,obj_panel).x-5;
     TargetY = instance_place(140,115,obj_panel).y-24-19;
     if !place_meeting(TargetX,TargetY,obj_object) &amp;&amp; place_meeting(TargetX,TargetY,obj_panel_blue_mask) &amp;&amp; !place_meeting(TargetX,TargetY,obj_virus){
     with(instance_create(TargetX+5,TargetY+19,obj_virus_placeholder)){
           Owner = other.id;
           other.VChild = id;
     }          
         x = TargetX;
         y = TargetY;
         Geddon_Turn = false;
         image_index = 0;
         Geddon_A = true;
         exit;
     }
  }
  }
  if !Geddon_Turn{
        if sprite_index = Base_S &amp;&amp; image_index = 0 &amp;&amp; Move_Timer = MMT/2{
            TargetX = instance_place(Megaman.x,Megaman.y,obj_panel).x+40-5;
            TargetY = instance_place(Megaman.x,Megaman.y,obj_panel).y-19;
            if !place_meeting(TargetX,TargetY,obj_object) &amp;&amp; instance_place(TargetX,TargetY,obj_panel).Panel_Status != 3 &amp;&amp; instance_place(TargetX,TargetY,obj_panel).Panel_Status != 4 &amp;&amp; !place_meeting(TargetX,TargetY,obj_virus){
                with(instance_create(IP.x,IP.y,obj_virus_placeholder)){
                    Owner = other.id;
                    other.VChild = id;
                  }                
               SaveX = x;
               SaveY = y;
               x = TargetX;
               y = TargetY;
               Geddon_Turn = true;
               image_index = 0;
               GutPunch_A = true;
               exit;
            }
        }      
  }   
}

if Move_Count = 16{
        if sprite_index = Base_S &amp;&amp; image_index = 0{
           TargetY = instance_place(Megaman.x,Megaman.y,obj_panel).y-19;
           if !place_meeting(x,TargetY,obj_object) &amp;&amp; place_meeting(x,TargetY,obj_panel_blue_mask) &amp;&amp; !place_meeting(x,TargetY,obj_virus){
     with(instance_create(IP.x,TargetY+19,obj_virus_placeholder)){
           Owner = other.id;
           other.VChild = id;
     }                 
               y = TargetY;
               image_index = 0;
               Buster_A = true;
           }
        }  
}

}
//Move_Count Reset
if Move_Count &gt; 17 {Move_Count = 0}


</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Death
if State = Dead &amp;&amp; obj_megaman.State = S_Normal{
  image_speed = 0;
  sprite_index = Hurt_Flash_S;
  image_alpha = 1;

  
  
  if Ex_Count = 0 &amp;&amp; Ex_true{
     Ex_true = false;
     with(instance_create(x-11,y+6,obj_expolsion_effect)){
        Owner = other.id;
        Ex_Count = true;
     }    
  }
   if Ex_Count = 1 &amp;&amp; Ex_true{
     Ex_true = false;
     with(instance_create(x+13,y-12,obj_expolsion_effect)){
        Owner = other.id;
        Ex_Count = true;
     }    
  }
   if Ex_Count = 2 &amp;&amp; Ex_true{
     instance_destroy();
     Ex_true = false;
     with(instance_create(x+5,y+9,obj_expolsion_effect)){
        Owner = other.id;
        Ex_Count = true;
     }    
  }

  }
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>604</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_inherited</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
    </event>
    <event eventtype="7" enumb="7">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Direction
if sprite_index = Base_S{
     switch(Direction){
         case Up:
         y-=24;
         image_index = 0;
         Direction = 0;
         Move_Count += 1;
         break;
         
         case Down:
         y+=24;
         image_index = 0;
         Direction = 0;
         Move_Count += 1;
         break;
         
         case Left:
         x-=40;
         image_index = 0;
         Direction = 0;
         Move_Count += 1;
         break;    
         
         case Right:
         x+=40;
         image_index = 0;
         Direction = 0;
         Move_Count += 1;
         break; 
         
         case Return:
         x = SaveX;
         y = SaveY;
         Shuffle = true;
         Move_Count += 1;
         image_index = 0;
         image_speed = 0;
         sprite_index = Base_S;   
         break;                            
     }
}

//Attacking
if sprite_index = Hammer_S{
     image_index = 4;
}

if sprite_index = Buster_S{
   if Buster_Count != 0{
      Buster_Count -= 1;
   }
   if Buster_Count = 0{
        Buster_A = false;
        Shuffle = true;
        Buster_Count = MBC;
        Move_Count += 1;
        image_index = 0;
        image_speed = 0;
        sprite_index = Base_S;   
   }
}

with(VChild){
    instance_destroy();
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>604</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_inherited</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_self();

if Hp &gt; 0 &amp;&amp; sprite_index != Fade_In &amp;&amp; image_alpha != 0{
draw_set_font(obj_field.EnemyHp_Font);
draw_text(x-2,y+28,round(Hp));
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
