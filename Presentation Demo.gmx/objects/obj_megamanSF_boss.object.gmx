<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_megamanSF_boss_base</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>obj_virus</parentName>
  <maskName>spr_megamanSF_boss_base</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>VChild = noone;
Mask = spr_megamanSF_boss_base;
Hitbox_Touch = false;
Damage = 0;
Ex_Count = 0;
Ex_true = true;
Semi_Hurt = false;
Hurt = false;
Hurt_Timer = 0;
Damage_Flash = false;
DF_Direction = 0;
AT = 0;
Shuffle = true;
SaveX = 0;
SaveY = 0;

//Fade In Start
image_speed = 0;
image_index = 0;

//Shield Boost
Shield_Boost = 0;

//Stats
scr_virus_stats("MegaManSF",E_None);
MaxHp = 800;
Hp = MaxHp;
spd = .4;


//Moving Variables
MMT = 20;
Move_Timer = MMT;
Move_Count = 0;
Direction = 0;
NoMove = -1;
Up = 1;
Down = 2;
Left = 3;
Right = 4;
Return = 5;
LongSword1 = 6;
LongSword2 = 7;
StunBomb = 8;

//Attacking Variables
Buster_Barrage = 1;
SF_Shield = 2;
Step_LongSword = 3;
Stun_Bomb = 4;
Flame_Head = 5;

MBC = 5;
Buster_Count = MBC
Summon_OmegaXis = false;

//States
State = 0;
Normal = 1;
Paused = 1;
Frozen = 1;
Dead = 5;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>604</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_inherited</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>with(VChild){
 instance_destroy();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Damage
if Hp &lt;= 0 {State = Dead}

if (Damage * -1) &gt;= Hp{
   Hp = 0;
} 
if State != Frozen &amp;&amp; State != Paused {
   if Hp = 0 {State = Dead;}
} 

if Hp &gt; MaxHp {Hp = MaxHp}
if Hp &lt; 0 {Hp = 0}
 
if Damage &gt; 0{
   Hp += 1;
   Damage -= 1;
}
if Damage &lt; 0{
   Hp -= 1;
   Damage += 1;
}


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Animation Variables
if Hp &gt; 0 {State = obj_megaman.State;}
scr_weakness_system();
scr_battle_damage_megamanSF();
if place_meeting(x,y,obj_panel){
  depth = instance_place(x,y,obj_panel).y*-1-1;
}
Base_S = spr_megamanSF_boss_base;
Fade_In = spr_megamanSF_boss_fadein;
Buster_S = spr_megamanSF_boss_buster;
Sword_S = spr_megamanSF_boss_sword;
Throw_S = spr_megamanSF_boss_throw;
Flame_S = spr_megamanSF_boss_flamehead;
Block_S = spr_megamanSF_boss_block;
Hurt_S = spr_megamanSF_boss_hurt;
Hurt_Flash_S = spr_megamanSF_boss_hurt_flash;


if State = S_Normal{
//Animation Speeds
if sprite_index = Base_S &amp;&amp; image_index = 0 {image_speed = 0;}
if sprite_index = Base_S &amp;&amp; image_index &gt; 0 {image_speed = spd;}
if sprite_index = Buster_S {image_speed = .35;}
if sprite_index = Throw_S {image_speed = .25;}
if sprite_index = Sword_S &amp;&amp; image_index &gt; 0 {image_speed = .5;}
if sprite_index = Sword_S &amp;&amp; image_index = 0 {image_speed = 0;}
if sprite_index = Flame_S {image_speed = .3;}
if sprite_index = Block_S &amp;&amp; image_index = 1 {image_speed = 0;}
if sprite_index = Block_S &amp;&amp; image_index != 1 {image_speed = .2;}
if sprite_index = Hurt_S || sprite_index = Hurt_Flash_S {image_speed = 0;}
}

if State != S_Normal{
   if sprite_index != Fade_In {image_speed = 0;}
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Movement
IP = instance_place(x,y,obj_panel);
RM = choose(Up,Down,Left,Right,NoMove) // RM = Random Movement

if State = S_Normal{

if sprite_index = Base_S &amp;&amp; image_index = 0{
     Move_Timer -= 1;
     if Move_Timer = 0{
         switch(RM){
              case NoMove:
              Move_Count += 1;
              Move_Timer = MMT;
              break;
              
              case Up:
              if place_meeting(x,y-24,obj_panel_blue_mask) &amp;&amp; !place_meeting(x,y-24,obj_object) &amp;&amp; !place_meeting(x,y-24,obj_virus){
                with(instance_create(IP.x,IP.y-24,obj_virus_placeholder)){
                    Owner = other.id;
                    other.VChild = id;
                  }                  
                  Direction = Up;
                  image_index = 0.1;
                  Move_Timer = MMT;
              } else {Move_Timer = 1;}
              break;
              
              case Down:
              if place_meeting(x,y+24,obj_panel_blue_mask) &amp;&amp; !place_meeting(x,y+24,obj_object) &amp;&amp; !place_meeting(x,y+24,obj_virus){
                with(instance_create(IP.x,IP.y+24,obj_virus_placeholder)){
                    Owner = other.id;
                    other.VChild = id;
                  }                   
                  Direction = Down;
                  image_index = 0.1;
                  Move_Timer = MMT;
              } else {Move_Timer = 1;}
              break;  
              
              case Left:
              if place_meeting(x-40,y,obj_panel_blue_mask) &amp;&amp; !place_meeting(x-40,y,obj_object) &amp;&amp; !place_meeting(x-40,y,obj_virus){
                with(instance_create(IP.x-40,IP.y,obj_virus_placeholder)){
                    Owner = other.id;
                    other.VChild = id;
                  }                   
                  Direction = Left;
                  image_index = 0.1;
                  Move_Timer = MMT;
              } else {Move_Timer = 1;}
              break; 
              
              case Right:
              if place_meeting(x+40,y,obj_panel_blue_mask) &amp;&amp; !place_meeting(x+40,y,obj_object) &amp;&amp; !place_meeting(x+40,y,obj_virus){
                with(instance_create(IP.x+40,IP.y,obj_virus_placeholder)){
                    Owner = other.id;
                    other.VChild = id;
                  }                   
                  Direction = Right;
                  image_index = 0.1;
                  Move_Timer = MMT;
              } else {Move_Timer = 1;}
              break;                                       
         }
     }
}

}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Attacking
Power[0] = 3 + Shield_Boost;
Power[1] = 20 + Shield_Boost*5;
Power[2] = 25 + Shield_Boost*5;
Power[3] = 30 + Shield_Boost*5; 

MM = obj_megaman;
MMP = instance_place(MM.x,MM.y,obj_panel)

if Shuffle{
   RA1 = choose(Buster_Barrage,SF_Shield,Buster_Barrage,SF_Shield,Step_LongSword)
   RA2 = choose(Buster_Barrage,Buster_Barrage,SF_Shield,0,0,0,Flame_Head,SF_Shield)
   RA3 = choose(Stun_Bomb,Stun_Bomb,Stun_Bomb,Step_LongSword)
   RA4 = choose(Flame_Head,Step_LongSword,Flame_Head,Flame_Head,Stun_Bomb)

}
//Attack Timer
if sprite_index != Sword_S{
   Sword_Timer = 0;
   Sword_Effect = true;
}
if sprite_index != Block_S{
  Block_Timer = 0;
  Shield = false;
  Shield_Gain = true;
}
if sprite_index != Buster_S{
  Buster_Count = MBC;
  Buster_Shot = true;
}
if sprite_index != Flame_S{
  Flame_Timer = 0;
  Flame_Summon = true;
}
if sprite_index != Throw_S{
  Throw_SFX = true;
}

if State = S_Normal{

if sprite_index = Sword_S &amp;&amp; image_index = 0{
  Sword_Timer += 1;
  if Sword_Timer = (room_speed/2)-15{
     Sword_Timer = 0;
     image_index = 0.1;
  }
}
if sprite_index = Block_S &amp;&amp; image_index = 1{
  Block_Timer += 1;
  if Block_Timer = (room_speed/2)+(10){
     Block_Timer = 0;
     image_index = 1.1;
  }
}
if sprite_index = Flame_S{
   Flame_Timer += 1;
   if Flame_Timer = room_speed{
      Flame_Timer = 0;
      image_speed = 0;
      image_index = 0;
      sprite_index = Base_S;
      Move_Count += 1;
   }
}

//Attack State

if Move_Count = 3 &amp;&amp; sprite_index = Base_S &amp;&amp; image_index = 0{
   Shuffle = false;
   switch(RA1){
       case Buster_Barrage:
       image_index = 0;
       sprite_index = Buster_S
       break;
       
       case SF_Shield:
       image_index = 0;
       sprite_index = Block_S
       break;
       
       case Step_LongSword:
      if place_meeting(MM.x+40,MM.y,obj_panel){ 
       if instance_place(MM.x+40,MM.y,obj_panel).Panel_Status != 3 &amp;&amp; instance_place(MM.x+40,MM.y,obj_panel).Panel_Status != 4 &amp;&amp; !place_meeting(MM.x+40,MM.y,obj_object) &amp;&amp; !place_meeting(MM.x+40,MM.y,obj_virus){
          image_index = 0.1;
          TargetX = MMP.x+40-2
          TargetY = MMP.y-20
          SaveX = x;
          SaveY = y;
          Direction = LongSword1;
          break;
       }
       }else{
      if place_meeting(MM.x+80,MM.y,obj_panel){
       if instance_place(MM.x+80,MM.y,obj_panel).Panel_Status != 3 &amp;&amp; instance_place(MM.x+80,MM.y,obj_panel).Panel_Status != 4 &amp;&amp; !place_meeting(MM.x+80,MM.y,obj_object) &amp;&amp; !place_meeting(MM.x+80,MM.y,obj_virus){
          image_index = 0.1;
          TargetX = MMP.x+80-2
          TargetY = MMP.y-20          
          SaveX = x;
          SaveY = y;
          Direction = LongSword2;
          break;
           }  
         }         
       }
       Move_Count += 1;
       break;
   }
}
if Move_Count = 5 &amp;&amp; sprite_index = Base_S &amp;&amp; image_index = 0{
   Shuffle = false;
   switch(RA2){
       case Buster_Barrage:
       image_index = 0;
       sprite_index = Buster_S
       break;
       
       case SF_Shield:
       image_index = 0;
       sprite_index = Block_S
       break;
       
       case Flame_Head:
       image_index = 0;
       sprite_index = Flame_S;
       break;        
       
       case 0:
       Move_Count += 1;
       Shuffle = true;
       break;
   }
}
if Move_Count = 7 &amp;&amp; sprite_index = Base_S &amp;&amp; image_index = 0{
   Shuffle = false;
   switch(RA3){
       case Stun_Bomb:
     if place_meeting(MM.x+120,115,obj_panel){
       if instance_place(MM.x+120,115,obj_panel).Panel_Status != 3 &amp;&amp; instance_place(MM.x+120,115,obj_panel).Panel_Status != 4 &amp;&amp; !place_meeting(MM.x+120,115,obj_object) &amp;&amp; !place_meeting(MM.x+120,115,obj_virus) &amp;&amp; place_meeting(MM.x+120,115,obj_panel_blue_mask){
          image_index = 0.1;
          TargetX = MMP.x+120-2;
          TargetY = 115-20;
          SaveX = x;
          SaveY = y;
          Direction = StunBomb;
       }
    }
       break;
       
       case Step_LongSword:
      if place_meeting(MM.x+40,MM.y,obj_panel){ 
       if instance_place(MM.x+40,MM.y,obj_panel).Panel_Status != 3 &amp;&amp; instance_place(MM.x+40,MM.y,obj_panel).Panel_Status != 4 &amp;&amp; !place_meeting(MM.x+40,MM.y,obj_object) &amp;&amp; !place_meeting(MM.x+40,MM.y,obj_virus){
          image_index = 0.1;
          TargetX = MMP.x+40-2
          TargetY = MMP.y-20
          SaveX = x;
          SaveY = y;
          Direction = LongSword1;
          break;
       }
       }else{
      if place_meeting(MM.x+80,MM.y,obj_panel){
       if instance_place(MM.x+80,MM.y,obj_panel).Panel_Status != 3 &amp;&amp; instance_place(MM.x+80,MM.y,obj_panel).Panel_Status != 4 &amp;&amp; !place_meeting(MM.x+80,MM.y,obj_object) &amp;&amp; !place_meeting(MM.x+80,MM.y,obj_virus){
          image_index = 0.1;
          TargetX = MMP.x+80-2
          TargetY = MMP.y-20          
          SaveX = x;
          SaveY = y;
          Direction = LongSword2;
          break;
           }  
         }         
       }
       Move_Count += 1;
       break;
   }
}
if Move_Count = 9 &amp;&amp; sprite_index = Base_S &amp;&amp; image_index = 0{
     image_index = 0;
     sprite_index = Block_S;
}
if Move_Count = 13 &amp;&amp; sprite_index = Base_S &amp;&amp; image_index = 0{
   Shuffle = false;
   switch(RA4){
       case Stun_Bomb:
     if place_meeting(MM.x+120,115,obj_panel){
       if instance_place(MM.x+120,115,obj_panel).Panel_Status != 3 &amp;&amp; instance_place(MM.x+120,115,obj_panel).Panel_Status != 4 &amp;&amp; !place_meeting(MM.x+120,115,obj_object) &amp;&amp; !place_meeting(MM.x+120,115,obj_virus) &amp;&amp; place_meeting(MM.x+120,115,obj_panel_blue_mask){
          image_index = 0.1;
          TargetX = MMP.x+120-2;
          TargetY = 115-20;
          SaveX = x;
          SaveY = y;
          Direction = StunBomb;
       }
    }
       break;
       
       case Step_LongSword:
      if place_meeting(MM.x+40,MM.y,obj_panel){ 
       if instance_place(MM.x+40,MM.y,obj_panel).Panel_Status != 3 &amp;&amp; instance_place(MM.x+40,MM.y,obj_panel).Panel_Status != 4 &amp;&amp; !place_meeting(MM.x+40,MM.y,obj_object) &amp;&amp; !place_meeting(MM.x+40,MM.y,obj_virus){
          image_index = 0.1;
          TargetX = MMP.x+40-2
          TargetY = MMP.y-20
          SaveX = x;
          SaveY = y;
          Direction = LongSword1;
          break;
       }
       }else{
      if place_meeting(MM.x+80,MM.y,obj_panel){
       if instance_place(MM.x+80,MM.y,obj_panel).Panel_Status != 3 &amp;&amp; instance_place(MM.x+80,MM.y,obj_panel).Panel_Status != 4 &amp;&amp; !place_meeting(MM.x+80,MM.y,obj_object) &amp;&amp; !place_meeting(MM.x+80,MM.y,obj_virus){
          image_index = 0.1;
          TargetX = MMP.x+80-2
          TargetY = MMP.y-20          
          SaveX = x;
          SaveY = y;
          Direction = LongSword2;
          break;
           }  
         }         
       }
       Move_Count += 1;
       break;
       
       case Flame_Head:
       image_index = 0;
       sprite_index = Flame_S;
       break;       
   }   
}

}
//Move_Count Reset
if Move_Count &gt; 13 {Move_Count = 0}


</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Attack HitBox &amp; Sprites

//Buster Barrage
if sprite_index = Buster_S{
   if image_index &gt;= 2 &amp;&amp; Buster_Shot{
       Buster_Shot = false;
       audio_play_sound(snd_buster_shot,0,0);
       with(instance_create(IP.x,IP.y-3,obj_megamanSF_hitbox)){
          Semi = true;
          Power = other.Power[0];
          Travel = true;
       }
   }
}

//Shield Boost
if sprite_index = Block_S{  
   Shield = true;
   if !instance_exists(obj_megamanSF_shield) &amp;&amp; image_index &lt; 1{
      instance_create(x-26,y-23,obj_megamanSF_shield)
   }
  
}

//Stun Bomb
if sprite_index = Throw_S{
   if Throw_SFX{
      Throw_SFX = false;
      audio_play_sound(sou_throwing,0,0);
   }
   if image_index &lt;= 0 &amp;&amp; !instance_exists(obj_megamanSF_stunbomb){
       instance_create(x+14,y-4,obj_megamanSF_stunbomb);
   }
}

//Flame Head
if sprite_index = Flame_S{
  if image_index &gt;= 4 &amp;&amp; Flame_Summon{
     Flame_Summon = false;
     if instance_place(x-40,y,obj_panel).Panel_Status != 3 &amp;&amp; instance_place(x-40,y,obj_panel).Panel_Status != 4{
         instance_create(IP.x-40,IP.y-21,obj_megamanSF_flame_tower)
     }
  }
}

//Long Sword
if sprite_index = Sword_S{
   if image_index &gt;= 2 &amp;&amp; Sword_Effect{
     Sword_Effect = false;
     audio_play_sound(sou_sword_swing,0,0);
     instance_create(IP.x-40-20,IP.y-3,obj_megamanSF_longsword_effect);
     with(instance_create(IP.x-40,IP.y-3,obj_megamanSF_hitbox)){
         Hurt = true;
         Timer = 5;
         Element = E_Sword;
         Power = other.Power[1];
     }
     with(instance_create(IP.x-80,IP.y-3,obj_megamanSF_hitbox)){
         Hurt = true;
         Timer = 5;
         Element = E_Sword;
         Power = other.Power[1];
     }     
   }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/*//Death
if State = Dead &amp;&amp; obj_megaman.State = S_Normal{
  image_speed = 0;
  sprite_index = Hurt_Flash_S;
  image_alpha = 1;

  
  
  if Ex_Count = 0 &amp;&amp; Ex_true{
     Ex_true = false;
     with(instance_create(x-11,y+6,obj_expolsion_effect)){
        Owner = other.id;
        Ex_Count = true;
     }    
  }
   if Ex_Count = 1 &amp;&amp; Ex_true{
     Ex_true = false;
     with(instance_create(x+13,y-12,obj_expolsion_effect)){
        Owner = other.id;
        Ex_Count = true;
     }    
  }
   if Ex_Count = 2 &amp;&amp; Ex_true{
     instance_destroy();
     Ex_true = false;
     with(instance_create(x+5,y+9,obj_expolsion_effect)){
        Owner = other.id;
        Ex_Count = true;
     }    
  }

  }
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>604</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_inherited</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Summoning Omega-Xis
if State = S_Normal{
   if Hp &lt; 200 &amp;&amp; !Summon_OmegaXis{
     if place_meeting(x-40,y,obj_panel_blue){
        if instance_place(x-40,y,obj_panel).sprite_index = spr_panel_blue &amp;&amp; !place_meeting(x-40,y,obj_object) &amp;&amp; !place_meeting(x-40,y,obj_virus){
           instance_create(IP.x-40-1,IP.y-28,obj_omegaxis);
           exit;
        }
     }
     
     if place_meeting(x-80,y,obj_panel_blue){
        if instance_place(x-80,y,obj_panel).sprite_index = spr_panel_blue &amp;&amp; !place_meeting(x-80,y,obj_object) &amp;&amp; !place_meeting(x-80,y,obj_virus){
           instance_create(IP.x-80-1,IP.y-28,obj_omegaxis);
           exit;
        }
     }
     
     if place_meeting(x-40,y-24,obj_panel_blue){
        if instance_place(x-40,y-24,obj_panel).sprite_index = spr_panel_blue &amp;&amp; !place_meeting(x-40,y-24,obj_object) &amp;&amp; !place_meeting(x-40,y-24,obj_virus){
           instance_create(IP.x-40-1,IP.y-24-28,obj_omegaxis);
           exit;
        }
     }
     
     if place_meeting(x-40,y+24,obj_panel_blue){
        if instance_place(x-40,y+24,obj_panel).sprite_index = spr_panel_blue &amp;&amp; !place_meeting(x-40,y+24,obj_object) &amp;&amp; !place_meeting(x-40,y+24,obj_virus){
           instance_create(IP.x-40-1,IP.y+24-28,obj_omegaxis);
           exit;
        }
     }
     
     if place_meeting(x,y-24,obj_panel_blue){
        if instance_place(x,y-24,obj_panel).sprite_index = spr_panel_blue &amp;&amp; !place_meeting(x,y-24,obj_object) &amp;&amp; !place_meeting(x,y-24,obj_virus){
           instance_create(IP.x-1,IP.y-24-28,obj_omegaxis);
           exit;
        }
     } 
     
     if place_meeting(x,y+24,obj_panel_blue){
        if instance_place(x,y+24,obj_panel).sprite_index = spr_panel_blue &amp;&amp; !place_meeting(x,y+24,obj_object) &amp;&amp; !place_meeting(x,y+24,obj_virus){
           instance_create(IP.x-1,IP.y+24-28,obj_omegaxis);
           exit;
        }
     }                        
   }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Death
if State = Dead &amp;&amp; obj_megaman.State = S_Normal{
  image_speed = 0;
  sprite_index = Hurt_Flash_S;
  image_alpha = 1;

  
  
  if Ex_Count = 0 &amp;&amp; Ex_true{
     Ex_true = false;
     with(instance_create(x-11,y+6,obj_expolsion_effect)){
        Owner = other.id;
        Ex_Count = true;
     }    
  }
   if Ex_Count = 1 &amp;&amp; Ex_true{
     Ex_true = false;
     with(instance_create(x+13,y-12,obj_expolsion_effect)){
        Owner = other.id;
        Ex_Count = true;
     }    
  }
   if Ex_Count = 2 &amp;&amp; Ex_true{
     instance_destroy();
     Ex_true = false;
     with(instance_create(x+5,y+9,obj_expolsion_effect)){
        Owner = other.id;
        Ex_Count = true;
     }    
  }

  }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="7">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Direction
Shuffle = true;

if sprite_index = Base_S{
     switch(Direction){
         case Up:
         y-=24;
         image_index = 0;
         Direction = 0;
         Move_Count += 1;
         break;
         
         case Down:
         y+=24;
         image_index = 0;
         Direction = 0;
         Move_Count += 1;
         break;
         
         case Left:
         x-=40;
         image_index = 0;
         Direction = 0;
         Move_Count += 1;
         break;    
         
         case Right:
         x+=40;
         image_index = 0;
         Direction = 0;
         Move_Count += 1;
         break; 
         
         case Return:
         x = SaveX;
         y = SaveY;
         Shuffle = true;
         Move_Count += 1;
         image_index = 0;
         image_speed = 0;
         sprite_index = Base_S;   
         break;    
         
         case LongSword1:
         x = TargetX;
         y = TargetY;
         image_index = 0;
         sprite_index = Sword_S;
         exit;  
         
         case LongSword2:
         x = TargetX;
         y = TargetY;
         image_index = 0;
         sprite_index = Sword_S;
         exit; 
         
         case StunBomb:
         x = TargetX;
         y = TargetY;
         image_index = 0;
         sprite_index = Throw_S;
         exit;                                        
     }
}

//Attacking
if sprite_index = Buster_S{
    Buster_Count -= 1;
    Buster_Shot = true;
    if Buster_Count &lt;= 0{
       Buster_Count = MBC;
       image_index = 0;
       sprite_index = Base_S;
       Move_Count += 1;
    }
}

if sprite_index = Block_S{
  image_index = 0;
  sprite_index = Base_S;
  Move_Count += 1;
}

if sprite_index = Throw_S{
  image_index = 0;
  sprite_index = Base_S;
  Move_Count += 1;
}

if sprite_index = Sword_S{
   image_index = 0.1;
   sprite_index = Base_S;
   Direction = Return;
} 

if sprite_index = Flame_S{
   image_index = 3;
}

with(VChild){
    instance_destroy();
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>604</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_inherited</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_self();

if Hp &gt; 0 &amp;&amp; sprite_index != Fade_In &amp;&amp; image_alpha != 0{
draw_set_font(obj_field.EnemyHp_Font);
draw_text(x-7,y+25,round(Hp));
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
