<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_yoyo</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>spd = 7;
Count = 1;
HitBox = true;
Owner = -4;
Used = "Used";
Name = global.Slot_Name[1];
global.Slot_Name[1] = Used;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>with(obj_buster_hitbox){
   if Chip_Owner = other.id {instance_destroy()};
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>with(Owner){
    IP = other.IP  
    x = IP.x;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>State = obj_megaman.State;
MM = obj_megaman;
if place_meeting(x,y,obj_panel){
   IP = instance_place(x,y,obj_panel);
   depth = MM.depth-5;
}

if State = S_Normal{
    image_speed = .6;
    hspeed = spd;
    if x &gt; PT+1 &amp;&amp; PT != -4{
        x = PT+1;
        spd = 0;
        image_index = 0;
    }
    if PT = -4{
       if x &gt; MM.x+120{
           x = MM.x+120;
           spd = 0;
           image_index = 0;
       }
    }
    
    if Count = 0 &amp;&amp; x &lt;= xstart{
       spd = 0;
       x = xstart;
       instance_destroy();
       with(obj_yoyo_holder) {instance_destroy();}
       with(obj_megaman){
          image_index = 0;
          sprite_index = Base_S;
       if global.Slot_Name[1] = other.Used{
              global.Slot_Name[1] = "";
              global.Slot_Code[1] = -1;
              global.Slot_Power[1] = -1;
              global.Slot_Element[1] = -1;
              global.Slot_Icon[1] = -1; 
          }          
       }
    }
    
    //Hitbox
    if HitBox{
       HitBox = false;
       with(instance_create(IP.x,IP.y-3,obj_buster_hitbox)){
          Travel = false;
          other.Owner = id;
          Power = global.Slot_Power[1];
          Semi_Hurt = true;
          Buster_Sound = MegaBuster;
          Chip_Owner = other.id;           
       }
    }
}

if State != S_Normal{
    image_speed = 0;
    hspeed = 0;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="7">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>with(obj_buster_hitbox){
   if Chip_Owner = other.id {instance_destroy()};
}
HitBox = true;

if spd = 0{
   if Count != 0{
      Count -= 1;
      exit;
   }
   if Count = 0{
      spd = -7;
      exit;
   }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
