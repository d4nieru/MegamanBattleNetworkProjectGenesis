<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//mugshot_type = instance_nearest(x, y, text_parent).mugshot;
//Text_Number = instance_nearest(x,y,text_parent).Text_Number;
sind = 0;
subtimer = 0;
depth = -y * 10
image_alpha = 1;
if instance_exists(objOverworldAvatar) {objOverworldAvatar.pause = 1};
wait = 1;
soundpause = 0;
TextNoShadow_Font = font_add_sprite_ext(spr_text_font_noshadow,"AaBbCcDdEeFfGgHhIiJjKkLlMmNnOoPpQqRrSsTtUuVvWwXxYyZz0123456789!?+-:.,/'",true,1);
//Creating the Arrays
for(i=0; i&lt;99; i+=1){
   text[i] = instance_nearest(x,y,text_parent).text[i];
   mugshot[i] = instance_nearest(x,y,text_parent).mugshot[i];
   box_number[i] = instance_nearest(x,y,text_parent).box_number[i];
   text_owner = instance_nearest(x,y,text_parent).text_owner;
   event_change[i] = instance_nearest(x,y,text_parent).event_change[i];
   item_type[i] = instance_nearest(x,y,text_parent).item_type[i]; 
   item_get[i] = instance_nearest(x,y,text_parent).item_get[i]; 
   
}
Text_Number = 0;
Animation = 0;
AT = 0;
AC = true;
Mug_Stance = "Nothing"
MBC = 1;
BC = MBC;
blink = false;
BT = 0;



</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Variable locking
display = text[Text_Number];
Mugshot = mugshot[Text_Number];
depth = -999999999;
//Mugshot
Blink[0] = 0;
Blink[1] = 1;
Blink[2] = 2;

Talk[0] = 0;
Talk[1] = 3;
Talk[2] = 4;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Item System
switch(item_type[Text_Number]){
    case "Chip":
    add_chip_to_pack(item_get[Text_Number]);
    audio_play_sound(sou_item_get,0,0);
    item_type[Text_Number] = "";
    item_get[Text_Number] = -4;
    break;

            
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var akey = keyboard_check_pressed(ord("Z"));
if akey &amp;&amp; box_number[Text_Number+1] != 0{
    if sind &gt;= string_length(display)-1{
       Text_Number += 1;
       sind = 0;
       subtimer = 0;
       wait = 1;
       soundpause = 0;
       exit;
    }
}
if akey{
    if sind &gt;= string_length(display){
       if box_number[Text_Number+1] = 0{
           if instance_exists(objOverworldAvatar) {objOverworldAvatar.pause = 0};
           if instance_exists(obj_megaman) || x &lt; 0 {global.Cursor_Control = "ON"; with(instance_nearest(x,y,text_parent)) {instance_destroy()}};       
           instance_destroy();
       };   
       //Event System
       if event_change[Text_Number] &gt; 0 &amp;&amp; text_owner != noone{
           switch(text_owner){
               case obj_mom:
               global.Mom_event = event_change[Text_Number];
               with(obj_mom){
                   for(i=0; i&lt;99; i+=1){
                       text[i] = "";
                       mugshot[i] = -1;
                       box_number[i] = 0;
                       event_change[i] = -1;
                       item_type[i] = "";
                       item_get[i] = -4;                       
                   }
                   Text_Number = 0;
               }
               break;
               
               case obj_roll:
               global.Roll_event = event_change[Text_Number];
               with(obj_roll){
                   for(i=0; i&lt;99; i+=1){
                       text[i] = "";
                       mugshot[i] = -1;
                       box_number[i] = 0;
                       event_change[i] = -1;
                       item_type[i] = "";
                       item_get[i] = -4;
                   }
                   Text_Number = 0;
               }
               break;               
          }
}
    }
}

if wait == 1{
    wait -= 1;
}

//display = instance_nearest(x, y, text_parent).text[0+Text_Number];

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Mugshot Animation
if Mug_Stance = "Talking"{
   if AC {Animation = 0; AC = false; AT = 0};
   AT += 1;
   if AT = 5{
      AT = 0;
      switch(Animation){
         case 0:
         Animation = Talk[1];
         exit;
         break;
         
         case 3:
         Animation = Talk[2];
         exit;
         break;
         
         case 4:
         Animation = Talk[0];
         exit;
         break;         
      }
   }
}

if Mug_Stance = "Blinking"{
    if !AC {Animation = 0; AC = true; AT = 0};
    if !blink{
        BT += 1;
        if BT = room_speed{
            BT = 0;
            blink = true;
        }
    }
    if blink{
        AT += 1;
        if AT = 5{
            AT = 0;
            switch(Animation){
                case 0:
                Animation = Blink[1];
                exit;
                break;
                
                case 1:
                Animation = Blink[2];
                exit;
                break;
                
                case 2:
                Animation = Blink[0];
                BC -= 1;
                if BC = 0{
                   blink = false;
                   switch(MBC){
                      case 1:
                      MBC = 2;
                      BC = 2;
                      exit;
                      break;
                      
                      case 2:
                      MBC = 1;
                      BC = 1;
                      exit;
                      break;
                   }
                }
                exit;
                break;                                           
            }
        }
    }    
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var akey = keyboard_check_pressed(ord("Z"));
subtimer -= 1;
if (subtimer &lt;=0){
    subtimer = 3;
    Mug_Stance = "Talking";
    sind += 1;
    if soundpause == 0{
    audio_play_sound(Talking, 0, 0);
    }
}
if (wait == 0 &amp;&amp; sind &gt;= string_length(display)){
    sind = (string_length(display))
    soundpause = 1;
    Mug_Stance = "Blinking";
}

if (wait == 0 &amp;&amp; akey &amp;&amp; sind &lt; string_length(display)-1){
    sind = string_length(display);
    soundpause = 1;
    Mug_Stance = "Blinking";
}


draw_sprite(textbox,0,view_xview[0],view_yview[0]);
draw_sprite(mugshot[Text_Number],Animation,view_xview[0]+7,view_yview[0]+104);
draw_set_font(TextNoShadow_Font);
draw_text(view_xview[0]+55,view_yview[0]+113,string_copy(display, 0, sind))

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
