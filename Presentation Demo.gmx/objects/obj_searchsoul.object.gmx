<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_searchsoul_base</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>obj_megaman</parentName>
  <maskName>spr_megaman_base</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Button_Map();
//Sprite Variable
Base_S = spr_megaman_base;
Stone_S = spr_megaman_stone;
Hurt_S = spr_megaman_hurt;
Sword_Sep = spr_megaman_sword_sep;
Throw_Sep = spr_megaman_throw;
Roll_Sep = spr_megaman_roll;
Buster_Sep = spr_megaman_buster_sep;
BusterC_Sep = spr_megaman_busterc_sep;

Object_Type = 1; // 0 = Virus and Boss 1 = Player
image_speed = 0;
image_index = 0;
mask_index = spr_megaman_base;

//Buster Arm
ChargeBuster_Use = false;

BA_MegaBuster = 1;
BA_SwordMode[0] = 2;
BA_SwordMode[1] = 3;
BA_SwordMode[2] = 4;
BA_WonderWand[0] = 5;
BA_WonderWand[1] = 6;
BA_WonderWand[2] = 7;

Buster_Arm = BA_MegaBuster;

//Directions
Direction = 0;
D_right = 1;
D_left = 2;
D_up = 3;
D_down = 4;
quick_buster = false;
State = S_Paused;
Move_Cancel = false;
Semi_Hurt = false;
Hurt = false;
Hurt_Timer = 0;
BHurt = false;
BHurt_Timer = 0;
Shield_Save = -4;
Stun = false;
Stun_Timer = 0;
Invis = false;
Invis_Timer = 0;
Damage_Flash = false;
DF_Direction = 0;
Buster_HB = true;
buster_charge = false;
SaveX = 0;
SaveY = 0;


//Stats
Shield = 0;
MaxHp = player_maxhp;
Hp = player_hp;
spd = player_spd;
atk = player_atk;
chrg_atk = player_chrg_atk;
chrg_spd = 50;
bstr_spd = .7;
charge_start = chrg_spd;
charge = false
Damage = 0;
BDamage = 0;
Barrier_Hp = 0;

//Chip Management Handling
Hand_Name[1] = "";
Hand_Name[2] = "";
Hand_Name[3] = "";
Hand_Name[4] = "";
Hand_Name[5] = "";

Hand_Power[1] = -1;
Hand_Power[2] = -1;
Hand_Power[3] = -1;
Hand_Power[4] = -1;
Hand_Power[5] = -1;

Hand_Code[1] = -1;
Hand_Code[2] = -1;
Hand_Code[3] = -1;
Hand_Code[4] = -1;
Hand_Code[5] = -1;

Hand_Element[1] = -1;
Hand_Element[2] = -1;
Hand_Element[3] = -1;
Hand_Element[4] = -1;
Hand_Element[5] = -1;

Hand_Icon[1] = -1;
Hand_Icon[2] = -1;
Hand_Icon[3] = -1;
Hand_Icon[4] = -1;
Hand_Icon[5] = -1;

//Navi Summons &amp;&amp; Chip Movement
GutsMan = 11;
GutsMan_Summon = false;
Roll = 12;
Roll_Summon = false;
ZeroSoul = 13;
BlastShot = 14;
RollP = 15;
StepSword = 16;
CrashMan = 17;
CrashMan_Summon = false;

//Chip Effect
Vulcan_Spin = 0;

AreaGrab = false;
TimeMachine = false;
Reprogram = false;
FolderBack = false;
StoneBody = 0;

//Drawing the chip's name Varible
Alpha = 0;
FD = 0;
Fade_Timer = 0;
CER = false;

//Create Event Scripts
scr_panel_effects(1);
scr_navi_element(E_None);

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Virus_Number = (instance_number(obj_virus)-instance_number(obj_virus_placeholder))
StandPX = instance_place(x,y,obj_panel).x;
StandPY = instance_place(x,y,obj_panel).y;
IP = instance_place(x,y,obj_panel);
depth = instance_place(x,y,obj_panel).y*-1;
if Hp &lt;= 0 {room = rm_gameover;}

Button_Map()

if State = S_Normal &amp;&amp; !instance_exists(obj_fade){
scr_animation_speed()
scr_chip_usage_new()
scr_battle_damage_player()
scr_panel_effects(0);
scr_weapon_control();
scr_weakness_system();
scr_gameplay()
}

if State = S_Frozen{

}

if State = S_Paused{
  image_speed = 0
}

if Virus_Number = 0 &amp;&amp; State = S_Normal{
   State = S_Frozen
      with(instance_create(obj_custom_gague.x+4,obj_custom_gague.y+76,obj_battle_text)){
      image_index = 3;
      Battle_Term = 1;
   }  
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Chip Effects
if AreaGrab{
  if Alpha &lt; 1 &amp;&amp; !CER &amp;&amp; FD = 0 {Alpha += .05;}
  if Alpha = 1 &amp;&amp; FD = 0 {FD = 1}
  if Alpha &gt; 0 &amp;&amp; !CER &amp;&amp; FD = 1 {
      Fade_Timer += 1;
      if Fade_Timer &gt;= 20{
         Alpha -= .05;
      }
  }
  if Alpha = 0 &amp;&amp; Fade_Timer &gt;= 20 &amp;&amp; !CER {CER = true}
 if CER &amp;&amp; Alpha = 0{
      FD = 0;
      Alpha = 0;
      Fade_Timer = 0;
      CER = false;      
      scr_areagrab();
 }
}

if BlastShot{
  scr_blastshot();
}


if TimeMachine{
  if Alpha &lt; 1 &amp;&amp; !CER &amp;&amp; FD = 0 {Alpha += .05;}
  if Alpha = 1 &amp;&amp; FD = 0 {FD = 1}
  if Alpha &gt; 0 &amp;&amp; !CER &amp;&amp; FD = 1 {
      Fade_Timer += 1;
      if Fade_Timer &gt;= 20{
         Alpha -= .05;
      }
  }
  if Alpha = 0 &amp;&amp; Fade_Timer &gt;= 20 &amp;&amp; !CER {CER = true}
 if CER &amp;&amp; Alpha = 0{
      FD = 0;
      Alpha = 0;
      Fade_Timer = 0;
      CER = false;      
      scr_timemachine();
 }
}

if Reprogram{
  if Alpha &lt; 1 &amp;&amp; !CER &amp;&amp; FD = 0 {Alpha += .05;}
  if Alpha = 1 &amp;&amp; FD = 0 {FD = 1}
  if Alpha &gt; 0 &amp;&amp; !CER &amp;&amp; FD = 1 {
      Fade_Timer += 1;
      if Fade_Timer &gt;= 20{
         Alpha -= .05;
      }
  }
  if Alpha = 0 &amp;&amp; Fade_Timer &gt;= 20 &amp;&amp; !CER {CER = true}
 if CER &amp;&amp; Alpha = 0{
      FD = 0;
      Alpha = 0;
      Fade_Timer = 0;
      CER = false;      
       with(obj_chip_holder){
          Max_Chip_Draw += 1;
          Chip_Draw = Max_Chip_Draw;
       }
       Reprogram = false; 
       with(obj_field) {Fade = false}
       with(obj_megaman) {State = S_Normal; image_alpha = 1; image_index = 0; image_speed = 0}
       with(obj_virus) {State = Normal; mask_index = Mask;} 
       global.Slot_Name[1] = "";
       global.Slot_Code[1] = -1;
       global.Slot_Power[1] = -1;
       global.Slot_Element[1] = -1;
       global.Slot_Icon[1] = -1;          
 }
}

if FolderBack{
  if Alpha &lt; 1 &amp;&amp; !CER &amp;&amp; FD = 0 {Alpha += .05;}
  if Alpha = 1 &amp;&amp; FD = 0 {FD = 1}
  if Alpha &gt; 0 &amp;&amp; !CER &amp;&amp; FD = 1 {
      Fade_Timer += 1;
      if Fade_Timer &gt;= 20{
         Alpha -= .05;
      }
  }
  if Alpha = 0 &amp;&amp; Fade_Timer &gt;= 20 &amp;&amp; !CER {CER = true}
 if CER &amp;&amp; Alpha = 0{
      FD = 0;
      Alpha = 0;
      Fade_Timer = 0;
      CER = false;      
      if ds_list_size(Test_Deck) = 0{
          for(i=0; i&lt;30; i+=1){
             ds_list_add(Test_Deck,Chip_Deck[i]);
             ds_list_shuffle(Test_Deck);
          }
      }
       FolderBack = false; 
       if !instance_exists(obj_screenshake){  
         with(instance_create(0,0,obj_screenshake)) {alarm[0] = 25;}
       }       
       with(obj_field) {Fade = false}
       with(obj_megaman) {State = S_Normal; image_alpha = 1; image_index = 0; image_speed = 0}
       with(obj_virus) {State = Normal; mask_index = Mask;} 
       global.Slot_Name[1] = "";
       global.Slot_Code[1] = -1;
       global.Slot_Power[1] = -1;
       global.Slot_Element[1] = -1;
       global.Slot_Icon[1] = -1;
       with(obj_custom_gague) {Gague = 100};
       keyboard_key_press(ord("A"));    
 }   
}

//Navi
if Roll_Summon{
  if Alpha &lt; 1 &amp;&amp; !CER &amp;&amp; FD = 0 {Alpha += .05;}
  if Alpha = 1 &amp;&amp; FD = 0 {FD = 1}
  if Alpha &gt; 0 &amp;&amp; !CER &amp;&amp; FD = 1 {
      Fade_Timer += 1;
      if Fade_Timer &gt;= 20{
         Alpha -= .05;
      }
  }
  if Alpha = 0 &amp;&amp; Fade_Timer &gt;= 20 &amp;&amp; !CER {CER = true}
 if CER &amp;&amp; Alpha = 0{
      FD = 0;
      Alpha = 0;
      Fade_Timer = 0;
      CER = false;      
      Direction = Roll;
      with(obj_fade) {Navi_Move = true}
      Roll_Summon = false;
 }
}

if GutsMan_Summon{
  if Alpha &lt; 1 &amp;&amp; !CER &amp;&amp; FD = 0 {Alpha += .05;}
  if Alpha = 1 &amp;&amp; FD = 0 {FD = 1}
  if Alpha &gt; 0 &amp;&amp; !CER &amp;&amp; FD = 1 {
      Fade_Timer += 1;
      if Fade_Timer &gt;= 20{
         Alpha -= .05;
      }
  }
  if Alpha = 0 &amp;&amp; Fade_Timer &gt;= 20 &amp;&amp; !CER {CER = true}
 if CER &amp;&amp; Alpha = 0{
      FD = 0;
      Alpha = 0;
      Fade_Timer = 0;
      CER = false;      
      Direction = GutsMan;
      with(obj_fade) {Navi_Move = true}
      GutsMan_Summon = false;
 }
}

if CrashMan_Summon{
  if Alpha &lt; 1 &amp;&amp; !CER &amp;&amp; FD = 0 {Alpha += .05;}
  if Alpha = 1 &amp;&amp; FD = 0 {FD = 1}
  if Alpha &gt; 0 &amp;&amp; !CER &amp;&amp; FD = 1 {
      Fade_Timer += 1;
      if Fade_Timer &gt;= 20{
         Alpha -= .05;
      }
  }
  if Alpha = 0 &amp;&amp; Fade_Timer &gt;= 20 &amp;&amp; !CER {CER = true}
 if CER &amp;&amp; Alpha = 0{
      FD = 0;
      Alpha = 0;
      Fade_Timer = 0;
      CER = false;      
      Direction = CrashMan;
      with(obj_fade) {Navi_Move = true}
      CrashMan_Summon = false;
 }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Sprite Variables
Base_S = spr_megaman_base;
Stone_S = spr_megaman_stone;
Hurt_S = spr_megaman_hurt;
Stun_S = spr_megaman_stun;
Sword_Sep = spr_megaman_sword_sep;
Throw_Sep = spr_megaman_throw;
Roll_Sep = spr_megaman_roll;
Buster_Sep = spr_megaman_buster_sep;
BusterC_Sep = spr_megaman_busterc_sep;
Punch_Sep = spr_megaman_punch_sep;

/*if State = S_Normal{
//Speeds
if sprite_index = Sword_Sep &amp;&amp; image_index = 0 {image_speed = .4;}
if sprite_index = Sword_Sep &amp;&amp; image_index &gt;= 1 {image_speed = 0;}
if sprite_index = Buster_Sep &amp;&amp; image_index = 0 {image_speed = 0;}
if sprite_index = BusterC_Sep &amp;&amp; image_index = 0 {image_speed = .4;}  
if sprite_index = BusterC_Sep &amp;&amp; image_index &gt;= 1 {image_speed = 0;}  

}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Damage
if Shield != 2{

if Damage &gt; 0{
   player_hp += .5;
   Hp += .5;
   Damage -= .5;
}
if Damage &lt; 0{
   player_hp -= .5;
   Hp -= .5;
   Damage += .5;
}

if Hp &gt; MaxHp {Hp = MaxHp}
if player_hp &gt; player_maxhp {player_hp = player_maxhp}
if Hp &lt; 0 {Hp = 0}
if Damage &gt;= MaxHp {Damage = 0} //MaxHp}

}

//Barrier
if Shield = 2{

if Damage &gt; 0{
   player_hp += .5;
   Hp += .5;
   Damage -= .5;
}
if BDamage &lt; 0{
   Barrier_Hp -= 1;
   BDamage += 1;
}

if Hp &gt; MaxHp {Hp = MaxHp}
if player_hp &gt; player_maxhp {player_hp = player_maxhp}
if Barrier_Hp &lt; 0 {Hp = 0}
if Damage &gt;= MaxHp {Damage = 0} //MaxHp}

if Barrier_Hp = 0{
    Damage = 0;
    Shield = 0;
    BDamage = 0;
    with(obj_barrier) {instance_destroy()};
}

}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="7">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>buster_charge = false;
Buster_HB = true;
if sprite_index = spr_megaman_base{
   switch(Direction){
     case D_right:
      x += 40;
     if instance_place(x,y,obj_panel).Panel_Status != 5 {Direction = 0;}
      image_speed = 0;
      image_index = 0;
      Move_Cancel = true;
      break;
      
      case D_left:
      x -= 40;
      if instance_place(x,y,obj_panel).Panel_Status != 5 {Direction = 0;}
      image_speed = 0;
      image_index = 0;
      Move_Cancel = true;
      break;
      
      case D_up:
      y -= 24;
      if instance_place(x,y,obj_panel).Panel_Status != 5 {Direction = 0;}
      image_speed = 0;
      image_index = 0;
      Move_Cancel = true;
      break;
      
      case D_down:
      y += 24;
      if instance_place(x,y,obj_panel).Panel_Status != 5 {Direction = 0;}
      image_speed = 0;
      image_index = 0;
      Move_Cancel = true;
      break;
      
      //Navi Summon
      case GutsMan:
      Direction = 0;
      image_alpha = 0;
      image_speed = 0;
      image_index = 0;
     with(instance_create(x+5,-50,obj_gutsman_summon)){
       Landing = true;
       Diff = other.y-6
     }
      State = S_Frozen;
      Move_Cancel = true;
      break;
      
      case Roll:
      Direction = 0;
      image_alpha = 0;
      image_speed = 0;
      image_index = 0;
      instance_create(x+3,y-13,obj_roll_summon)
      State = S_Frozen;
      Move_Cancel = true;
      break;
      
      case CrashMan:
      Direction = 0;
      image_alpha = 0;
      image_speed = 0;
      image_index = 0;
      instance_create(IP.x+6,IP.y-25,obj_crashman_summon)
      State = S_Frozen;
      Move_Cancel = true;
      break;      
      
      case RollP:
      Direction = 0;
      image_alpha = 0;
      image_speed = 0;
      image_index = 0;
      instance_create(x+3,y-13,obj_roll_summon)
      State = S_Frozen;
      Move_Cancel = true;
      break;      
      
      case ZeroSoul:
      Direction = 0;
      image_alpha = 0;
      image_speed = 0;
      image_index = 0;
      instance_create(x,y+20,obj_zerosoul_summon)
      State = S_Frozen;
      Move_Cancel = true;
      break;
      
      case BlastShot:
      Direction = 0;
      image_alpha = 0;
      image_speed = 0;
      image_index = 0;
      instance_create(x,y,obj_blastshot_summon)
      State = S_Frozen;
      Move_Cancel = true;
      break;   
      
      //Chip Movement
      case StepSword:
      Direction = 0;
      if place_meeting(IP.x+80,IP.y,obj_panel){
         if instance_place(IP.x+80,IP.y,obj_panel).Panel_Status != 3 &amp;&amp; instance_place(IP.x+80,IP.y,obj_panel).Panel_Status != 4 &amp;&amp; !place_meeting(IP.x+80,IP.y,obj_object) &amp;&amp; !place_meeting(IP.x+80,IP.y,obj_virus){
              SaveX = x;
              SaveY = y;
              x += 80;
              sprite_index = Sword_Sep;
              break;
         } else{
               image_speed = 0;             
               image_index = 0; 
              sprite_index = Base_S;
              /*global.Slot_Name[1] = "";
              global.Slot_Code[1] = -1;
              global.Slot_Power[1] = -1;
              global.Slot_Element[1] = -1;
              global.Slot_Icon[1] = -1;*/ 
              }
      } else{
          image_speed = 0;
          image_index = 0;
          sprite_index = Base_S;
              /*global.Slot_Name[1] = "";
              global.Slot_Code[1] = -1;
              global.Slot_Power[1] = -1;
              global.Slot_Element[1] = -1;
              global.Slot_Icon[1] = -1;    */      
      }
      break;  
   }
}

if sprite_index = spr_megaman_buster{
  quick_buster = false;
  image_index = 0;
  sprite_index = spr_megaman_base;
  image_speed = 0;
  //Direction = 0;
  bstr_spd = .2;
}

if sprite_index = spr_megaman_sword{
  image_speed = 0;
  image_index = 0;
  sprite_index = spr_megaman_base;
  global.Slot_Name[1] = "";
  global.Slot_Code[1] = -1;
  global.Slot_Power[1] = -1;
  global.Slot_Element[1] = -1;
  global.Slot_Icon[1] = -1;
}

if sprite_index = spr_megaman_cannon1{
  image_speed = 0;
  image_index = 0;
  sprite_index = spr_megaman_base;
  global.Slot_Name[1] = "";
  global.Slot_Code[1] = -1;
  global.Slot_Power[1] = -1;
  global.Slot_Element[1] = -1;
  global.Slot_Icon[1] = -1;
}

if sprite_index = spr_megaman_shot{
  image_speed = 0;
  image_index = 0;
  sprite_index = spr_megaman_base;
  global.Slot_Name[1] = "";
  global.Slot_Code[1] = -1;
  global.Slot_Power[1] = -1;
  global.Slot_Element[1] = -1;
  global.Slot_Icon[1] = -1;
}

if sprite_index = spr_megaman_airshot{
  image_speed = 0;
  image_index = 0;
  sprite_index = spr_megaman_base;
  global.Slot_Name[1] = "";
  global.Slot_Code[1] = -1;
  global.Slot_Power[1] = -1;
  global.Slot_Element[1] = -1;
  global.Slot_Icon[1] = -1;
}

if sprite_index = spr_megaman_throw{
  image_speed = 0;
  image_index = 0;
  sprite_index = spr_megaman_base;
  global.Slot_Name[1] = "";
  global.Slot_Code[1] = -1;
  global.Slot_Power[1] = -1;
  global.Slot_Element[1] = -1;
  global.Slot_Icon[1] = -1;
}

if sprite_index = spr_megaman_vulcan{
 if Vulcan_Spin = 2{ 
  image_speed = 0;
  image_index = 0;
  sprite_index = spr_megaman_base;
  global.Slot_Name[1] = "";
  global.Slot_Code[1] = -1;
  global.Slot_Power[1] = -1;
  global.Slot_Element[1] = -1;
  global.Slot_Icon[1] = -1;
  Vulcan_Spin = 0;
  exit;
  }
if Vulcan_Spin &lt; 2{
    image_index = 1;
    Buster_HB = true;
}  
  Vulcan_Spin += 1;
}


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_self();
if State != S_Frozen &amp;&amp; State != S_Paused{ 

if global.Slot_Icon[5] != -1{
  draw_sprite(spr_chip_icon,global.Slot_Icon[5],x+1,y-30)
}
if global.Slot_Icon[4] != -1{
  draw_sprite(spr_chip_icon,global.Slot_Icon[4],x+2.5,y-30)
}
if global.Slot_Icon[3] != -1{
  draw_sprite(spr_chip_icon,global.Slot_Icon[3],x+4,y-30)
}
if global.Slot_Icon[2] != -1{
  draw_sprite(spr_chip_icon,global.Slot_Icon[2],x+5.5,y-30)
}
if global.Slot_Icon[1] != -1{
  draw_sprite(spr_chip_icon,global.Slot_Icon[1],x+7,y-30)
}

if global.Slot_Name[1] != "" &amp;&amp; global.Slot_Name[1] != "Used" &amp;&amp; State = S_Normal{
  draw_set_font(obj_field.Chip_Font);
  draw_text(5,154,global.Slot_Name[1])
  if global.Slot_Power[1] &gt; 0{
  draw_set_font(obj_field.Chip_Font);
  draw_set_colour(c_orange);
  var Power_String;
  Power_String = string_width(global.Slot_Name[1] + " ")
  draw_text(5+Power_String,154,string(global.Slot_Power[1]));
  }
  draw_set_colour(c_white);
}

}

//Chip Effect Drawing Names
if TimeMachine{
   draw_set_font(obj_field.Chip_Font);
   draw_set_alpha(Alpha);
   draw_text(5,40,global.Slot_Name[1])
   
   draw_set_alpha(1);
}
if FolderBack{
   draw_set_font(obj_field.Chip_Font);
   draw_set_alpha(Alpha);
   draw_text(5,40,global.Slot_Name[1])
   
   draw_set_alpha(1);
}
if AreaGrab{
   draw_set_font(obj_field.Chip_Font);
   draw_set_alpha(Alpha);
   draw_text(5,40,global.Slot_Name[1])
   
   draw_set_alpha(1);
}
if Roll_Summon{
   draw_set_font(obj_field.Chip_Font);
   draw_set_alpha(Alpha);
   draw_text(5,40,global.Slot_Name[1])
   
   draw_set_alpha(1);
}
if GutsMan_Summon{
   draw_set_font(obj_field.Chip_Font);
   draw_set_alpha(Alpha);
   draw_text(5,40,global.Slot_Name[1])
   
   draw_set_alpha(1);
}
if CrashMan_Summon{
   draw_set_font(obj_field.Chip_Font);
   draw_set_alpha(Alpha);
   draw_text(5,40,global.Slot_Name[1])
   
   draw_set_alpha(1);
}
if Reprogram{
   draw_set_font(obj_field.Chip_Font);
   draw_set_alpha(Alpha);
   draw_text(5,40,global.Slot_Name[1])
   
   draw_set_alpha(1);
}



</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
