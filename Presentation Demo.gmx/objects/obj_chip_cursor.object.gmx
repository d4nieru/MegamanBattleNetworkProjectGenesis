<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_chip_cursor</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-700</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>spr_chip_cursor_old</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>image_speed = .1;
Selectable = -1;
Move_Timer = 0;
Move_Spd = 5;
Quick_Move = false;
global.Cursor_Control = "ON";
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if global.Cursor_Control = "ON"{


//Controls
key_right_hold = keyboard_check(vk_right);
key_right_release = keyboard_check_released(vk_right);
key_left_hold = keyboard_check(vk_left);
key_left_release = keyboard_check_released(vk_left);
key_up_hold = keyboard_check(vk_up);
key_up_release = keyboard_check_released(vk_up);
key_down_hold = keyboard_check(vk_down);
key_down_release = keyboard_check_released(vk_down);
key_select = keyboard_check_pressed(ord("Z"));
key_deselect = keyboard_check_pressed(ord("X"));
key_start = keyboard_check_pressed(vk_enter);
key_info = keyboard_check_pressed(ord("A"));
key_run = keyboard_check_pressed(ord("S"));

if instance_exists(obj_chip){
//Movement
//Right
if key_right_hold{
 Move_Timer += 1
 if Move_Timer = Move_Spd{
   Quick_Move = true
   if x != xstart+(16*4) &amp;&amp; place_meeting(x+16,y,obj_chip){
      x += 16;
      Move_Timer = 0;
      audio_play_sound(sou_cursor_move,0,false);
      exit;
   } if x = xstart+(16*4){  
      sprite_index = spr_chip_cursor2;
      x = obj_chip_holder.x-64;
      y = obj_chip_holder.y+119;
      Move_Timer = 0;
      audio_play_sound(sou_cursor_move,0,false);
      exit;
   }
   if sprite_index = spr_chip_cursor2 &amp;&amp; place_meeting(xstart,y,obj_chip){
       sprite_index = spr_chip_cursor;
       x = xstart;
       y = ystart;
       Move_Timer = 0;
       audio_play_sound(sou_cursor_move,0,0);
       exit;
   }
 }
}

if key_right_release{
  if Quick_Move{
    Move_Timer = 0;
    Quick_Move = false;
  } else{
    Move_Timer = 0;
    if x != xstart+(16*4) &amp;&amp; place_meeting(x+16,y,obj_chip){
      x += 16;
      audio_play_sound(sou_cursor_move,0,false);
      exit;
    } if x = xstart+(16*4){
       sprite_index = spr_chip_cursor2;
       x = obj_chip_holder.x-64;
       y = obj_chip_holder.y+119;      
       audio_play_sound(sou_cursor_move,0,false);
       exit;
    }
   if sprite_index = spr_chip_cursor2 &amp;&amp; place_meeting(xstart,y,obj_chip){
       sprite_index = spr_chip_cursor;
       x = xstart;
       y = ystart;
       audio_play_sound(sou_cursor_move,0,0);
       exit;
   }    
  }
} 

//Left
if key_left_hold{
 Move_Timer += 1
 if Move_Timer = Move_Spd{
   Quick_Move = true
   if x != xstart &amp;&amp; place_meeting(x-16,y,obj_chip) &amp;&amp; sprite_index = spr_chip_cursor{
      x -= 16;
      Move_Timer = 0;
      audio_play_sound(sou_cursor_move,0,false);
      exit;
   } if x = xstart{       
      sprite_index = spr_chip_cursor2;
      x = obj_chip_holder.x-64;
      y = obj_chip_holder.y+119;
      Move_Timer = 0;
      audio_play_sound(sou_cursor_move,0,false);
      exit;
   }
   if sprite_index = spr_chip_cursor2 &amp;&amp; place_meeting(xstart+(16*4),y,obj_chip){
       sprite_index = spr_chip_cursor;
       x = xstart+(16*4);
       y = ystart;
       Move_Timer = 0;
       audio_play_sound(sou_cursor_move,0,0);
       exit;
   }   
 }
}

if key_left_release{
  if Quick_Move{
    Move_Timer = 0;
    Quick_Move = false;
  } else{
    Move_Timer = 0;
    if x != xstart &amp;&amp; place_meeting(x-16,y,obj_chip) &amp;&amp; sprite_index = spr_chip_cursor{
      x -= 16;
      audio_play_sound(sou_cursor_move,0,false);
      exit;
    } if x = xstart{
       sprite_index = spr_chip_cursor2;
       x = obj_chip_holder.x-64;
       y = obj_chip_holder.y+119;
       audio_play_sound(sou_cursor_move,0,false);
       exit;
    }
   if sprite_index = spr_chip_cursor2 &amp;&amp; place_meeting(xstart+(16*4),y,obj_chip){
       sprite_index = spr_chip_cursor;
       x = xstart+(16*4);
       y = ystart;
       audio_play_sound(sou_cursor_move,0,0);
       exit;
   }      
  }
}

//Up
if key_up_hold{
 Move_Timer += 1
 if Move_Timer = Move_Spd{
   Quick_Move = true
   if y != ystart &amp;&amp; place_meeting(x,y-24,obj_chip){
      y -= 24;
      Move_Timer = 0;
      audio_play_sound(sou_cursor_move,0,false);
      exit;
   } if y = ystart &amp;&amp; place_meeting(x,y+24,obj_chip){
      y += 24
      Move_Timer = 0
      audio_play_sound(sou_cursor_move,0,false);
      exit;
   }
 }
} 

if key_up_release{
  if Quick_Move{
    Move_Timer = 0;
    Quick_Move = false;
  } else{
    Move_Timer = 0;
    if y = ystart &amp;&amp; place_meeting(x,y+24,obj_chip){
      y += 24;
      audio_play_sound(sou_cursor_move,0,false);
      exit;
    } 
    if y != ystart &amp;&amp; place_meeting(x,y-24,obj_chip){
       y -= 24;
       audio_play_sound(sou_cursor_move,0,false);
       exit;
    }
  }
}

//Down
if key_down_hold{
 Move_Timer += 1
 if Move_Timer = Move_Spd{
   Quick_Move = true
   if y = ystart &amp;&amp; place_meeting(x,y+24,obj_chip){
      y += 24;
      Move_Timer = 0;
      audio_play_sound(sou_cursor_move,0,false);
      exit;
   } if y != ystart &amp;&amp; place_meeting(x,y-24,obj_chip){
      y -= 24
      Move_Timer = 0
      audio_play_sound(sou_cursor_move,0,false);
      exit;
   }
 }
}

if key_down_release{
  if Quick_Move{
    Move_Timer = 0;
    Quick_Move = false;
  } else{
    Move_Timer = 0;
    if y != ystart &amp;&amp; place_meeting(x,y-24,obj_chip){
      y -= 24;
      audio_play_sound(sou_cursor_move,0,false);
      exit;
    } 
    if y = ystart &amp;&amp; place_meeting(x,y+24,obj_chip){
       y += 24;
       audio_play_sound(sou_cursor_move,0,false);
       exit;
    }
  }
}

//Chip Selecting
if sprite_index = spr_chip_cursor &amp;&amp; place_meeting(x,y,obj_chip){
if instance_place(x,y,obj_chip).Selectable &amp;&amp; instance_place(x,y,obj_chip).image_alpha = 1 &amp;&amp; key_select{
    audio_play_sound(sou_chip_choose,0,false);
    if global.Slot_Name[1] = "" &amp;&amp; global.Slot_Code[1] = -1{
       with(instance_place(x,y,obj_chip)){
          image_alpha = 0;
          global.Selected_Chip[1] = id;
          Selected[1] = true;
       }
       global.Slot_Name[1] = instance_place(x,y,obj_chip).Name;
       global.Slot_Code_A[1] = instance_place(x,y,obj_chip).Code_A;
       global.Slot_Code[1] = instance_place(x,y,obj_chip).Code;
       global.Slot_Power[1] = instance_place(x,y,obj_chip).Power;
       global.Slot_Element[1] = instance_place(x,y,obj_chip).Element;
       global.Slot_Icon[1] = instance_place(x,y,obj_chip).Card_Icon;
    }
}

if instance_place(x,y,obj_chip).Selectable &amp;&amp; instance_place(x,y,obj_chip).image_alpha = 1 &amp;&amp; key_select{
    if global.Slot_Name[1] != "" &amp;&amp; global.Slot_Code[1] != -1 &amp;&amp; global.Slot_Name[2] = "" &amp;&amp; global.Slot_Code[2] = -1{
       with(instance_place(x,y,obj_chip)){
          image_alpha = 0;
          global.Selected_Chip[2] = id;
          Selected[2] = true;
       }
       global.Slot_Name[2] = instance_place(x,y,obj_chip).Name;
       global.Slot_Code_A[2] = instance_place(x,y,obj_chip).Code_A;
       global.Slot_Code[2] = instance_place(x,y,obj_chip).Code;
        global.Slot_Power[2] = instance_place(x,y,obj_chip).Power;
       global.Slot_Element[2] = instance_place(x,y,obj_chip).Element;
       global.Slot_Icon[2] = instance_place(x,y,obj_chip).Card_Icon;
    }
}

if instance_place(x,y,obj_chip).Selectable &amp;&amp; instance_place(x,y,obj_chip).image_alpha = 1 &amp;&amp; key_select{
    if global.Slot_Name[1] != "" &amp;&amp; global.Slot_Code[1] != -1 &amp;&amp; global.Slot_Name[2] != "" &amp;&amp; global.Slot_Code[2] != -1 &amp;&amp; global.Slot_Name[3] = "" &amp;&amp; global.Slot_Code[3] = -1{
       with(instance_place(x,y,obj_chip)){
          image_alpha = 0;
          global.Selected_Chip[3] = id;
          Selected[3] = true;
       }
       global.Slot_Name[3] = instance_place(x,y,obj_chip).Name;
       global.Slot_Code_A[3] = instance_place(x,y,obj_chip).Code_A;
       global.Slot_Code[3] = instance_place(x,y,obj_chip).Code;
        global.Slot_Power[3] = instance_place(x,y,obj_chip).Power;
       global.Slot_Element[3] = instance_place(x,y,obj_chip).Element;
       global.Slot_Icon[3] = instance_place(x,y,obj_chip).Card_Icon;
    }
}

if instance_place(x,y,obj_chip).Selectable &amp;&amp; instance_place(x,y,obj_chip).image_alpha = 1 &amp;&amp; key_select{
    if global.Slot_Name[1] != "" &amp;&amp; global.Slot_Code[1] != -1 &amp;&amp; global.Slot_Name[2] != "" &amp;&amp; global.Slot_Code[2] != -1 &amp;&amp; global.Slot_Name[3] != "" &amp;&amp; global.Slot_Code[3] != -1 &amp;&amp; global.Slot_Name[4] = "" &amp;&amp; global.Slot_Code[4] = -1{
       with(instance_place(x,y,obj_chip)){
          image_alpha = 0;
          global.Selected_Chip[4] = id;
          Selected[4] = true;
       }
       global.Slot_Name[4] = instance_place(x,y,obj_chip).Name;
       global.Slot_Code_A[4] = instance_place(x,y,obj_chip).Code_A;
       global.Slot_Code[4] = instance_place(x,y,obj_chip).Code;
        global.Slot_Power[4] = instance_place(x,y,obj_chip).Power;
       global.Slot_Element[4] = instance_place(x,y,obj_chip).Element;
       global.Slot_Icon[4] = instance_place(x,y,obj_chip).Card_Icon;
    }
}

if instance_place(x,y,obj_chip).Selectable &amp;&amp; instance_place(x,y,obj_chip).image_alpha = 1 &amp;&amp; key_select{
    if global.Slot_Name[1] != "" &amp;&amp; global.Slot_Code[1] != -1 &amp;&amp; global.Slot_Name[2] != "" &amp;&amp; global.Slot_Code[2] != -1 &amp;&amp; global.Slot_Name[3] != "" &amp;&amp; global.Slot_Code[3] != -1 &amp;&amp; global.Slot_Name[4] != "" &amp;&amp; global.Slot_Code[4] != -1 &amp;&amp; global.Slot_Name[5] = "" &amp;&amp; global.Slot_Code[5] = -1{
       with(instance_place(x,y,obj_chip)){
          image_alpha = 0;
          global.Selected_Chip[5] = id;
          Selected[5] = true;
       }
       global.Slot_Name[5] = instance_place(x,y,obj_chip).Name;
       global.Slot_Code_A[5] = instance_place(x,y,obj_chip).Code_A;
       global.Slot_Code[5] = instance_place(x,y,obj_chip).Code;
        global.Slot_Power[5] = instance_place(x,y,obj_chip).Power;
       global.Slot_Element[5] = instance_place(x,y,obj_chip).Element;
       global.Slot_Icon[5] = instance_place(x,y,obj_chip).Card_Icon;
    }
}
}

//Chip Deselecting
if key_deselect{
   audio_play_sound(sou_chip_cancel,0,false);  
  if global.Slot_Name[5] != ""{ //global.Selected_Chip[5] != 0{
     global.Slot_Name[5] = "";
     global.Slot_Code_A[5] = "";
     global.Slot_Code[5] = -1;
     global.Slot_Power[5] = -1;
     global.Slot_Element[5] = -1;
     global.Slot_Icon[5] = -1;
     with(global.Selected_Chip[5]) {image_alpha = 1; Selected[5] = false;}
     global.Selected_Chip[5] = 0;
     exit;
  }
  if global.Slot_Name[4] != ""{
     global.Slot_Name[4] = "";
     global.Slot_Code_A[4] = "";
     global.Slot_Code[4] = -1;
     global.Slot_Power[4] = -1;
     global.Slot_Element[4] = -1;
     global.Slot_Icon[4] = -1;
     with(global.Selected_Chip[4]) {image_alpha = 1; Selected[4] = false;}
     global.Selected_Chip[4] = 0;
     exit;
  }
  if global.Slot_Name[3] != ""{
     global.Slot_Name[3] = "";
     global.Slot_Code_A[3] = "";
     global.Slot_Code[3] = -1;
     global.Slot_Power[3] = -1;
     global.Slot_Element[3] = -1;
     global.Slot_Icon[3] = -1;
     with(global.Selected_Chip[3]) {image_alpha = 1; Selected[3] = false;}
     global.Selected_Chip[3] = 0;
     exit;
  }
  if global.Slot_Name[2] != ""{
     global.Slot_Name[2] = "";
     global.Slot_Code_A[2] = "";
     global.Slot_Code[2] = -1;
     global.Slot_Power[2] = -1;
     global.Slot_Element[2] = -1;
     global.Slot_Icon[2] = -1;
     with(global.Selected_Chip[2]) {image_alpha = 1; Selected[2] = false;}
     global.Selected_Chip[2] = 0;
     exit;
  }
  if global.Slot_Name[1] != ""{
     global.Slot_Name[1] = "";
     global.Slot_Code_A[1] = "";
     global.Slot_Code[1] = -1;
     global.Slot_Power[1] = -1;
     global.Slot_Element[1] = -1;
     global.Slot_Icon[1] = -1;
     with(global.Selected_Chip[1]) {image_alpha = 1; Selected[1] = false;}
     global.Selected_Chip[1] = 0;
     exit;
  }
}


}
//Chip Complete
if key_select &amp;&amp; sprite_index = spr_chip_cursor2{
  audio_play_sound(sou_chip_finish,0,false);
    with(obj_megaman){
     /*Hand_Name[1] = global.Slot_Name[1];
     Hand_Name[2] = global.Slot_Name[2];
     Hand_Name[3] = global.Slot_Name[3];
     Hand_Name[4] = global.Slot_Name[4];
     Hand_Name[5] = global.Slot_Name[5];
     
     Hand_Code[1] = global.Slot_Code[1];
     Hand_Code[2] = global.Slot_Code[2];
     Hand_Code[3] = global.Slot_Code[3];
     Hand_Code[4] = global.Slot_Code[4];
     Hand_Code[5] = global.Slot_Code[5];
     
     Hand_Power[1] = global.Slot_Power[1];
     Hand_Power[2] = global.Slot_Power[2];
     Hand_Power[3] = global.Slot_Power[3];
     Hand_Power[4] = global.Slot_Power[4];
     Hand_Power[5] = global.Slot_Power[5];
     
     Hand_Element[1] = global.Slot_Element[1];
     Hand_Element[2] = global.Slot_Element[2];
     Hand_Element[3] = global.Slot_Element[3];
     Hand_Element[4] = global.Slot_Element[4];
     Hand_Element[5] = global.Slot_Element[5];
     
     Hand_Icon[1] = global.Slot_Icon[1];
     Hand_Icon[2] = global.Slot_Icon[2];
     Hand_Icon[3] = global.Slot_Icon[3];
     Hand_Icon[4] = global.Slot_Icon[4];
     Hand_Icon[5] = global.Slot_Icon[5];*/
   }
   with(obj_chip){
   if Selected[1] || Selected[2] || Selected[3] || Selected[4] || Selected[5]{
      instance_destroy();
   }
   if !Selected[1] &amp;&amp; !Selected[2] &amp;&amp; !Selected[3] &amp;&amp; !Selected[4] &amp;&amp; !Selected[5]{
      ds_list_insert(Test_Deck,0,Object_Name)
      instance_destroy();
   }
   }
   with(obj_chip_holder){
      Move_Back = true;
   }
   with(obj_custom_gague) {image_alpha = 1;}
   with(obj_field) {Name_Draw = false}
   instance_destroy();
}

if key_start{
   audio_play_sound(sou_cursor_move,0,false);
   sprite_index = spr_chip_cursor2;
   x = obj_chip_holder.x-64;
   y = obj_chip_holder.y+119;
}

if key_info{
   global.Cursor_Control = "OFF";
   if !instance_exists(text_parent){
       with(instance_create(0,0,text_parent)){
           scr_text_system(1,spr_megaman_mugshot,"This chip does#a thing.",noone,-1,"",noone);
           alarm[0] = round(room_speed/5);
       }
   }
   else{
       with(instance_create(0,0,text_parent)){
           scr_text_system(1,spr_megaman_mugshot,"This chip does#a thing.",noone,-1,"",noone);
           alarm[0] = round(room_speed/5);
       }       
   }
}

if key_run{
  global.Cursor_Control = "OFF";
   if !instance_exists(text_parent){
       with(instance_create(0,0,text_parent)){
           scr_text_system(1,spr_megaman_mugshot,"Don't be that guy who#runs away.",noone,-1,"",noone);
           alarm[0] = round(room_speed/5);
       }
   }
   else{
       with(instance_create(0,0,text_parent)){
           scr_text_system(1,spr_megaman_mugshot,"Don't be that guy who#runs away.",noone,-1,"",noone);
           alarm[0] = round(room_speed/5);
       }       
   }  
  
}

/*if sprite_index = spr_chip_cursor2{
   if key_right_hold{
  if Move_Timer = Move_Spd{  
    audio_play_sound(sou_cursor_move,0,false);
    sprite_index = spr_chip_cursor;
    x = xstart;
    y = ystart;
    Move_Timer = 0;
    }
   }
   if key_left_hold{
     if Move_Timer = Move_Spd{
        audio_play_sound(sou_cursor_move,0,false);
        sprite_index = spr_chip_cursor;
        x = xstart+(16*4);
        y = ystart;
        Move_Timer = 0;
      }
   }
}*/
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
